<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StriveZs的博客</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.strivezs.com/"/>
  <updated>2021-02-06T03:27:40.070Z</updated>
  <id>www.strivezs.com/</id>
  
  <author>
    <name>StriveZs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode No.34</title>
    <link href="www.strivezs.com/2021/02/06/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/06/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E9%A2%98/</id>
    <published>2021-02-06T03:27:40.070Z</published>
    <updated>2021-02-06T03:27:40.070Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十四题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>进阶：</p><p>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>], target = <span class="number">8</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [], target = <span class="number">0</span></span><br><span class="line">输出：[<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= nums.length &lt;= <span class="number">105</span></span><br><span class="line"><span class="number">-109</span> &lt;= nums[i] &lt;= <span class="number">109</span></span><br><span class="line">nums 是一个非递减数组</span><br><span class="line"><span class="number">-109</span> &lt;= target &lt;= <span class="number">109</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 二分查找边界坐标 如果没有则返回[-1,-1]</span></span><br><span class="line">    <span class="comment"># 查找左侧边界</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leftbinarySearch</span><span class="params">(self,nums,l,r,target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> nums[l] == target:</span><br><span class="line">            <span class="keyword">if</span> l == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> nums[l<span class="number">-1</span>] != target:</span><br><span class="line">                <span class="keyword">return</span> l</span><br><span class="line">            <span class="keyword">elif</span> nums[l<span class="number">-1</span>] == target:</span><br><span class="line">                <span class="keyword">return</span> self.leftbinarySearch(nums, l<span class="number">-1</span>, r, target)</span><br><span class="line">        <span class="keyword">elif</span> r &gt; l:</span><br><span class="line">            mid = int((r+l)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">                <span class="keyword">return</span> self.leftbinarySearch(nums, l, mid<span class="number">-1</span>,target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                <span class="keyword">return</span> self.leftbinarySearch(nums, mid+<span class="number">1</span>, r, target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> self.leftbinarySearch(nums, mid, r, target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找右侧边界</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightbinarySearch</span><span class="params">(self,nums,l,r,target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> nums[r] == target:</span><br><span class="line">            <span class="keyword">if</span> r == len(nums)<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> len(nums)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[r + <span class="number">1</span>] != target:</span><br><span class="line">                <span class="keyword">return</span> r</span><br><span class="line">            <span class="keyword">elif</span> nums[r + <span class="number">1</span>] == target:</span><br><span class="line">                <span class="keyword">return</span> self.rightbinarySearch(nums, l, r+<span class="number">1</span>, target)</span><br><span class="line">        <span class="keyword">elif</span> r &gt; l:</span><br><span class="line">            mid = int((r + l) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">                <span class="keyword">return</span> self.rightbinarySearch(nums, l, mid - <span class="number">1</span>, target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                <span class="keyword">return</span> self.rightbinarySearch(nums, mid + <span class="number">1</span>, r, target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> self.rightbinarySearch(nums, l, mid, target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">            由于给定的数组是一个非递减数组，因IC同样可以使用33的中的二分法来查找到target的左右边界index</span></span><br><span class="line"><span class="string">        例子：</span></span><br><span class="line"><span class="string">            [5,7,7,8,8,8,10], target = 8</span></span><br><span class="line"><span class="string">            左右边界点分别为3、5</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">        a = self.leftbinarySearch(nums,<span class="number">0</span>,len(nums)<span class="number">-1</span>,target)</span><br><span class="line">        b = self.rightbinarySearch(nums,<span class="number">0</span>,len(nums)<span class="number">-1</span>,target)</span><br><span class="line">        boundarylist = []</span><br><span class="line">        boundarylist.append(a)</span><br><span class="line">        boundarylist.append(b)</span><br><span class="line">        <span class="keyword">return</span> boundarylist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.searchRange([<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>],<span class="number">8</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十四题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.33</title>
    <link href="www.strivezs.com/2021/02/06/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/06/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-02-06T02:34:44.187Z</published>
    <updated>2021-02-06T02:34:44.187Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十三题</h1><p>昨天这题没写完，无限火力太好玩了 md，今天又花了一个小时写完了。太菜了</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>升序排列的整数数组 nums 在预先未知的某个点上进行了旋转（例如， [0,1,2,4,5,6,7] 经旋转后可能变为 [4,5,6,7,0,1,2] ）。</p><p>请你在数组中搜索 target ，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">0</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">3</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>], target = <span class="number">0</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">5000</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= nums[i] &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line">nums 中的每个值都 独一无二</span><br><span class="line">nums 肯定会在某个点上旋转</span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= target &lt;= <span class="number">10</span>^<span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>给我写吐血了，写了两个小时，我太菜了，连二分查找都快忘了。最终还是AC了 害 辛苦没白费。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    # 递归寻找旋转点  二分法</span><br><span class="line">    def searchMidPoint(self,nums,<span class="keyword">l</span>,r):</span><br><span class="line">        <span class="keyword">if</span> r &lt;= <span class="keyword">l</span>+<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">l</span>+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = <span class="keyword">int</span>((r+<span class="keyword">l</span>)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; nums[<span class="built_in">len</span>(nums)-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> self.searchMidPoint(nums, <span class="keyword">l</span>, mid)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.searchMidPoint(nums, mid, r)</span><br><span class="line"></span><br><span class="line">    # 二分法寻找目标值</span><br><span class="line">    def binarySearch(self,nums, <span class="keyword">l</span>, r, target):</span><br><span class="line">        <span class="keyword">if</span> r &gt; <span class="variable">l:</span></span><br><span class="line">            mid = <span class="keyword">int</span>((r+<span class="keyword">l</span>)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            elif nums[mid] &gt; targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums, <span class="keyword">l</span>, mid - <span class="number">1</span>, target)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums, mid + <span class="number">1</span>, r, target)</span><br><span class="line">        elif r == <span class="variable">l:</span></span><br><span class="line">            <span class="keyword">if</span> nums[r] == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> r</span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    def <span class="built_in">search</span>(self, nums, target):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> num<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :<span class="built_in">type</span> targe<span class="variable">t:</span> <span class="keyword">int</span></span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        旋转数组：</span><br><span class="line">                输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] 和 <span class="keyword">k</span> = <span class="number">3</span></span><br><span class="line">                输出: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">                解释:</span><br><span class="line">                向右旋转 <span class="number">1</span> 步: [<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">                向右旋转 <span class="number">2</span> 步: [<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">                向右旋转 <span class="number">3</span> 步: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">        核心思想：采用二分搜索法</span><br><span class="line">                对于num来说，如果它的最后侧的数比中间数大则中间数右侧的序列是有序的，而左侧则是无序的</span><br><span class="line">                然后以此来找左侧的数组中的中间数同样进行判断，采用递归的方法来寻找到旋转点</span><br><span class="line">                找到旋转点后就可以将原数组划分为两个序列，分别对两个序列进行二分查找从而找到对应的下标</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        # 特殊处理 nums 长度为<span class="number">1</span>或<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>] == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">2</span> <span class="built_in">and</span> nums[<span class="number">1</span>] == targe<span class="variable">t:</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        # 创建字典来对应对下标</span><br><span class="line">        # <span class="built_in">index</span> = <span class="keyword">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(nums)))</span><br><span class="line">        # indexlist = dict(zip(nums,<span class="built_in">index</span>))</span><br><span class="line">        # <span class="keyword">print</span>(indexlist)</span><br><span class="line">        # 寻找旋转点</span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">0</span>] &lt; nums[<span class="built_in">len</span>(nums)-<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">index</span> = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">index</span> = self.searchMidPoint(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)  # 旋转点</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">index</span> += <span class="number">1</span></span><br><span class="line">        #print(<span class="built_in">index</span>)</span><br><span class="line">        # 找到旋转点之后就可以将原数组划分为两个有序数组</span><br><span class="line">        leftlist = nums[<span class="number">0</span>:<span class="built_in">index</span>]</span><br><span class="line">        rightlist = nums[<span class="built_in">index</span>:<span class="built_in">len</span>(nums)]</span><br><span class="line">        <span class="keyword">print</span>(leftlist)</span><br><span class="line">        <span class="keyword">print</span>(rightlist)</span><br><span class="line">        # 如果target大于leftlist则在nums中则位于leftlist，反之如果targe小于leftlist大于rightlist则在rightlist中</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(rightlist) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> target &lt; leftlist[<span class="number">0</span>] <span class="built_in">and</span> target &gt; leftlist[<span class="built_in">len</span>(leftlist)-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tarIndex = self.binarySearch(leftlist, <span class="number">0</span>, <span class="built_in">len</span>(leftlist) - <span class="number">1</span>, target)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">index</span> - <span class="built_in">len</span>(leftlist) + tarIndex</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> target &gt;= leftlist[<span class="number">0</span>] <span class="built_in">and</span> target &lt;= leftlist[<span class="built_in">len</span>(leftlist) - <span class="number">1</span>]:</span><br><span class="line">                tarIndex = self.binarySearch(leftlist, <span class="number">0</span>, <span class="built_in">len</span>(leftlist) - <span class="number">1</span>, target)</span><br><span class="line">                <span class="keyword">if</span> tarIndex == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">index</span> - <span class="built_in">len</span>(leftlist) + tarIndex</span><br><span class="line">            elif target &gt;= rightlist[<span class="number">0</span>] <span class="built_in">and</span> target &lt;= rightlist[<span class="built_in">len</span>(rightlist) - <span class="number">1</span>]:</span><br><span class="line">                tarIndex = self.binarySearch(rightlist, <span class="number">0</span>, <span class="built_in">len</span>(rightlist) - <span class="number">1</span>, target)</span><br><span class="line">                <span class="keyword">if</span> tarIndex == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> tarIndex + <span class="built_in">index</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.<span class="built_in">search</span>(nums = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十三题&lt;/h1&gt;
&lt;p&gt;昨天这题没写完，无限火力太好玩了 md，今天又花了一个小时写完了。太菜了&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;升序排
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.32</title>
    <link href="www.strivezs.com/2021/02/04/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/04/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E9%A2%98/</id>
    <published>2021-02-04T10:49:32.290Z</published>
    <updated>2021-02-04T10:49:32.290Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十二题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个只包含 ‘(’ 和 ‘)’ 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><p></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"(()"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：最长有效括号子串是 <span class="string">"()"</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">")()())"</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长有效括号子串是 <span class="string">"()()"</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">""</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= s.length &lt;= <span class="number">3</span> * <span class="number">104</span></span><br><span class="line">s[i] 为 '(' 或 ')'</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def longestValidParentheses(self, s):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        核心思想：使用动态规划求解问题</span><br><span class="line">                碰到<span class="string">")"</span> 为基础长度为<span class="number">2</span></span><br><span class="line">                内部连在一起的的长度为<span class="keyword">dp</span>[i-<span class="number">1</span>]</span><br><span class="line">                外部连在一起的长度为<span class="keyword">dp</span>[i-<span class="keyword">dp</span>[i-<span class="number">1</span>]-<span class="number">2</span>]</span><br><span class="line">                状态转移方程为：<span class="number">2</span> + <span class="keyword">dp</span>[i-<span class="number">1</span>] + <span class="keyword">dp</span>[i-<span class="keyword">dp</span>[i-<span class="number">1</span>]-<span class="number">2</span>]</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        length = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">dp</span> = [<span class="number">0</span>] * length</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">        # 当遇到右括号时，尝试向前匹配左括号</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">pre</span> = i - <span class="keyword">dp</span>[i-<span class="number">1</span>] -<span class="number">1</span></span><br><span class="line">                # 如果是左括号，则更新匹配长度</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">pre</span> &gt;= <span class="number">0</span> <span class="built_in">and</span> s[<span class="keyword">pre</span>] == <span class="string">'('</span>:</span><br><span class="line">                    <span class="keyword">dp</span>[i] = <span class="keyword">dp</span>[i-<span class="number">1</span>] + <span class="number">2</span></span><br><span class="line">                    # 处理独立的括号对的情形 类似()()、()(())</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">pre</span> &gt; <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">dp</span>[i] += <span class="keyword">dp</span>[<span class="keyword">pre</span>-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="keyword">dp</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.longestValidParentheses(s = <span class="string">"()(())))"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十二题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给你一个只包含 ‘(’ 和 ‘)’ 的字符串，找出最长有效（格式正确且连续）括号子串的长度。&lt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.31</title>
    <link href="www.strivezs.com/2021/02/03/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/03/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-02-03T10:44:59.391Z</published>
    <updated>2021-02-03T10:44:59.391Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十一题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须 原地 修改，只允许使用额外常数空间。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">0</span> &lt;= nums[i] &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        length = len(nums) <span class="comment"># 总长度</span></span><br><span class="line">        index_a = length - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 从后往前找</span></span><br><span class="line">        <span class="keyword">while</span> index_a &gt;= <span class="number">0</span>:</span><br><span class="line">            index_b = length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> index_b &gt; index_a :</span><br><span class="line">                <span class="comment"># 如果大于则交换位置并对前面查找的内容进行排序</span></span><br><span class="line">                <span class="keyword">if</span> nums[index_b] &gt; nums[index_a]:</span><br><span class="line">                    temp = nums[index_a]</span><br><span class="line">                    nums[index_a] = nums[index_b]</span><br><span class="line">                    nums[index_b] = temp</span><br><span class="line">                    tt = nums[index_a + <span class="number">1</span>:len(nums)]</span><br><span class="line">                    tt.sort()</span><br><span class="line">                    nums[index_a+<span class="number">1</span>:len(nums)] = tt</span><br><span class="line">                    <span class="keyword">return</span> nums</span><br><span class="line">                index_b -= <span class="number">1</span></span><br><span class="line">            index_a -= <span class="number">1</span></span><br><span class="line">        nums.reverse()</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.nextPermutation(nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十一题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。&lt;/p
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>Python—itertools库使用</title>
    <link href="www.strivezs.com/2021/02/02/Python%E2%80%94itertools%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    <id>www.strivezs.com/2021/02/02/Python%E2%80%94itertools%E5%BA%93%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-02T10:02:42.991Z</published>
    <updated>2021-02-02T10:02:42.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python—itertools库使用"><a href="#Python—itertools库使用" class="headerlink" title="Python—itertools库使用"></a>Python—itertools库使用</h1><h2 id="itertools-product"><a href="#itertools-product" class="headerlink" title="itertools.product()"></a>itertools.product()</h2><p>重复使用words 3次进行元素间的组合，总共是3×3×3=27中情况。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"word"</span>, <span class="string">"good"</span>, <span class="string">"best"</span>]</span><br><span class="line"><span class="builtin-name">print</span>(list(itertools.product(words, <span class="attribute">repeat</span>=3)))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[(<span class="string">'word'</span>, <span class="string">'word'</span>, <span class="string">'word'</span>), (<span class="string">'word'</span>, <span class="string">'word'</span>, <span class="string">'good'</span>), (<span class="string">'word'</span>, <span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'word'</span>), (<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'good'</span>),</span><br><span class="line">(<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>, <span class="string">'word'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>, <span class="string">'good'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>, <span class="string">'best'</span>), (<span class="string">'good'</span>, <span class="string">'word'</span>, <span class="string">'word'</span>),</span><br><span class="line">(<span class="string">'good'</span>, <span class="string">'word'</span>, <span class="string">'good'</span>), (<span class="string">'good'</span>, <span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'good'</span>, <span class="string">'good'</span>, <span class="string">'word'</span>), (<span class="string">'good'</span>, <span class="string">'good'</span>, <span class="string">'good'</span>), (<span class="string">'good'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>),</span><br><span class="line">(<span class="string">'good'</span>, <span class="string">'best'</span>, <span class="string">'word'</span>), (<span class="string">'good'</span>, <span class="string">'best'</span>, <span class="string">'good'</span>), (<span class="string">'good'</span>, <span class="string">'best'</span>, <span class="string">'best'</span>), (<span class="string">'best'</span>, <span class="string">'word'</span>, <span class="string">'word'</span>), (<span class="string">'best'</span>, <span class="string">'word'</span>, <span class="string">'good'</span>),</span><br><span class="line">(<span class="string">'best'</span>, <span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'best'</span>, <span class="string">'good'</span>, <span class="string">'word'</span>), (<span class="string">'best'</span>, <span class="string">'good'</span>, <span class="string">'good'</span>), (<span class="string">'best'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>), (<span class="string">'best'</span>, <span class="string">'best'</span>, <span class="string">'word'</span>),</span><br><span class="line">(<span class="string">'best'</span>, <span class="string">'best'</span>, <span class="string">'good'</span>), (<span class="string">'best'</span>, <span class="string">'best'</span>, <span class="string">'best'</span>)]</span><br></pre></td></tr></table></figure><h2 id="itertools-combinations"><a href="#itertools-combinations" class="headerlink" title="itertools.combinations()"></a>itertools.combinations()</h2><p>内部有序自己组合，要求长度小于列表自身长度。  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"word"</span>, <span class="string">"good"</span>, <span class="string">"best"</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list(itertools.combinations(words, <span class="number">3</span>)</span></span>))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[(<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>)]</span><br><span class="line"></span><br><span class="line">words = [<span class="string">"word"</span>, <span class="string">"good"</span>, <span class="string">"best"</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list(itertools.combinations(words, <span class="number">2</span>)</span></span>))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[(<span class="string">'word'</span>, <span class="string">'good'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'good'</span>, <span class="string">'best'</span>)]</span><br></pre></td></tr></table></figure><h2 id="itertools-permutations"><a href="#itertools-permutations" class="headerlink" title="itertools.permutations()"></a>itertools.permutations()</h2><p>内部无序自组合</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"word"</span>, <span class="string">"good"</span>, <span class="string">"best"</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">list</span>(itertools.permutations(words, <span class="number">3</span>))) <span class="comment"># 3为列表长度</span></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[(<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>, <span class="string">'good'</span>), (<span class="string">'good'</span>, <span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'good'</span>, <span class="string">'best'</span>, <span class="string">'word'</span>), (<span class="string">'best'</span>, <span class="string">'word'</span>, <span class="string">'good'</span>), (<span class="string">'best'</span>, <span class="string">'good'</span>, <span class="string">'word'</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python—itertools库使用&quot;&gt;&lt;a href=&quot;#Python—itertools库使用&quot; class=&quot;headerlink&quot; title=&quot;Python—itertools库使用&quot;&gt;&lt;/a&gt;Python—itertools库使用&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="Python" scheme="www.strivezs.com/categories/Python/"/>
    
    
      <category term="Python" scheme="www.strivezs.com/tags/Python/"/>
    
      <category term="itertools" scheme="www.strivezs.com/tags/itertools/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.30</title>
    <link href="www.strivezs.com/2021/02/02/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/02/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E9%A2%98/</id>
    <published>2021-02-02T10:01:47.261Z</published>
    <updated>2021-02-02T10:01:47.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第三十题"><a href="#LeetCode第三十题" class="headerlink" title="LeetCode第三十题"></a>LeetCode第三十题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。</p><p>注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">  s = <span class="string">"barfoothefoobarman"</span>,</span><br><span class="line">  words = [<span class="string">"foo"</span>,<span class="string">"bar"</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line">解释：</span><br><span class="line">从索引 <span class="number">0</span> 和 <span class="number">9</span> 开始的子串分别是 <span class="string">"barfoo"</span> 和 <span class="string">"foobar"</span> 。</span><br><span class="line">输出的顺序不重要, [<span class="number">9</span>,<span class="number">0</span>] 也是有效答案。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">  s = <span class="string">"wordgoodgoodgoodbestword"</span>,</span><br><span class="line">  words = [<span class="string">"word"</span>,<span class="string">"good"</span>,<span class="string">"best"</span>,<span class="string">"word"</span>]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="超时版本"><a href="#超时版本" class="headerlink" title="超时版本"></a>超时版本</h3><p>采用最传统的办法直接超时了，裂开。  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">class Solution(object):</span><br><span class="line">    def findSubstring(self, s, words):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :<span class="built_in">type</span> word<span class="variable">s:</span> List[str]</span><br><span class="line">        :rtype: List[<span class="keyword">int</span>]</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        wordList = <span class="keyword">list</span>(itertools.permutations(words, <span class="built_in">len</span>(words))) # 调用库来生成列表排列组合</span><br><span class="line">        stringList = []</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(wordList)):</span><br><span class="line">            temp = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="built_in">len</span>(words)):</span><br><span class="line">                temp += wordList[i][<span class="keyword">j</span>]</span><br><span class="line">            <span class="keyword">if</span> temp not in stringLis<span class="variable">t:</span></span><br><span class="line">                stringList.<span class="keyword">append</span>(temp)</span><br><span class="line">        indexlist = []</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="built_in">len</span>(stringList)):</span><br><span class="line">                <span class="keyword">if</span> i + <span class="built_in">len</span>(stringList[<span class="keyword">j</span>]) &lt;= <span class="built_in">len</span>(s):</span><br><span class="line">                    <span class="keyword">if</span> s[i:i + <span class="built_in">len</span>(stringList[<span class="keyword">j</span>])] == stringList[<span class="keyword">j</span>]:</span><br><span class="line">                        indexlist.<span class="keyword">append</span>(i)</span><br><span class="line">        <span class="keyword">return</span> indexlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.findSubstring(s = <span class="string">"barfoothefoobarman"</span>,</span><br><span class="line">  words = [<span class="string">"foo"</span>,<span class="string">"bar"</span>]))</span><br></pre></td></tr></table></figure><h3 id="AC版本"><a href="#AC版本" class="headerlink" title="AC版本"></a>AC版本</h3><p>纯手撸，一个小时搞定，头大。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def findSubstring(self, s, words):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :<span class="built_in">type</span> word<span class="variable">s:</span> List[str]</span><br><span class="line">        :rtype: List[<span class="keyword">int</span>]</span><br><span class="line">        核心思想：</span><br><span class="line">                ① 先统计words中每个单词的词频、words中单词的个数和一个单词的长度</span><br><span class="line">                ② 然后从头开始遍历s，统计（单词数×单词长度）的长度内单词出现的次数</span><br><span class="line">                ③ 如果在当前坐标下统计到的单词次数和words中单词词频相同则表示相同并记录<span class="built_in">index</span></span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        # 统计words词频</span><br><span class="line">        wordsnum = <span class="built_in">len</span>(<span class="keyword">list</span>(<span class="keyword">set</span>(words)))</span><br><span class="line">        zerolist = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(wordsnum)]</span><br><span class="line">        wordsdicts = dict(zip(<span class="keyword">list</span>(<span class="keyword">set</span>(words)), zerolist))</span><br><span class="line">        <span class="keyword">for</span> i in word<span class="variable">s:</span></span><br><span class="line">            wordsdicts[i] += <span class="number">1</span></span><br><span class="line">        # <span class="keyword">print</span>(wordsdicts)</span><br><span class="line">        # 记录<span class="built_in">string</span>词频</span><br><span class="line">        zerolist = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(wordsnum)]</span><br><span class="line">        strdicts = dict(zip(<span class="keyword">list</span>(<span class="keyword">set</span>(words)),zerolist))</span><br><span class="line">        # 组合后的长度</span><br><span class="line">        wordnum = <span class="built_in">len</span>(words)</span><br><span class="line">        wordlength = <span class="built_in">len</span>(words[<span class="number">0</span>])</span><br><span class="line">        sumlength = wordnum * wordlength</span><br><span class="line">        # <span class="keyword">print</span>(strdicts)</span><br><span class="line">        # 下标存储<span class="keyword">list</span></span><br><span class="line">        indexlist = []</span><br><span class="line"></span><br><span class="line">        # 统计<span class="built_in">string</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            # 更新词频</span><br><span class="line">            zerolist = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(wordsnum)]</span><br><span class="line">            strdicts = dict(zip(<span class="keyword">list</span>(<span class="keyword">set</span>(words)), zerolist))</span><br><span class="line">            flag = True</span><br><span class="line">            <span class="keyword">if</span> i + sumlength &gt; <span class="built_in">len</span>(s):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t = i</span><br><span class="line">                <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(wordnum):</span><br><span class="line">                    <span class="keyword">if</span> s[<span class="variable">t:t</span>+wordlength] in word<span class="variable">s:</span></span><br><span class="line">                        strdicts[s[<span class="variable">t:t</span>+wordlength]] += <span class="number">1</span></span><br><span class="line">                        t += wordlength</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        flag = False</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> fla<span class="variable">g:</span></span><br><span class="line">                    flags = True</span><br><span class="line">                    <span class="keyword">for</span> <span class="keyword">k</span>,v in strdicts.<span class="built_in">items</span>():</span><br><span class="line">                        <span class="keyword">if</span> wordsdicts[<span class="keyword">k</span>] != <span class="variable">v:</span></span><br><span class="line">                            flags = False</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag<span class="variable">s:</span></span><br><span class="line">                        indexlist.<span class="keyword">append</span>(i)</span><br><span class="line">        <span class="keyword">return</span> indexlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.findSubstring(s = <span class="string">"barfoothefoobarman"</span>,</span><br><span class="line">  words = [<span class="string">"foo"</span>,<span class="string">"bar"</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第三十题&quot;&gt;&lt;a href=&quot;#LeetCode第三十题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第三十题&quot;&gt;&lt;/a&gt;LeetCode第三十题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; cla
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.29</title>
    <link href="www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-02-01T05:18:14.831Z</published>
    <updated>2021-02-01T05:18:14.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第二十九题"><a href="#LeetCode第二十九题" class="headerlink" title="LeetCode第二十九题"></a>LeetCode第二十九题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。</p><p>返回被除数 dividend 除以除数 divisor 得到的商。</p><p>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: dividend = <span class="number">10</span>, divisor = <span class="number">3</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: <span class="number">10</span>/<span class="number">3</span> = truncate(<span class="number">3.33333</span>..) = truncate(<span class="number">3</span>) = <span class="number">3</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: dividend = <span class="number">7</span>, divisor = <span class="number">-3</span></span><br><span class="line">输出: <span class="number">-2</span></span><br><span class="line">解释: <span class="number">7</span>/<span class="number">-3</span> = truncate(<span class="number">-2.33333</span>..) = <span class="number">-2</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">被除数和除数均为 <span class="number">32</span> 位有符号整数。</span><br><span class="line">除数不为 <span class="number">0</span>。</span><br><span class="line">假设我们的环境只能存储 <span class="number">32</span> 位有符号整数，其数值范围是 [−<span class="number">231</span>,  <span class="number">231</span> − <span class="number">1</span>]。本题中，如果除法结果溢出，则返回 <span class="number">231</span> − <span class="number">1</span>。</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(self, dividend, divisor)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type dividend: int</span></span><br><span class="line"><span class="string">        :type divisor: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i, a, b = <span class="number">0</span>, abs(dividend), abs(divisor)</span><br><span class="line">        <span class="comment"># 被除数小于除数的情况直接返回0</span></span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">or</span> a &lt; b:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> b &lt;= a:</span><br><span class="line">            b = b &lt;&lt; <span class="number">1</span>  <span class="comment"># 位运算 位左移1位</span></span><br><span class="line">            i = i + <span class="number">1</span>  <span class="comment"># i为2幂</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)) + self.divide(a - (b &gt;&gt; <span class="number">1</span>), abs(divisor)) <span class="comment"># 用减法来得到商</span></span><br><span class="line">            <span class="keyword">if</span> (dividend ^ divisor) &lt; <span class="number">0</span>: <span class="comment"># 负结果判断</span></span><br><span class="line">                res = -res</span><br><span class="line">            <span class="keyword">return</span> min(res, (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>) <span class="comment"># 去掉溢出情况</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第二十九题&quot;&gt;&lt;a href=&quot;#LeetCode第二十九题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第二十九题&quot;&gt;&lt;/a&gt;LeetCode第二十九题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.28</title>
    <link href="www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-02-01T05:15:53.958Z</published>
    <updated>2021-02-01T05:15:53.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第二十八题"><a href="#LeetCode第二十八题" class="headerlink" title="LeetCode第二十八题"></a>LeetCode第二十八题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现 strStr() 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"hello"</span>, <span class="attr">needle</span> = <span class="string">"ll"</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"aaaaa"</span>, <span class="attr">needle</span> = <span class="string">"bba"</span></span><br><span class="line">输出: -<span class="number">1</span></span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</span><br><span class="line"></span><br><span class="line">对于本题而言，当 needle 是空字符串时我们应当返回 <span class="number">0</span> 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type haystack: str</span></span><br><span class="line"><span class="string">        :type needle: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> haystack == <span class="string">""</span> <span class="keyword">and</span> needle == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        index = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(haystack)):</span><br><span class="line">            <span class="keyword">if</span> i + len(needle) &gt; len(haystack):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> haystack[i:i+len(needle)] == needle:</span><br><span class="line">                index = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.strStr(haystack = <span class="string">"hello"</span>, needle = <span class="string">"ll"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第二十八题&quot;&gt;&lt;a href=&quot;#LeetCode第二十八题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第二十八题&quot;&gt;&lt;/a&gt;LeetCode第二十八题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.27</title>
    <link href="www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E9%A2%98/</id>
    <published>2021-02-01T05:15:50.451Z</published>
    <updated>2021-02-01T05:15:50.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第二十七题"><a href="#LeetCode第二十七题" class="headerlink" title="LeetCode第二十七题"></a>LeetCode第二十七题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><p>// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝<br>int len = removeElement(nums, val);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span>, nums = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">2</span>, 并且 nums 中的前两个元素均为 <span class="number">2</span>。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 <span class="number">2</span> ，而 nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>] 或 nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>]，也会被视作正确答案。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>], val = <span class="number">2</span></span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">5</span>, 并且 nums 中的前五个元素为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= nums.length &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">0</span> &lt;= nums[i] &lt;= <span class="number">50</span></span><br><span class="line"><span class="number">0</span> &lt;= val &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def removeElement(self, nums, val):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> num<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :<span class="built_in">type</span> va<span class="variable">l:</span> <span class="keyword">int</span></span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != va<span class="variable">l:</span></span><br><span class="line">                result.<span class="keyword">append</span>(nums[i])</span><br><span class="line">        nums[<span class="number">0</span>:<span class="built_in">len</span>(result)] = result</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.removeElement(nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第二十七题&quot;&gt;&lt;a href=&quot;#LeetCode第二十七题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第二十七题&quot;&gt;&lt;/a&gt;LeetCode第二十七题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.26</title>
    <link href="www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-02-01T05:15:46.128Z</published>
    <updated>2021-02-01T05:15:46.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第二十六题"><a href="#LeetCode第二十六题" class="headerlink" title="LeetCode第二十六题"></a>LeetCode第二十六题</h1><p>鸽了两天，我胡汉三又回来了，今天把之前缺的都补回来。  </p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">给定数组 nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 <span class="number">2</span>, 并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span>。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">给定 nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 <span class="number">5</span>, 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">len</span> = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = set(nums)</span><br><span class="line">        result = sorted(list(temp))</span><br><span class="line">        nums[<span class="number">0</span>:len(result)] = result  <span class="comment"># 注意为了能够AC需要将nums前x个替换为去重之后的数组</span></span><br><span class="line">        <span class="keyword">return</span> len(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.removeDuplicates(nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第二十六题&quot;&gt;&lt;a href=&quot;#LeetCode第二十六题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第二十六题&quot;&gt;&lt;/a&gt;LeetCode第二十六题&lt;/h1&gt;&lt;p&gt;鸽了两天，我胡汉三又回来了，今天把之前缺的都补回来。
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.25</title>
    <link href="www.strivezs.com/2021/01/29/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/29/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E9%A2%98/</id>
    <published>2021-01-29T10:53:04.742Z</published>
    <updated>2021-01-29T10:53:04.742Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第二十五题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">给你这个链表：<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br><span class="line"></span><br><span class="line">当 k = <span class="number">2</span> 时，应当返回: <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span></span><br><span class="line"></span><br><span class="line">当 k = <span class="number">3</span> 时，应当返回: <span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">你的算法只能使用常数的额外空间。</span><br><span class="line">你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><h2 id="超时的版本"><a class="header-anchor" href="#超时的版本">¶</a>超时的版本</h2><p>分析愿原因为引入了统计长度的代码和两个多次循环重复</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># Definition <span class="keyword">for</span> singly-linked <span class="keyword">list</span>.</span><br><span class="line">class ListNode(object):</span><br><span class="line">    def __init__(self, val=<span class="number">0</span>, <span class="keyword">next</span>=None):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="keyword">next</span> = <span class="keyword">next</span></span><br><span class="line"></span><br><span class="line">class Solution(object):</span><br><span class="line">    def reverseKGroup(self, head, <span class="keyword">k</span>):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> head: ListNode</span><br><span class="line">        :<span class="built_in">type</span> <span class="keyword">k</span>: <span class="keyword">int</span></span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="keyword">res</span> = head</span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        # 计算长度</span><br><span class="line">        <span class="keyword">while</span> head != None:</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">            head = head.<span class="keyword">next</span></span><br><span class="line">        <span class="keyword">if</span> length &lt; <span class="keyword">k</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        head = <span class="keyword">res</span></span><br><span class="line">        part = <span class="keyword">int</span>(length / <span class="keyword">k</span>)  # 共有多少个整数组</span><br><span class="line">        yushu = length % <span class="keyword">k</span> # 余数</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        NodeList = []</span><br><span class="line">        # 使用栈</span><br><span class="line">        <span class="keyword">while</span> True:</span><br><span class="line">            <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">k</span>):</span><br><span class="line">                NodeList.<span class="keyword">append</span>(head)</span><br><span class="line">                head = head.<span class="keyword">next</span></span><br><span class="line">            <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">k</span>):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> <span class="built_in">and</span> num == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">res</span> = NodeList.<span class="keyword">pop</span>()</span><br><span class="line">                    result = <span class="keyword">res</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">res</span>.<span class="keyword">next</span> = NodeList.<span class="keyword">pop</span>()</span><br><span class="line">                    <span class="keyword">res</span> = <span class="keyword">res</span>.<span class="keyword">next</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num == par<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">if</span> yushu != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">res</span>.<span class="keyword">next</span> = head</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ln1 = ListNode(val=<span class="number">1</span>)</span><br><span class="line">    ln2 = ListNode(val=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    ln1.<span class="keyword">next</span> = ln2</span><br><span class="line"></span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.reverseKGroup(ln1,<span class="number">2</span>).val)</span><br></pre></td></tr></table></figure><h3 id="改正版本"><a class="header-anchor" href="#改正版本">¶</a>改正版本</h3><p>去掉了一重循环，变成交换次序的操作了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, val=<span class="number">0</span>, <span class="keyword">next</span>=None)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.val = val</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">next</span> = <span class="keyword">next</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(<span class="keyword">self</span>, head, k)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        dummy = ListNode(val=<span class="number">0</span>)</span><br><span class="line">        current = head</span><br><span class="line">        prev = dummy</span><br><span class="line">        <span class="keyword">next</span> = ListNode(val=<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="keyword">next</span> = head</span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 计算长度</span></span><br><span class="line">        <span class="keyword">while</span> head != <span class="symbol">None:</span></span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">            head = head.<span class="keyword">next</span></span><br><span class="line">        head = dummy.<span class="keyword">next</span>  <span class="comment"># 恢复head</span></span><br><span class="line">        <span class="keyword">if</span> length &lt; <span class="symbol">k:</span></span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        part = int(length / k)  <span class="comment"># 共有多少个整数组</span></span><br><span class="line">        yushu = length % k <span class="comment"># 余数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(part)<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(k-<span class="number">1</span>)<span class="symbol">:</span></span><br><span class="line">                <span class="keyword">next</span> = current.<span class="keyword">next</span></span><br><span class="line">                current.<span class="keyword">next</span> = <span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">                <span class="keyword">next</span>.<span class="keyword">next</span> = prev.<span class="keyword">next</span></span><br><span class="line">                prev.<span class="keyword">next</span> = <span class="keyword">next</span></span><br><span class="line">            prev = current</span><br><span class="line">            current = prev.<span class="keyword">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="keyword">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    ln1 = ListNode(val=<span class="number">1</span>)</span><br><span class="line">    ln2 = ListNode(val=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    ln1.<span class="keyword">next</span> = ln2</span><br><span class="line"></span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.reverseKGroup(ln1,<span class="number">2</span>).val)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第二十五题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。&lt;/p&gt;
&lt;p&gt;k 是一个正整
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.24</title>
    <link href="www.strivezs.com/2021/01/28/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/28/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E9%A2%98/</id>
    <published>2021-01-28T10:04:59.804Z</published>
    <updated>2021-01-28T10:04:59.804Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第二十四题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/0vYhrJ.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：head = [<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">链表中节点的数目在范围 [<span class="number">0</span>, <span class="number">100</span>] 内</span><br><span class="line"><span class="number">0</span> &lt;= Node.val &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>除了本题的办法，同样也可以采用递归的方法进行操作，因此都是相同的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> head.next == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        res = ListNode(<span class="literal">None</span>)</span><br><span class="line">        res = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> head == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> head.next == <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            temp = head.val</span><br><span class="line">            nextNode = head.next</span><br><span class="line">            head.val = nextNode.val</span><br><span class="line">            nextNode.val = temp</span><br><span class="line">            head = head.next.next</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第二十四题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。&lt;/p&gt;
&lt;p&gt;你不能只是单纯的改变
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.23</title>
    <link href="www.strivezs.com/2021/01/28/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/28/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-01-28T10:04:55.951Z</published>
    <updated>2021-01-28T10:04:55.951Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第二十三题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：lists = [[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">6</span>]]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">解释：链表数组如下：</span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>,</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>-&gt;<span class="number">6</span></span><br><span class="line">]</span><br><span class="line">将它们合并到一个有序链表中得到。</span><br><span class="line"><span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：lists = []</span><br><span class="line">输出：[]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：lists = [[]]</span><br><span class="line">输出：[]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">k == lists.length</span><br><span class="line"><span class="number">0</span> &lt;= k &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line"><span class="number">0</span> &lt;= lists[i].length &lt;= <span class="number">500</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= lists[i][j] &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line">lists[i] 按 升序 排列</span><br><span class="line">lists[i].length 的总和不超过 <span class="number">10</span>^<span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>核心思想：采用分而治之的思想，这里合并n个链表，可以两个两个的分开合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 合并两个列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        res = ListNode(<span class="literal">None</span>)</span><br><span class="line">        node = res</span><br><span class="line">        <span class="keyword">if</span> l1 == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> l2 == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                node.next, l1 = l1, l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.next, l2 = l2, l2.next</span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            node.next = l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.next = l2</span><br><span class="line">        <span class="keyword">return</span> res.next</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 合并多个列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(lists) == <span class="number">0</span>:</span><br><span class="line">            res = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">if</span> len(lists) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">        init = lists[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(lists)):</span><br><span class="line">            init = self.mergeTwoLists(init,lists[i])</span><br><span class="line">        <span class="keyword">return</span> init</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第二十三题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给你一个链表数组，每个链表都已经按升序排列。&lt;/p&gt;
&lt;p&gt;请你将所有链表合并到一个升序链表中
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.22</title>
    <link href="www.strivezs.com/2021/01/27/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/27/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E9%A2%98/</id>
    <published>2021-01-27T03:08:36.683Z</published>
    <updated>2021-01-27T03:08:36.683Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第二十二题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><p></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：[<span class="string">"((()))"</span>,<span class="string">"(()())"</span>,<span class="string">"(())()"</span>,<span class="string">"()(())"</span>,<span class="string">"()()()"</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：[<span class="string">"()"</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self,strlist, string, l, r, n)</span>:</span></span><br><span class="line">        <span class="comment"># 单边递归结束条件</span></span><br><span class="line">        <span class="keyword">if</span> l &gt; n <span class="keyword">or</span> r &gt; n <span class="keyword">or</span> r &gt; l:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># string生成结束条件</span></span><br><span class="line">        <span class="keyword">if</span> l == n <span class="keyword">and</span> r == n:</span><br><span class="line">            strlist.append(string)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.func(strlist, string + <span class="string">'('</span>, l+<span class="number">1</span>, r, n)</span><br><span class="line">        self.func(strlist, string + <span class="string">')'</span>, l, r+<span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        strlist = []</span><br><span class="line">        self.func(strlist, <span class="string">""</span>, <span class="number">0</span>, <span class="number">0</span>, n)</span><br><span class="line">        <span class="keyword">return</span> strlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.generateParenthesis(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第二十二题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.21</title>
    <link href="www.strivezs.com/2021/01/25/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/25/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-01-25T11:54:29.881Z</published>
    <updated>2021-01-25T11:54:29.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第二十一题"><a href="#LeetCode第二十一题" class="headerlink" title="LeetCode第二十一题"></a>LeetCode第二十一题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/f64Iep.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>], l2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：l1 = [], l2 = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">两个链表的节点数目范围是 [<span class="number">0</span>, <span class="number">50</span>]</span><br><span class="line"><span class="number">-100</span> &lt;= Node.val &lt;= <span class="number">100</span></span><br><span class="line">l1 和 l2 均按 非递减顺序 排列</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="keyword">self</span>, <span class="symbol">l1:</span> ListNode, <span class="symbol">l2:</span> ListNode)</span></span> -&gt; <span class="symbol">ListNode:</span></span><br><span class="line">        res = ListNode(None)</span><br><span class="line">        node = res</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> <span class="symbol">l2:</span></span><br><span class="line">            <span class="keyword">if</span> l1.val&lt;l2.<span class="symbol">val:</span></span><br><span class="line">                node.<span class="keyword">next</span>,l1 = l1,l1.<span class="keyword">next</span></span><br><span class="line">            <span class="symbol">else:</span></span><br><span class="line">                node.<span class="keyword">next</span>,l2 = l2,l2.<span class="keyword">next</span></span><br><span class="line">            node = node.<span class="keyword">next</span></span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">l1:</span></span><br><span class="line">            node.<span class="keyword">next</span> = l1</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            node.<span class="keyword">next</span> = l2</span><br><span class="line">        <span class="keyword">return</span> res.<span class="keyword">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第二十一题&quot;&gt;&lt;a href=&quot;#LeetCode第二十一题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第二十一题&quot;&gt;&lt;/a&gt;LeetCode第二十一题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.20</title>
    <link href="www.strivezs.com/2021/01/25/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/25/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E9%A2%98/</id>
    <published>2021-01-25T11:52:45.685Z</published>
    <updated>2021-01-25T11:52:45.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第二十题"><a href="#LeetCode第二十题" class="headerlink" title="LeetCode第二十题"></a>LeetCode第二十题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">"()"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">"()[]&#123;&#125;"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">"(]"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">"([)]"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">5</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">"&#123;[]&#125;"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= s.length &lt;= <span class="number">104</span></span><br><span class="line">s 仅由括号 '()[]&#123;&#125;' 组成</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        string = list(s)</span><br><span class="line">        stack = []</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> string:</span><br><span class="line">            <span class="keyword">if</span> s == <span class="string">'('</span> <span class="keyword">or</span> s == <span class="string">'['</span> <span class="keyword">or</span> s == <span class="string">'&#123;'</span>:</span><br><span class="line">                stack.append(s)</span><br><span class="line">            <span class="keyword">elif</span> s == <span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                temp = stack.pop()</span><br><span class="line">                <span class="keyword">if</span> temp != <span class="string">'('</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> s == <span class="string">']'</span>:</span><br><span class="line">                <span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                temp = stack.pop()</span><br><span class="line">                <span class="keyword">if</span> temp != <span class="string">'['</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> s == <span class="string">'&#125;'</span>:</span><br><span class="line">                <span class="keyword">if</span> len(stack) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                temp = stack.pop()</span><br><span class="line">                <span class="keyword">if</span> temp != <span class="string">'&#123;'</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> len(stack) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.isValid(<span class="string">"&#123;&#123;&#123;&#123;"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第二十题&quot;&gt;&lt;a href=&quot;#LeetCode第二十题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第二十题&quot;&gt;&lt;/a&gt;LeetCode第二十题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; cla
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.19</title>
    <link href="www.strivezs.com/2021/01/25/LeetCode%E7%AC%AC%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/25/LeetCode%E7%AC%AC%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-01-25T11:52:41.774Z</published>
    <updated>2021-01-25T11:52:41.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第十九题"><a href="#LeetCode第十九题" class="headerlink" title="LeetCode第十九题"></a>LeetCode第十九题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>进阶：你能尝试使用一趟扫描实现吗？</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/OMbmD5.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：head = [<span class="number">1</span>], n = <span class="number">1</span></span><br><span class="line">输出：[]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>], n = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">链表中结点的数目为 sz</span><br><span class="line"><span class="number">1</span> &lt;= sz &lt;= <span class="number">30</span></span><br><span class="line"><span class="number">0</span> &lt;= Node.val &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= sz</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, val=<span class="number">0</span>, <span class="keyword">next</span>=None)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.val = val</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">next</span> = <span class="keyword">next</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(<span class="keyword">self</span>, head, n)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">            基本思想：由于是寻找从后往前数第n个，因此第一遍先正数n个，然后第二遍再从头开始往后遍历同时第一遍正数的从n开始为空之后，这样第二遍数的就变为到空还有n个</span></span><br><span class="line"><span class="string">            然后在去掉第倒数n个节点就行了。</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        a = head</span><br><span class="line">        b = head</span><br><span class="line">        <span class="comment"># 第一遍数n个</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n)<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">if</span> a.<span class="symbol">next:</span></span><br><span class="line">                a = a.<span class="keyword">next</span></span><br><span class="line">            <span class="symbol">else:</span></span><br><span class="line">                <span class="keyword">return</span> head.<span class="keyword">next</span></span><br><span class="line">        <span class="comment"># 接着数第一遍的同时，第二遍从头开始</span></span><br><span class="line">        <span class="keyword">while</span> a.<span class="symbol">next:</span></span><br><span class="line">            a = a.<span class="keyword">next</span></span><br><span class="line">            b = b.<span class="keyword">next</span></span><br><span class="line">        b.<span class="keyword">next</span> = b.<span class="keyword">next</span>.<span class="keyword">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第十九题&quot;&gt;&lt;a href=&quot;#LeetCode第十九题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第十九题&quot;&gt;&lt;/a&gt;LeetCode第十九题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; cla
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.18</title>
    <link href="www.strivezs.com/2021/01/23/LeetCode%E7%AC%AC%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/23/LeetCode%E7%AC%AC%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-01-23T10:59:43.658Z</published>
    <updated>2021-01-23T10:59:43.658Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第十八题</h1><p>没做出来，首先用暴力肯定是timeout的，对于本体感觉就是在之前题目三数相加的基础上增加了一个外循环，采用双重外循环+双向指针来实现的，双向指针的目的在于将 o(n*n)的时间复杂度转换为o(n)。</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><p>注意：</p><p>答案中不可以包含重复的四元组。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">给定数组 nums = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>]，和 target = <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">-1</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">-2</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a class="header-anchor" href="#解题思路">¶</a>解题思路</h2><p>自己修改之前的三数的代码，总是存在timeout的情况，于是就参考了评论区带佬的代码，增加了剪枝的操作，下面是解析：</p><ul><li>四数之和和三数之和思路类似。</li><li>三数之和是外层循环+内部双指针，四数就是外部两层循环+内部双指针；</li><li>先排序，去重思路还是一样的，外部两层每次判断和前一个数字相同就跳过，内部双指针移动同理判断；</li><li>增加一些剪枝策略，大大提高了执行用时；四处剪枝作用在外部两层循环，首先是在固定了第一个数的位置之后，如果这个数+最后一个数的三倍都还比target小，那么同样可以跳过此轮循环了；如果这个数+其后一个数的三倍比target都大，那么可以退出该层循环了；因为数组都是按升序排列的。</li><li>那么第二层的循环用来固定第二个数的位置时，同样可以用类似的逻辑进行判断，进行剪枝。</li></ul><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class Solution:</span></span><br><span class="line">    <span class="string">def</span> <span class="string">fourSum(self,</span> <span class="string">nums,</span> <span class="string">target):</span></span><br><span class="line">        <span class="string">if</span> <span class="string">len(nums)</span> <span class="string">&lt;</span> <span class="attr">4:</span></span><br><span class="line">            <span class="string">return</span> <span class="string">[]</span></span><br><span class="line">        <span class="string">res</span> <span class="string">=</span> <span class="string">[]</span></span><br><span class="line">        <span class="string">nums</span> <span class="string">=</span> <span class="string">sorted(nums)</span></span><br><span class="line">        <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">range(len(nums)-3):</span></span><br><span class="line">            <span class="comment"># 1) 去重复</span></span><br><span class="line">            <span class="string">if</span> <span class="string">i</span> <span class="string">&gt;</span> <span class="number">0</span> <span class="string">and</span> <span class="string">nums[i]</span> <span class="string">==</span> <span class="string">nums[i</span> <span class="bullet">-</span> <span class="number">1</span><span class="string">]:</span></span><br><span class="line">                <span class="string">continue</span></span><br><span class="line">            <span class="comment"># 2) 剪枝第一处，因为i后面位置的元素是递增排序的。</span></span><br><span class="line">            <span class="string">if</span> <span class="string">nums[i]</span> <span class="string">+</span> <span class="number">3</span><span class="string">*nums[i+1]</span> <span class="string">&gt;</span> <span class="attr">target:</span></span><br><span class="line">                <span class="string">break</span></span><br><span class="line">            <span class="comment"># 3) 剪枝第二处，因为i后面位置的元素是递增排序的。</span></span><br><span class="line">            <span class="string">if</span> <span class="string">nums[i]</span> <span class="string">+</span> <span class="number">3</span><span class="string">*nums[-1]</span> <span class="string">&lt;</span> <span class="attr">target:</span></span><br><span class="line">                <span class="string">continue</span></span><br><span class="line">            <span class="string">for</span> <span class="string">j</span> <span class="string">in</span> <span class="string">range(i</span> <span class="string">+</span> <span class="number">1</span><span class="string">,</span> <span class="string">len(nums)-2):</span></span><br><span class="line">                <span class="comment"># 4) 去重复</span></span><br><span class="line">                <span class="string">if</span> <span class="string">j</span> <span class="string">&gt;</span> <span class="string">i</span> <span class="string">+</span> <span class="number">1</span> <span class="string">and</span> <span class="string">nums[j]</span> <span class="string">==</span> <span class="string">nums[j</span> <span class="bullet">-</span> <span class="number">1</span><span class="string">]:</span></span><br><span class="line">                    <span class="string">continue</span></span><br><span class="line">                <span class="comment"># 5) 剪枝第三处</span></span><br><span class="line">                <span class="string">if</span> <span class="string">nums[i]+nums[j]+2*nums[j+1]</span> <span class="string">&gt;</span> <span class="attr">target:</span></span><br><span class="line">                    <span class="string">break</span></span><br><span class="line">                <span class="comment"># 6) 剪枝第四处</span></span><br><span class="line">                <span class="string">if</span> <span class="string">nums[i]+nums[j]+2*nums[-1]</span> <span class="string">&lt;</span> <span class="attr">target:</span></span><br><span class="line">                    <span class="string">continue</span></span><br><span class="line">                <span class="string">low,</span> <span class="string">high</span> <span class="string">=</span> <span class="string">j</span> <span class="string">+</span> <span class="number">1</span><span class="string">,</span> <span class="string">len(nums)</span> <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">                <span class="string">while</span> <span class="string">low</span> <span class="string">&lt;</span> <span class="attr">high:</span></span><br><span class="line">                    <span class="string">if</span> <span class="string">nums[i]</span> <span class="string">+</span> <span class="string">nums[j]</span> <span class="string">+</span> <span class="string">nums[low]</span> <span class="string">+</span> <span class="string">nums[high]</span> <span class="string">==</span> <span class="attr">target:</span></span><br><span class="line">                        <span class="string">res.append([nums[i],</span> <span class="string">nums[j],</span> <span class="string">nums[low],</span> <span class="string">nums[high]])</span></span><br><span class="line">                        <span class="string">low,</span> <span class="string">high</span> <span class="string">=</span> <span class="string">low</span> <span class="string">+</span> <span class="number">1</span><span class="string">,</span> <span class="string">high</span> <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">                        <span class="comment"># 7) 去重复</span></span><br><span class="line">                        <span class="string">while</span> <span class="string">low</span> <span class="string">&lt;</span> <span class="string">high</span> <span class="string">and</span> <span class="string">nums[low]</span> <span class="string">==</span> <span class="string">nums[low</span> <span class="bullet">-</span> <span class="number">1</span><span class="string">]:</span></span><br><span class="line">                            <span class="string">low</span> <span class="string">+=</span> <span class="number">1</span></span><br><span class="line">                        <span class="comment"># 8) 去重复</span></span><br><span class="line">                        <span class="string">while</span> <span class="string">low</span> <span class="string">&lt;</span> <span class="string">high</span> <span class="string">and</span> <span class="string">nums[high]</span> <span class="string">==</span> <span class="string">nums[high</span> <span class="string">+</span> <span class="number">1</span><span class="string">]:</span></span><br><span class="line">                            <span class="string">high</span> <span class="string">-=</span> <span class="number">1</span></span><br><span class="line">                    <span class="string">if</span> <span class="string">nums[i]</span> <span class="string">+</span> <span class="string">nums[j]</span> <span class="string">+</span> <span class="string">nums[low]</span> <span class="string">+</span> <span class="string">nums[high]</span> <span class="string">&gt;</span> <span class="attr">target:</span></span><br><span class="line">                        <span class="string">high</span> <span class="string">-=</span> <span class="number">1</span></span><br><span class="line">                    <span class="string">if</span> <span class="string">nums[i]</span> <span class="string">+</span> <span class="string">nums[j]</span> <span class="string">+</span> <span class="string">nums[low]</span> <span class="string">+</span> <span class="string">nums[high]</span> <span class="string">&lt;</span> <span class="attr">target:</span></span><br><span class="line">                        <span class="string">low</span> <span class="string">+=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">return</span> <span class="string">res</span></span><br><span class="line"></span><br><span class="line"><span class="string">if</span> <span class="string">__name__</span> <span class="string">==</span> <span class="attr">'__main__':</span></span><br><span class="line">    <span class="string">s</span> <span class="string">=</span> <span class="string">Solution()</span></span><br><span class="line">    <span class="string">print(s.fourSum([1,</span> <span class="number">0</span><span class="string">,</span> <span class="number">-1</span><span class="string">,</span> <span class="number">0</span><span class="string">,</span> <span class="number">-2</span><span class="string">,</span> <span class="number">2</span><span class="string">],0))</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第十八题&lt;/h1&gt;
&lt;p&gt;没做出来，首先用暴力肯定是timeout的，对于本体感觉就是在之前题目三数相加的基础上增加了一个外循环，采用双重外循环+双向指针来实现的，双向指针的目的在于将 o(n*n)的时间复杂度转换为o(n)。&lt;/p&gt;
&lt;h2 id=&quot;题目
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.17</title>
    <link href="www.strivezs.com/2021/01/22/LeetCode%E7%AC%AC%E5%8D%81%E4%B8%83%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/22/LeetCode%E7%AC%AC%E5%8D%81%E4%B8%83%E9%A2%98/</id>
    <published>2021-01-22T13:37:15.696Z</published>
    <updated>2021-01-22T13:37:15.696Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第十七题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/SQXdUG.jpg" alt="figure.1"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入：<span class="string">"23"</span></span><br><span class="line">输出：[<span class="string">"ad"</span>, <span class="string">"ae"</span>, <span class="string">"af"</span>, <span class="string">"bd"</span>, <span class="string">"be"</span>, <span class="string">"bf"</span>, <span class="string">"cd"</span>, <span class="string">"ce"</span>, <span class="string">"cf"</span>].</span><br></pre></td></tr></table></figure><p>说明:<br>尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type digits: str</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> digits == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment"># 字典查表</span></span><br><span class="line">        numList = [<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line">        characterList = [[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],[<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>],[<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>],[<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>],[<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>],[<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>],[<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>],[<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>]]</span><br><span class="line">        temp = zip(numList,characterList)</span><br><span class="line">        dictList = dict(temp)</span><br><span class="line">        <span class="comment">#print(dictList)</span></span><br><span class="line"></span><br><span class="line">        digitsList = list(digits)</span><br><span class="line">        numCharaList = []</span><br><span class="line">        sumRes = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 统计输入的数字对应的字母</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(digitsList)):</span><br><span class="line">            numCharaList.append(dictList[digitsList[i]])</span><br><span class="line">        <span class="comment">#print(numCharaList)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成结果</span></span><br><span class="line">        result = []</span><br><span class="line">        temp = list(itertools.product(*numCharaList))  <span class="comment"># 调用库来生成列表排列组合</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">            str1 = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list(temp[i]))):</span><br><span class="line">                str1 += temp[i][j]</span><br><span class="line">            result.append(str1)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.letterCombinations(<span class="string">'23'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第十七题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。&lt;/p&gt;
&lt;p&gt;给出数字到字母
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.16</title>
    <link href="www.strivezs.com/2021/01/22/LeetCode%E7%AC%AC%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/01/22/LeetCode%E7%AC%AC%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-01-22T13:37:11.248Z</published>
    <updated>2021-01-22T13:37:11.248Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第十六题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-4</span>], target = <span class="number">1</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：与 target 最接近的和是 <span class="number">2</span> (<span class="number">-1</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">2</span>) 。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> &lt;= nums.length &lt;= <span class="number">10</span>^<span class="number">3</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">3</span> &lt;= nums[i] &lt;= <span class="number">10</span>^<span class="number">3</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= target &lt;= <span class="number">10</span>^<span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def threeSumClosest(self, nums, target):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> num<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :<span class="built_in">type</span> targe<span class="variable">t:</span> <span class="keyword">int</span></span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        尝试使用双向指针的方式来进行查找, 要求事先结果进行排序</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        nums.<span class="keyword">sort</span>()</span><br><span class="line">        closeNum = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">l</span> = i + <span class="number">1</span></span><br><span class="line">            r = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">l</span> &lt; r:</span><br><span class="line">                s = nums[i] + nums[<span class="keyword">l</span>] + nums[r]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(s - target) &lt; <span class="built_in">abs</span>(closeNum - target):</span><br><span class="line">                    closeNum = s</span><br><span class="line">                elif s &gt; targe<span class="variable">t:</span></span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                elif s &lt; targe<span class="variable">t:</span></span><br><span class="line">                    <span class="keyword">l</span> += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> target</span><br><span class="line">        <span class="keyword">return</span> closeNum</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.threeSumClosest([-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">4</span>], <span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第十六题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
</feed>
