<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StriveZs的博客</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.strivezs.com/"/>
  <updated>2021-02-21T04:39:40.453Z</updated>
  <id>www.strivezs.com/</id>
  
  <author>
    <name>StriveZs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode No.43</title>
    <link href="www.strivezs.com/2021/02/21/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/21/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-02-21T04:39:40.453Z</published>
    <updated>2021-02-21T04:39:40.453Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十三题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">num1</span> = <span class="string">"2"</span>, <span class="attr">num2</span> = <span class="string">"3"</span></span><br><span class="line">输出: <span class="string">"6"</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">num1</span> = <span class="string">"123"</span>, <span class="attr">num2</span> = <span class="string">"456"</span></span><br><span class="line">输出: <span class="string">"56088"</span></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">num1 和 num2 的长度小于<span class="number">110</span>。</span><br><span class="line">num1 和 num2 只包含数字 <span class="number">0</span>-<span class="number">9</span>。</span><br><span class="line">num1 和 num2 均不以零开头，除非是数字 <span class="number">0</span> 本身。</span><br><span class="line">不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>本题是经典的大数乘法.</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class <span class="type">Solution</span>(<span class="keyword">object</span>):</span><br><span class="line">    def multiply(self, num1, num2):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type num1: str</span></span><br><span class="line"><span class="string">        :type num2: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        核心思想：经典的大数乘法</span></span><br><span class="line"><span class="string">                核心就是循环 每次分别计算进位和计算余位，注意整数和字符串的转换</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num1_reverse = num1[::-<span class="number">1</span>]</span><br><span class="line">        num2_reverse = num2[::-<span class="number">1</span>]</span><br><span class="line">        <span class="literal">result</span> = [str(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len(num1_reverse)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len(num2_reverse)):</span><br><span class="line">                temp = <span class="built_in">int</span>(num1_reverse[i]) * <span class="built_in">int</span>(num2_reverse[j])</span><br><span class="line">                <span class="comment"># 计算进位</span></span><br><span class="line">                <span class="literal">result</span>[i+j+<span class="number">1</span>] = str(<span class="built_in">int</span>(<span class="literal">result</span>[i+j+<span class="number">1</span>]) + <span class="built_in">int</span>((<span class="built_in">int</span>(<span class="literal">result</span>[i+j]) + temp) / <span class="number">10</span>))</span><br><span class="line">                <span class="comment"># 计算余位</span></span><br><span class="line">                <span class="literal">result</span>[i+j] = str((<span class="built_in">int</span>(<span class="literal">result</span>[i+j]) + temp) % <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="literal">result</span> = <span class="literal">result</span>[::-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#print(result)</span></span><br><span class="line">        str_res = <span class="string">""</span></span><br><span class="line">        flag = <span class="type">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len(<span class="literal">result</span>)):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="keyword">if</span> <span class="literal">result</span>[i] != '<span class="number">0</span>':</span><br><span class="line">                    flag = <span class="type">False</span></span><br><span class="line">                    str_res += <span class="literal">result</span>[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                str_res += <span class="literal">result</span>[i]</span><br><span class="line">        <span class="comment"># 单独处理为0的情况</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span></span><br><span class="line">        <span class="keyword">return</span> str_res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    s = <span class="type">Solution</span>()</span><br><span class="line">    print(s.multiply('<span class="number">123</span>','<span class="number">456</span>'))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十三题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.42</title>
    <link href="www.strivezs.com/2021/02/18/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/18/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%8C%E9%A2%98/</id>
    <published>2021-02-18T05:40:16.401Z</published>
    <updated>2021-02-18T05:40:16.401Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十二题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p></p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入：height = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：上面是由数组 [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] 表示的高度图，在这种情况下，可以接 <span class="number">6</span> 个单位的雨水（蓝色部分表示雨水）。 </span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：height = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">9</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">n == height.length</span><br><span class="line"><span class="number">0</span> &lt;= n &lt;= <span class="number">3</span> * <span class="number">104</span></span><br><span class="line"><span class="number">0</span> &lt;= height[i] &lt;= <span class="number">105</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                遍历找到最高点</span></span><br><span class="line"><span class="string">                1. 从左往右到最高点，依次比较，如果左边的数大于右边的数，则表示能存到水</span></span><br><span class="line"><span class="string">                2. 从右往左到最高点，依次比较，如果右边的数大于左边的数，则表示能存到水</span></span><br><span class="line"><span class="string">                3. 大数则作为临时最大值，如果再有一个数大于大则更新临时最大数，临时最大数减去比他小的(左侧/右侧)数，则为能存的水数目</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> height == []:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        heightPoint = max(height) <span class="comment"># 最高点</span></span><br><span class="line">        heightIndex = height.index(heightPoint) <span class="comment"># 最高点的下标</span></span><br><span class="line">        length = len(height) <span class="comment"># 列表长度</span></span><br><span class="line">        <span class="comment"># 先处理左边的</span></span><br><span class="line">        leftVolum = <span class="number">0</span></span><br><span class="line">        leftmax = height[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,heightIndex):</span><br><span class="line">            temp = height[i]</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt;= leftmax:</span><br><span class="line">                leftVolum += (leftmax - height[i])</span><br><span class="line">            <span class="keyword">elif</span> height[i] &gt; leftmax:</span><br><span class="line">                leftmax = height[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 然后处理右边的</span></span><br><span class="line">        rightVolum = <span class="number">0</span></span><br><span class="line">        rightmax = height[length<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,length - heightIndex):</span><br><span class="line">            temp1 = height[length - i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> height[length-i<span class="number">-1</span>] &lt;= rightmax:</span><br><span class="line">                rightVolum += (rightmax - height[length-i<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">elif</span> height[length-i<span class="number">-1</span>] &gt; rightmax:</span><br><span class="line">                rightmax = height[length-i<span class="number">-1</span>]</span><br><span class="line">        <span class="comment">#print(leftVolum)</span></span><br><span class="line">        <span class="comment">#print(rightVolum)</span></span><br><span class="line">        <span class="keyword">return</span> leftVolum + rightVolum</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.trap(height = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十二题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.41</title>
    <link href="www.strivezs.com/2021/02/18/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/18/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-02-18T05:40:13.146Z</published>
    <updated>2021-02-18T05:40:13.146Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十一题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。</p><p>进阶：你可以实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案吗？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= nums.length &lt;= <span class="number">300</span></span><br><span class="line"><span class="number">-231</span> &lt;= nums[i] &lt;= <span class="number">231</span> - <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstMissingPositive</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                对列表进行遍历，然后对大于等于0的正整数创建字典, 没出现的正整数键值对应的为1</span></span><br><span class="line"><span class="string">                然后从1开始访问字典，如果当前键值不存在则为没有出现的最小的正整数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = []</span><br><span class="line">        maxNum = <span class="number">-1</span> <span class="comment"># 最大值正整数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                temp.append(nums[i])</span><br><span class="line">                <span class="keyword">if</span> nums[i] &gt; maxNum:</span><br><span class="line">                    maxNum = nums[i]</span><br><span class="line">        <span class="comment"># 解决 最大正整数过大的情况</span></span><br><span class="line">        <span class="keyword">if</span> maxNum &gt;= len(temp):</span><br><span class="line">            maxNum = len(temp)</span><br><span class="line">        <span class="comment"># 解决无正整数的情况</span></span><br><span class="line">        <span class="keyword">if</span> temp == []:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        keyList = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(maxNum+<span class="number">2</span>)]  <span class="comment"># 键值列表</span></span><br><span class="line">        valueList = []  <span class="comment"># 键值对应值的列表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(maxNum+<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">                valueList.append(<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                valueList.append(i)</span><br><span class="line"></span><br><span class="line">        numsDict = dict(zip(keyList,valueList)) <span class="comment"># 对应的字典</span></span><br><span class="line">        <span class="comment">#print(numsDict)</span></span><br><span class="line">        index = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,maxNum+<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> numsDict[i] == <span class="number">-1</span>:</span><br><span class="line">                index = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.firstMissingPositive(nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">2147483647</span>,<span class="number">9</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十一题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。&lt;/p&gt;
&lt;p&gt;进阶
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.40</title>
    <link href="www.strivezs.com/2021/02/14/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/14/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E9%A2%98/</id>
    <published>2021-02-14T12:09:55.019Z</published>
    <updated>2021-02-14T12:09:55.019Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</span><br><span class="line"></span><br><span class="line">candidates 中的每个数字在每个组合中只能使用一次。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">所有数字（包括目标数）都是正整数。</span><br><span class="line">解集不能包含重复的组合。 </span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: candidates = [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>], target = <span class="number">8</span>,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>]</span><br><span class="line">]</span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: candidates = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">5</span>,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>同样是回溯法，只是额外添加了需要确认是否重复使用该数。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def combinationSum2(self, candidates, target):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> candidate<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :<span class="built_in">type</span> targe<span class="variable">t:</span> <span class="keyword">int</span></span><br><span class="line">        :rtype: List[List[<span class="keyword">int</span>]]</span><br><span class="line">        核心思想：</span><br><span class="line">                分析题目同样可以看出我们应该使用回溯法进行求解</span><br><span class="line">                去重的关键在于，若当前循环中的i等<span class="keyword">l</span>则跳过</span><br><span class="line">        回溯法的标准框架</span><br><span class="line">        def backtrack(path, selected):</span><br><span class="line">            <span class="keyword">if</span> 满足停止条件：</span><br><span class="line">                <span class="keyword">res</span>.<span class="keyword">append</span>(path)</span><br><span class="line">            <span class="keyword">for</span> 选择 in 选择列表：</span><br><span class="line">                做出选择</span><br><span class="line">                递归执行backtrack</span><br><span class="line">                    满足则<span class="keyword">return</span> True</span><br><span class="line">                如果不满足要求就撤销选择</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        candidates.<span class="keyword">sort</span>()</span><br><span class="line">        result = []</span><br><span class="line">        temp = candidates[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        def backtrack(target, candidates, temp, result, path, start):</span><br><span class="line">            <span class="keyword">for</span> i in <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> candidates[i] == temp:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.<span class="keyword">append</span>(candidates[i])</span><br><span class="line">                <span class="keyword">if</span> sum(path) &lt; targe<span class="variable">t:</span></span><br><span class="line">                    backtrack(target, candidates, temp, result, path, i + <span class="number">1</span>)</span><br><span class="line">                elif sum(path) == targe<span class="variable">t:</span></span><br><span class="line">                    result.<span class="keyword">append</span>(path[:])</span><br><span class="line">                    path.<span class="keyword">pop</span>()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path.<span class="keyword">pop</span>()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                temp = path.<span class="keyword">pop</span>()</span><br><span class="line">        backtrack(target, candidates, temp, result, [], <span class="number">0</span>)</span><br><span class="line">        # <span class="keyword">print</span>(result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.combinationSum2(candidates = [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>], target = <span class="number">8</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.39</title>
    <link href="www.strivezs.com/2021/02/14/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/14/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-02-14T11:33:24.900Z</published>
    <updated>2021-02-14T11:33:24.900Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十九题</h1><p>好几天没写了，正过年休息了两天，今天把之前的补回来，新年快乐，牛年大吉奥。</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。 <br>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>], target = <span class="number">7</span>,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">7</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：candidates = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>], target = <span class="number">8</span>,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= candidates.length &lt;= <span class="number">30</span></span><br><span class="line"><span class="number">1</span> &lt;= candidates[i] &lt;= <span class="number">200</span></span><br><span class="line">candidate 中的每个元素都是独一无二的。</span><br><span class="line"><span class="number">1</span> &lt;= target &lt;= <span class="number">500</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><h3 id="自己写的版本"><a class="header-anchor" href="#自己写的版本">¶</a>自己写的版本</h3><p>这一版我自己写的利用回溯法，本地测试用例都AC了，但是在提交的时候显示我[1],2这一测试用例输出的结果为[]，但是我在本机测试的结果却是正确的。</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/FD2nfl.png" alt="figure.1"></p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/zVWnkh.png" alt="figure.2"></p><p>没想明白裂开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    sort_result = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(self, target, candidates, temp)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> sum(temp) == target:</span><br><span class="line">            result.append(temp)</span><br><span class="line">            self.sort_result.append(sorted(temp))</span><br><span class="line">            <span class="comment">#print(temp)</span></span><br><span class="line">            <span class="keyword">return</span> self.backtrack(target,candidates,[]),result</span><br><span class="line">        <span class="keyword">if</span> target &lt; sum(temp):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(candidates)):</span><br><span class="line">            temp.append(candidates[i])</span><br><span class="line">            <span class="keyword">if</span> sorted(temp) <span class="keyword">in</span> self.sort_result:</span><br><span class="line">                temp.pop()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> self.backtrack(target,candidates,temp):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            temp.pop()</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                分析题目同样可以看出我们应该使用回溯法进行求解</span></span><br><span class="line"><span class="string">        回溯法的标准框架</span></span><br><span class="line"><span class="string">        def backtrack(path, selected):</span></span><br><span class="line"><span class="string">            if 满足停止条件：</span></span><br><span class="line"><span class="string">                res.append(path)</span></span><br><span class="line"><span class="string">            for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                做出选择</span></span><br><span class="line"><span class="string">                递归执行backtrack</span></span><br><span class="line"><span class="string">                    满足则return True</span></span><br><span class="line"><span class="string">                如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">global</span> result</span><br><span class="line">        result = []</span><br><span class="line">        self.backtrack(target,candidates,[])</span><br><span class="line">        <span class="comment">#print(result)</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.combinationSum(candidates = [<span class="number">1</span>], target = <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="AC的版本"><a class="header-anchor" href="#AC的版本">¶</a>AC的版本</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def combinationSum(self, candidate<span class="variable">s:</span> List[<span class="keyword">int</span>], targe<span class="variable">t:</span> <span class="keyword">int</span>) -&gt; List[List[<span class="keyword">int</span>]]:</span><br><span class="line">        candidates.<span class="keyword">sort</span>()</span><br><span class="line">        n = <span class="built_in">len</span>(candidates)</span><br><span class="line">        <span class="keyword">res</span> = []</span><br><span class="line">        def backtrack(i, tmp_sum, tmp):</span><br><span class="line">            <span class="keyword">if</span>  tmp_sum &gt; target <span class="built_in">or</span> i == n:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> tmp_sum == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">res</span>.<span class="keyword">append</span>(tmp)</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(i, n):</span><br><span class="line">                <span class="keyword">if</span> tmp_sum + candidates[<span class="keyword">j</span>] &gt; targe<span class="variable">t:</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                backtrack(<span class="keyword">j</span>,tmp_sum + candidates[<span class="keyword">j</span>],tmp+[candidates[<span class="keyword">j</span>]])</span><br><span class="line">        backtrack(<span class="number">0</span>, <span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">res</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十九题&lt;/h1&gt;
&lt;p&gt;好几天没写了，正过年休息了两天，今天把之前的补回来，新年快乐，牛年大吉奥。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.38</title>
    <link href="www.strivezs.com/2021/02/11/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/11/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-02-11T02:32:33.603Z</published>
    <updated>2021-02-11T02:32:33.603Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十八题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个正整数 n ，输出外观数列的第 n 项。</p><p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p><p>你可以将其视作是由递归公式定义的数字字符串序列：</p><p>countAndSay(1) = “1”<br>countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。<br>前五项如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>     <span class="number">1</span></span><br><span class="line"><span class="number">2.</span>     <span class="number">11</span></span><br><span class="line"><span class="number">3.</span>     <span class="number">21</span></span><br><span class="line"><span class="number">4.</span>     <span class="number">1211</span></span><br><span class="line"><span class="number">5.</span>     <span class="number">111221</span></span><br><span class="line">第一项是数字 <span class="number">1</span> </span><br><span class="line">描述前一项，这个数是 <span class="number">1</span> 即 “ 一 个 <span class="number">1</span> ”，记作 <span class="string">"11"</span></span><br><span class="line">描述前一项，这个数是 <span class="number">11</span> 即 “ 二 个 <span class="number">1</span> ” ，记作 <span class="string">"21"</span></span><br><span class="line">描述前一项，这个数是 <span class="number">21</span> 即 “ 一 个 <span class="number">2</span> + 一 个 <span class="number">1</span> ” ，记作 <span class="string">"1211"</span></span><br><span class="line">描述前一项，这个数是 <span class="number">1211</span> 即 “ 一 个 <span class="number">1</span> + 一 个 <span class="number">2</span> + 二 个 <span class="number">1</span> ” ，记作 <span class="string">"111221"</span></span><br></pre></td></tr></table></figure><p>要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</p><p>例如，数字字符串 “3322251” 的描述如下图：</p><p><img src="https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg" alt="figure.1"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="string">"1"</span></span><br><span class="line">解释：这是一个基本样例。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：<span class="string">"1211"</span></span><br><span class="line">解释：</span><br><span class="line">countAndSay(<span class="number">1</span>) = <span class="string">"1"</span></span><br><span class="line">countAndSay(<span class="number">2</span>) = 读 <span class="string">"1"</span> = 一 个 <span class="number">1</span> = <span class="string">"11"</span></span><br><span class="line">countAndSay(<span class="number">3</span>) = 读 <span class="string">"11"</span> = 二 个 <span class="number">1</span> = <span class="string">"21"</span></span><br><span class="line">countAndSay(<span class="number">4</span>) = 读 <span class="string">"21"</span> = 一 个 <span class="number">2</span> + 一 个 <span class="number">1</span> = <span class="string">"12"</span> + <span class="string">"11"</span> = <span class="string">"1211"</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        核心思想: 迭代思想，就是从头往后依次找到n相等的那种情况返回（重点是读懂题目）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> str(<span class="number">1</span>)</span><br><span class="line">        s = <span class="string">"1"</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            t = <span class="string">""</span></span><br><span class="line">            i, j = <span class="number">0</span>, len(s)</span><br><span class="line">            count = <span class="number">1</span> <span class="comment"># 统计相同个数</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">if</span> s[i] == s[i+<span class="number">1</span>]:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 重新统计</span></span><br><span class="line">                    t = t + str(count) + s[i]</span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">            s = t + str(count) + s[i]</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.countAndSay(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十八题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个正整数 n ，输出外观数列的第 n 项。&lt;/p&gt;
&lt;p&gt;「外观数列」是一个整数序列，从
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.37</title>
    <link href="www.strivezs.com/2021/02/11/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%83%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/11/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%83%E9%A2%98/</id>
    <published>2021-02-11T02:32:28.838Z</published>
    <updated>2021-02-11T02:32:28.838Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十七题</h1><p>今天三十了，新年快乐哈。</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>编写一个程序，通过填充空格来解决数独问题。</p><p>一个数独的解法需遵循如下规则：</p><p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。<br>空白格用 ‘.’ 表示。</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="figure.1"></p><p>一个数独。</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt="figure.2"></p><p>答案被标成红色。</p><p>提示：</p><p>给定的数独序列只包含数字 1-9 和字符 ‘.’ 。<br>你可以假设给定的数独只有唯一解。<br>给定数独永远是 9x9 形式的。</p><h2 id="回撤法"><a class="header-anchor" href="#回撤法">¶</a>回撤法</h2><p>回撤法标准框架:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(path, selected)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> 满足停止条件：</span><br><span class="line">        res.append(path)</span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表：</span><br><span class="line">        做出选择</span><br><span class="line">        递归执行backtrack</span><br><span class="line">            满足则<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        如果不满足要求就撤销选择</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 检查选择要填充的数字是否在一行/一列/九个格子里面出现</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self, board, row, col, c)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> board[row][i] == c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> board[i][col] == c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> board[(row//<span class="number">3</span>)*<span class="number">3</span> + i // <span class="number">3</span>][(col//<span class="number">3</span>)*<span class="number">3</span> + i % <span class="number">3</span>] == c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 回溯法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(self,board,i,j)</span>:</span></span><br><span class="line">        <span class="comment"># 停止条件</span></span><br><span class="line">        <span class="comment">## 一行访问完之后跳转到下一行</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">return</span> self.backtrack(board,i+<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="comment">## 所有行访问完之后，返回True</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment">## 如果不为.，则不用管,继续访问下一列</span></span><br><span class="line">        <span class="keyword">if</span> board[i][j] != <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.backtrack(board,i,j+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选择操作</span></span><br><span class="line">        <span class="comment">## 遍历选择列表，此处的选择是，给空白处填 "1" - "9" 中之一</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">            c = str(k)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.check(board, i, j, c):  <span class="comment"># 判断选择的字符是否满足要求（不与其他位置冲突）</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            board[i][j] = c  <span class="comment"># 做出选择</span></span><br><span class="line">            <span class="keyword">if</span> self.backtrack(board, i, j + <span class="number">1</span>):  <span class="comment"># 递归调用，直接return是因为只需要一个可行解，而不需要所有可行解</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            board[i][j] = <span class="string">'.'</span>  <span class="comment"># 撤销选择</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveSudoku</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        核心思想：采用回溯法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        回溯法的标准框架</span></span><br><span class="line"><span class="string">        def backtrack(path, selected):</span></span><br><span class="line"><span class="string">            if 满足停止条件：</span></span><br><span class="line"><span class="string">                res.append(path)</span></span><br><span class="line"><span class="string">            for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                做出选择</span></span><br><span class="line"><span class="string">                递归执行backtrack</span></span><br><span class="line"><span class="string">                    满足则return True</span></span><br><span class="line"><span class="string">                如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.backtrack(board,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.solveSudoku([[<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],[<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"5"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],[<span class="string">"."</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>],[<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"3"</span>],[<span class="string">"4"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>],[<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>],[<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"."</span>],[<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"4"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"5"</span>],[<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"9"</span>]]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十七题&lt;/h1&gt;
&lt;p&gt;今天三十了，新年快乐哈。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;编写一个程序，通过填充空格来解决数独问题。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.36</title>
    <link href="www.strivezs.com/2021/02/09/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/09/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-02-09T02:15:49.481Z</published>
    <updated>2021-02-09T02:15:49.481Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十六题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。</p><p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="figure.2"></p><p>上图是一个部分填充的有效的数独。</p><p>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">[<span class="meta"></span></span><br><span class="line"><span class="meta">  [<span class="meta-string">"5"</span>,<span class="meta-string">"3"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"7"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"1"</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"5"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"3"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"4"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"3"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"1"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"7"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"2"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"2"</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"4"</span>,<span class="meta-string">"1"</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"5"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"7"</span>,<span class="meta-string">"9"</span></span>]</span><br><span class="line">]</span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">[<span class="meta"></span></span><br><span class="line"><span class="meta">  [<span class="meta-string">"8"</span>,<span class="meta-string">"3"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"7"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"1"</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"5"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"3"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"4"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"3"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"1"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"7"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"2"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"2"</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"4"</span>,<span class="meta-string">"1"</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"5"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"7"</span>,<span class="meta-string">"9"</span></span>]</span><br><span class="line">]</span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line">解释: 除了第一行的第一个数字从 <span class="number">5</span> 改为 <span class="number">8</span> 以外，空格内其他数字均与 示例<span class="number">1</span> 相同。</span><br><span class="line">     但由于位于左上角的 <span class="number">3</span>x3 宫内有两个 <span class="number">8</span> 存在, 因此这个数独是无效的。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">一个有效的数独（部分已被填充）不一定是可解的。</span><br><span class="line">只需要根据以上规则，验证已经填入的数字是否有效即可。</span><br><span class="line">给定数独序列只包含数字 <span class="number">1</span><span class="number">-9</span> 和字符 <span class="string">'.'</span> 。</span><br><span class="line">给定数独永远是 <span class="number">9</span>x9 形式的。</span><br></pre></td></tr></table></figure><h2 id="思维导图"><a class="header-anchor" href="#思维导图">¶</a>思维导图</h2><p><img src="https://gitee.com/zyp521/upload_image/raw/master/%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC.png" alt="figure.1"></p><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                实际就是一个大模拟</span></span><br><span class="line"><span class="string">                分别进行如下判断如果有不满足的情况则结束判断，最坏时间复杂度情况就是判断全部情况</span></span><br><span class="line"><span class="string">                1. 判断每行</span></span><br><span class="line"><span class="string">                2. 判断每列</span></span><br><span class="line"><span class="string">                3. 判断每个格子</span></span><br><span class="line"><span class="string">                针对每行每列可以采用去掉所有"."然后set判断长度是否一致</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nums = list(str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">        <span class="comment"># dictList = dict(zip(nums,[0 for i in range(10)]))</span></span><br><span class="line">        <span class="comment"># print(dictList)</span></span><br><span class="line">        <span class="comment"># 判断每行</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            dictList = dict(zip(nums,[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">'.'</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dictList[board[i][j]] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> dictList[board[i][j]] &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断每列</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            dictList = dict(zip(nums,[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[j][i] == <span class="string">'.'</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dictList[board[j][i]] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> dictList[board[j][i]] &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断每个格子</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            dictList = dict(zip(nums, [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">            remainder = i % <span class="number">3</span> <span class="comment"># 余数</span></span><br><span class="line">            consult = int(i / <span class="number">3</span>) <span class="comment"># 商</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">if</span> board[j+consult*<span class="number">3</span>][k+remainder*<span class="number">3</span>] == <span class="string">'.'</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    dictList[board[j+consult*<span class="number">3</span>][k+remainder*<span class="number">3</span>]] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> dictList[board[j+consult*<span class="number">3</span>][k+remainder*<span class="number">3</span>]] &gt;= <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.isValidSudoku([</span><br><span class="line">  [<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"5"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"3"</span>],</span><br><span class="line">  [<span class="string">"4"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>],</span><br><span class="line">  [<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"4"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"5"</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"5"</span>]</span><br><span class="line">]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十六题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.35</title>
    <link href="www.strivezs.com/2021/02/07/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%94%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/07/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%94%E9%A2%98/</id>
    <published>2021-02-07T05:30:46.713Z</published>
    <updated>2021-02-07T05:30:46.713Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十五题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">5</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">2</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">7</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">示例 <span class="number">4</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">0</span></span><br><span class="line">输出: <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="思维导图"><a class="header-anchor" href="#思维导图">¶</a>思维导图</h2><p><img src="https://gitee.com/zyp521/upload_image/raw/master/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.png" alt="figure.1"></p><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    # 二分查找索引值</span><br><span class="line">    def binarySearch(self,nums,<span class="keyword">l</span>,r,target):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">l</span> &lt; r:</span><br><span class="line">            mid = <span class="keyword">int</span>((r+<span class="keyword">l</span>)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums,mid+<span class="number">1</span>,r,target)</span><br><span class="line">            elif nums[mid] &gt; targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums,<span class="keyword">l</span>,mid-<span class="number">1</span>,target)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        elif r == <span class="variable">l:</span></span><br><span class="line">            <span class="keyword">if</span> nums[r] == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">l</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">l</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">l</span></span><br><span class="line"></span><br><span class="line">    def searchInsert(self, nums, target):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> num<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :<span class="built_in">type</span> targe<span class="variable">t:</span> <span class="keyword">int</span></span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        核心思想:</span><br><span class="line">            使用二分法查找目标值，如果找到则返回索引值，如果没找到，则返回和它最接近数值的坐标（小于它的）</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="built_in">index</span> = self.binarySearch(nums,<span class="number">0</span>,<span class="built_in">len</span>(nums)-<span class="number">1</span>,target)</span><br><span class="line">        <span class="keyword">if</span> nums[<span class="built_in">index</span>] == targe<span class="variable">t:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">index</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">index</span> &gt;= <span class="keyword">int</span>(<span class="number">0</span>+<span class="built_in">len</span>(nums)-<span class="number">1</span>)/<span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> target &gt; nums[<span class="built_in">len</span>(nums)-<span class="number">1</span>]:</span><br><span class="line">                    <span class="built_in">index</span> = <span class="built_in">len</span>(nums)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[<span class="built_in">index</span>] &gt; targe<span class="variable">t:</span></span><br><span class="line">                    pass</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">index</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.searchInsert([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>],<span class="number">10</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十五题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>MAC+Anaconda+Scrapy安装以及简单使用</title>
    <link href="www.strivezs.com/2021/02/07/MAC+Anaconda+Scrapy%E5%AE%89%E8%A3%85.md/"/>
    <id>www.strivezs.com/2021/02/07/MAC+Anaconda+Scrapy%E5%AE%89%E8%A3%85.md/</id>
    <published>2021-02-07T04:48:15.944Z</published>
    <updated>2021-02-07T04:48:15.944Z</updated>
    
    <content type="html"><![CDATA[<h1>MAC+Anaconda+Scrapy安装</h1><h2 id="Scarpy"><a class="header-anchor" href="#Scarpy">¶</a>Scarpy</h2><p>Scrapy由 Python 编写的爬虫框架。如果你刚接触并且好奇这门语言的特性以及Scrapy的详情， 对于已经熟悉其他语言并且想快速学习Python的编程老手， 我们推荐 Learn Python The Hard Way ， 对于想从Python开始学习的编程新手， <a href="http://wiki.python.org/moin/BeginnersGuide/NonProgrammers">非程序员的Python学习资料列表</a>。</p><h2 id="创建新的虚拟环境"><a class="header-anchor" href="#创建新的虚拟环境">¶</a>创建新的虚拟环境</h2><p>首先在Anaconda上使用如下命令创建新的虚拟环境。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建环境:</span><br><span class="line">conda <span class="keyword">create</span> -n env<span class="string">'name python==python版本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">激活环境:</span></span><br><span class="line"><span class="string">conda actiavte env'</span><span class="type">name</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a class="header-anchor" href="#安装">¶</a>安装</h2><p>在终端输入如下命令进行安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> scrapy</span><br></pre></td></tr></table></figure><h2 id="入门"><a class="header-anchor" href="#入门">¶</a>入门</h2><p>思维导图:</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/Scrapy%E5%85%A5%E9%97%A8.png" alt="figure.1"></p><h3 id="创建项目"><a class="header-anchor" href="#创建项目">¶</a>创建项目</h3><p>使用如下命令创建一个Scrapy项目，其中tutorial为项目名称（事先使用命令行进入你想要创建项目的目录下）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scarpy startproject tutorial</span></span><br></pre></td></tr></table></figure><p>创建的项目结构为:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tutorial/</span><br><span class="line">    scrapy.cfg</span><br><span class="line">    tutorial/</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py</span><br><span class="line">        pipelines.py</span><br><span class="line">        settings.py</span><br><span class="line">        spiders/</span><br><span class="line">            __init__.py</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>这些文件分别是:</p><ul><li>scrapy.cfg: 项目的配置文件</li><li>tutorial/: 该项目的python模块。之后您将在此加入代码。</li><li>tutorial/items.py: 项目中的item文件.</li><li>tutorial/pipelines.py: 项目中的pipelines文件.</li><li>tutorial/settings.py: 项目的设置文件.</li><li>tutorial/spiders/: 放置spider代码的目录</li></ul><h3 id="定义Item"><a class="header-anchor" href="#定义Item">¶</a>定义Item</h3><p>这里的Item是用来存储爬虫爬取到的数据的容器，它的使用方法和python的字典机制十分相似，并且它提供了额外的保护机制来避免拼写错误导致的未定义名称报错。</p><p>类似Java/C++中的类继承机制一样，你可以编写一个scrapy.item类，该类继承scrapy.Item，通过定义一个类型为 <strong>scrapy.Field</strong> 的类属性来定义一个Item。</p><p>在创建这个Item之前，我们需要对需要爬取的数据进行建模，在完成建模之后，在Item中定义响应的字段，即编写tutorial目录中的items.py文件：</p><p>例子(这里以爬取百度图片):</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">DmozItem</span>(<span class="title">scrapy</span>.<span class="type">Item</span>):</span></span><br><span class="line"><span class="class">    title = scrapy.<span class="type">Field</span>()</span></span><br><span class="line"><span class="class">    link = scrapy.<span class="type">Field</span>()</span></span><br><span class="line"><span class="class">    desc = scrapy.<span class="type">Field</span>()</span></span><br></pre></td></tr></table></figure><h3 id="编写爬虫例子"><a class="header-anchor" href="#编写爬虫例子">¶</a>编写爬虫例子</h3><p>Spider(爬虫)是用户编写用于从单个网站或者一些网站爬取数据的类。</p><p>其中包含了一个用于下载的初始URL，如何跟进网页中的连接以及如何分析页面中的内容，提取生成item的方法。</p><p>为了创建一个Spider，您必须继承 scrapy.Spider 类， 且定义以下三个属性:</p><ul><li>name: 用于区别Spider。 该名字必须是唯一的，不可以为不同的Spider设定相同的名字。</li><li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li><li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li></ul><p>Spider示例:创建一个spider文件放在tutorial/spiders文件目录下，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        filename = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zyp521/upload_image/raw/master/Rz97TH.png" alt="figure.2"></p><p>刚才发生的过程为：Scrapy为Spider的 start_urls 属性中的每个URL创建了 scrapy.Request 对象，并将 parse 方法作为回调函数(callback)赋值给了Request。</p><p>Request对象经过调度，执行生成 scrapy.http.Response 对象并送回给spider parse() 方法。</p><h4 id="提取数据"><a class="header-anchor" href="#提取数据">¶</a>提取数据</h4><p>Scrapy提取数据有自己的一套机制。它们被称作选择器(seletors)，因为他们通过特定的 XPath 或者 CSS 表达式来“选择” HTML文件中的某个部分。有关selectors的使用暂时先跳过，放在后面进行学习。<br>先使用如下代码进行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">'//ul/li'</span>):</span><br><span class="line">            title = sel.xpath(<span class="string">'a/text()'</span>).extract()</span><br><span class="line">            link = sel.xpath(<span class="string">'a/@href'</span>).extract()</span><br><span class="line">            desc = sel.xpath(<span class="string">'text()'</span>).extract()</span><br><span class="line">            print(title, link, desc)</span><br></pre></td></tr></table></figure><h4 id="使用Item存储提取的数据"><a class="header-anchor" href="#使用Item存储提取的数据">¶</a>使用Item存储提取的数据</h4><p>Item对象是我们在Item.py文件中创建的类，我们通过创建一个/多个对象来存储我们提取得到的数据，通过字典的方式来访问每个属性，然后对每个属性进行赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapyProject.items <span class="keyword">import</span> ScrapyprojectItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">'//ul/li'</span>):</span><br><span class="line">            item = ScrapyprojectItem()</span><br><span class="line">            item[<span class="string">'title'</span>] = sel.xpath(<span class="string">'a/text()'</span>).extract()</span><br><span class="line">            item[<span class="string">'link'</span>] = sel.xpath(<span class="string">'a/@href'</span>).extract()</span><br><span class="line">            item[<span class="string">'desc'</span>] = sel.xpath(<span class="string">'text()'</span>).extract()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h3 id="保存爬取到的数据"><a class="header-anchor" href="#保存爬取到的数据">¶</a>保存爬取到的数据</h3><p>最简单存储爬取的数据的方式是使用 Feed exports:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scrapy</span> <span class="selector-tag">crawl</span> <span class="selector-tag">dmoz</span> <span class="selector-tag">-o</span> <span class="selector-tag">items</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure><p>该命令将采用 JSON 格式对爬取的数据进行序列化，生成 items.json 文件。</p><p>在类似本篇教程里这样小规模的项目中，这种存储方式已经足够。 如果需要对爬取到的item做更多更为复杂的操作，您可以编写 Item Pipeline 。 类似于我们在创建项目时对Item做的，用于您编写自己的 tutorial/pipelines.py 也被创建。 不过如果您仅仅想要保存item，您不需要实现任何的pipeline。</p><h3 id="问题记录"><a class="header-anchor" href="#问题记录">¶</a>问题记录</h3><ol><li>报错：ModuleNotFoundError: No module named ‘protego’<br>使用conda 安装protego包即可解决。</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> protego</span><br></pre></td></tr></table></figure><ol start="2"><li>失败说明<br>由于链接我尝试自己访问了一下发现无法访问了，应该是国外网站（墙的问题），暂时还没学xpath相关的知识，因此打算在之后尝试一下国内的网站使用。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;MAC+Anaconda+Scrapy安装&lt;/h1&gt;
&lt;h2 id=&quot;Scarpy&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Scarpy&quot;&gt;¶&lt;/a&gt;Scarpy&lt;/h2&gt;
&lt;p&gt;Scrapy由 Python 编写的爬虫框架。如果你刚接触并且好奇
      
    
    </summary>
    
    
      <category term="MAC" scheme="www.strivezs.com/categories/MAC/"/>
    
      <category term="Anaconda" scheme="www.strivezs.com/categories/MAC/Anaconda/"/>
    
      <category term="Scrapy" scheme="www.strivezs.com/categories/MAC/Anaconda/Scrapy/"/>
    
    
      <category term="Anaconda" scheme="www.strivezs.com/tags/Anaconda/"/>
    
      <category term="Python" scheme="www.strivezs.com/tags/Python/"/>
    
      <category term="MAC" scheme="www.strivezs.com/tags/MAC/"/>
    
      <category term="Scrapy" scheme="www.strivezs.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>JAVA学前知识储备</title>
    <link href="www.strivezs.com/2021/02/06/JAVA%E5%AD%A6%E5%89%8D%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    <id>www.strivezs.com/2021/02/06/JAVA%E5%AD%A6%E5%89%8D%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</id>
    <published>2021-02-06T09:12:09.194Z</published>
    <updated>2021-02-06T09:12:09.194Z</updated>
    
    <content type="html"><![CDATA[<h1>JAVA学前知识储备</h1><h2 id="JAVA的三大版本"><a class="header-anchor" href="#JAVA的三大版本">¶</a>JAVA的三大版本</h2><ul><li>JAVASE是用于桌面端的开发</li><li>JAVAME适用于嵌入式小型设备的开发</li><li>JAVAEE是WEB端的开发</li></ul><h2 id="JDK-JRE-JVM"><a class="header-anchor" href="#JDK-JRE-JVM">¶</a>JDK JRE JVM</h2><p>用一张图来说明：</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=485650522,435650293&amp;fm=11&amp;gp=0.jpg" alt="figure.1"></p><ul><li>JDK: Java Development Kit 开发者工具</li><li>JRE: Java Runtime Enviroment 运行时环境</li><li>JVM: Java Virtual Machine 虚拟机</li></ul><h2 id="Hello-World"><a class="header-anchor" href="#Hello-World">¶</a>Hello World</h2><p>新建一个文件，来编写hello world代码，注意文件名的后缀是.java结尾，而且文件名和类名要一样(区分大小写)。</p><p>代码:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span> [] args)</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">print</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/PY0gco.png" alt="figure.2"></p><h2 id="JAVA运行机制"><a class="header-anchor" href="#JAVA运行机制">¶</a>JAVA运行机制</h2><ul><li>编译型</li><li>解释型</li></ul><h2 id="设置IDEA背景图"><a class="header-anchor" href="#设置IDEA背景图">¶</a>设置IDEA背景图</h2><ol><li>设置里面搜索 Set Background Image  ，右键点击第一个，给设置背景的方法添加个快捷键 随便设置一个 不常用的（ctrl alt 0）</li></ol><p><img src="https://gitee.com/zyp521/upload_image/raw/master/gJ12if.png" alt="figure.3"></p><ol start="2"><li>点击OK之后 按下你设置的快捷键 来选择你心仪的图片~~  其中的Opacity滚动条是用来调节透明度的~</li></ol><p><img src="https://gitee.com/zyp521/upload_image/raw/master/JjstyW.png" alt="figure.4"></p><p>效果:</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/VtCq3O.png" alt="figure.5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;JAVA学前知识储备&lt;/h1&gt;
&lt;h2 id=&quot;JAVA的三大版本&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#JAVA的三大版本&quot;&gt;¶&lt;/a&gt;JAVA的三大版本&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JAVASE是用于桌面端的开发&lt;/li&gt;
&lt;li&gt;JAVA
      
    
    </summary>
    
    
      <category term="JAVA" scheme="www.strivezs.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="www.strivezs.com/tags/JAVA/"/>
    
      <category term="知识点" scheme="www.strivezs.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法</title>
    <link href="www.strivezs.com/2021/02/06/MarkDown%E8%AF%AD%E6%B3%95/"/>
    <id>www.strivezs.com/2021/02/06/MarkDown%E8%AF%AD%E6%B3%95/</id>
    <published>2021-02-06T07:45:27.986Z</published>
    <updated>2021-02-06T07:45:27.986Z</updated>
    
    <content type="html"><![CDATA[<h1>MarkDown语法</h1><h2 id="标题"><a class="header-anchor" href="#标题">¶</a>标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题：# 标题名</span><br><span class="line">二级标题：## 标题名</span><br><span class="line">三级标题：### 标题名</span><br><span class="line">最多到六级</span><br></pre></td></tr></table></figure><h2 id="字体"><a class="header-anchor" href="#字体">¶</a>字体</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">粗体：*<span class="strong">*文字*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">斜体：*</span>文字<span class="strong">*</span></span><br><span class="line"><span class="strong">删除线：~~文字~~</span></span><br></pre></td></tr></table></figure><h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">空格 文字</span></span><br></pre></td></tr></table></figure><blockquote><p>引用<br>示例</p></blockquote><h2 id="分割线"><a class="header-anchor" href="#分割线">¶</a>分割线</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">--- </span>用来表示分割线</span><br><span class="line"><span class="bullet">*** </span>也用来表示分割线</span><br></pre></td></tr></table></figure><hr><h2 id="图片"><a class="header-anchor" href="#图片">¶</a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">图片地址-本地图片/网络图片</span>)</span><br></pre></td></tr></table></figure><h2 id="超链接"><a class="header-anchor" href="#超链接">¶</a>超链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">超链接</span>](<span class="link">地址</span>)</span><br></pre></td></tr></table></figure><h2 id="列表"><a class="header-anchor" href="#列表">¶</a>列表</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">有序列表:</span><br><span class="line">    <span class="number">1.</span></span><br><span class="line">    <span class="number">2.</span></span><br><span class="line">    <span class="number">3.</span></span><br><span class="line"></span><br><span class="line">无序列表:</span><br><span class="line">    -</span><br><span class="line">    -</span><br><span class="line">    -</span><br></pre></td></tr></table></figure><h2 id="表格"><a class="header-anchor" href="#表格">¶</a>表格</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">名字|<span class="string">性别</span>|<span class="string">生日</span></span><br><span class="line"><span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|</span><br><span class="line">张三|<span class="string">男</span>|1997</span><br></pre></td></tr></table></figure><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>1997</td></tr><tr><td>张三</td><td>男</td><td>1997</td></tr></tbody></table><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三个点<span class="symbol">:```</span> code</span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;MarkDown语法&lt;/h1&gt;
&lt;h2 id=&quot;标题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#标题&quot;&gt;¶&lt;/a&gt;标题&lt;/h2&gt;
&lt;figure class=&quot;highlight clean&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="MarkDown" scheme="www.strivezs.com/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="www.strivezs.com/tags/MarkDown/"/>
    
      <category term="语法" scheme="www.strivezs.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.34</title>
    <link href="www.strivezs.com/2021/02/06/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/06/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E9%A2%98/</id>
    <published>2021-02-06T03:27:40.070Z</published>
    <updated>2021-02-06T03:27:40.070Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十四题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>进阶：</p><p>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>], target = <span class="number">8</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [], target = <span class="number">0</span></span><br><span class="line">输出：[<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= nums.length &lt;= <span class="number">105</span></span><br><span class="line"><span class="number">-109</span> &lt;= nums[i] &lt;= <span class="number">109</span></span><br><span class="line">nums 是一个非递减数组</span><br><span class="line"><span class="number">-109</span> &lt;= target &lt;= <span class="number">109</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 二分查找边界坐标 如果没有则返回[-1,-1]</span></span><br><span class="line">    <span class="comment"># 查找左侧边界</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leftbinarySearch</span><span class="params">(self,nums,l,r,target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> nums[l] == target:</span><br><span class="line">            <span class="keyword">if</span> l == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> nums[l<span class="number">-1</span>] != target:</span><br><span class="line">                <span class="keyword">return</span> l</span><br><span class="line">            <span class="keyword">elif</span> nums[l<span class="number">-1</span>] == target:</span><br><span class="line">                <span class="keyword">return</span> self.leftbinarySearch(nums, l<span class="number">-1</span>, r, target)</span><br><span class="line">        <span class="keyword">elif</span> r &gt; l:</span><br><span class="line">            mid = int((r+l)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">                <span class="keyword">return</span> self.leftbinarySearch(nums, l, mid<span class="number">-1</span>,target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                <span class="keyword">return</span> self.leftbinarySearch(nums, mid+<span class="number">1</span>, r, target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> self.leftbinarySearch(nums, mid, r, target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找右侧边界</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightbinarySearch</span><span class="params">(self,nums,l,r,target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> nums[r] == target:</span><br><span class="line">            <span class="keyword">if</span> r == len(nums)<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> len(nums)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[r + <span class="number">1</span>] != target:</span><br><span class="line">                <span class="keyword">return</span> r</span><br><span class="line">            <span class="keyword">elif</span> nums[r + <span class="number">1</span>] == target:</span><br><span class="line">                <span class="keyword">return</span> self.rightbinarySearch(nums, l, r+<span class="number">1</span>, target)</span><br><span class="line">        <span class="keyword">elif</span> r &gt; l:</span><br><span class="line">            mid = int((r + l) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">                <span class="keyword">return</span> self.rightbinarySearch(nums, l, mid - <span class="number">1</span>, target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                <span class="keyword">return</span> self.rightbinarySearch(nums, mid + <span class="number">1</span>, r, target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> self.rightbinarySearch(nums, l, mid, target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">            由于给定的数组是一个非递减数组，因IC同样可以使用33的中的二分法来查找到target的左右边界index</span></span><br><span class="line"><span class="string">        例子：</span></span><br><span class="line"><span class="string">            [5,7,7,8,8,8,10], target = 8</span></span><br><span class="line"><span class="string">            左右边界点分别为3、5</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">        a = self.leftbinarySearch(nums,<span class="number">0</span>,len(nums)<span class="number">-1</span>,target)</span><br><span class="line">        b = self.rightbinarySearch(nums,<span class="number">0</span>,len(nums)<span class="number">-1</span>,target)</span><br><span class="line">        boundarylist = []</span><br><span class="line">        boundarylist.append(a)</span><br><span class="line">        boundarylist.append(b)</span><br><span class="line">        <span class="keyword">return</span> boundarylist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.searchRange([<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>],<span class="number">8</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十四题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.33</title>
    <link href="www.strivezs.com/2021/02/06/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/06/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-02-06T02:34:44.187Z</published>
    <updated>2021-02-06T02:34:44.187Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十三题</h1><p>昨天这题没写完，无限火力太好玩了 md，今天又花了一个小时写完了。太菜了</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>升序排列的整数数组 nums 在预先未知的某个点上进行了旋转（例如， [0,1,2,4,5,6,7] 经旋转后可能变为 [4,5,6,7,0,1,2] ）。</p><p>请你在数组中搜索 target ，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">0</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">3</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>], target = <span class="number">0</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">5000</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= nums[i] &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line">nums 中的每个值都 独一无二</span><br><span class="line">nums 肯定会在某个点上旋转</span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= target &lt;= <span class="number">10</span>^<span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>给我写吐血了，写了两个小时，我太菜了，连二分查找都快忘了。最终还是AC了 害 辛苦没白费。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    # 递归寻找旋转点  二分法</span><br><span class="line">    def searchMidPoint(self,nums,<span class="keyword">l</span>,r):</span><br><span class="line">        <span class="keyword">if</span> r &lt;= <span class="keyword">l</span>+<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">l</span>+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = <span class="keyword">int</span>((r+<span class="keyword">l</span>)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; nums[<span class="built_in">len</span>(nums)-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> self.searchMidPoint(nums, <span class="keyword">l</span>, mid)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.searchMidPoint(nums, mid, r)</span><br><span class="line"></span><br><span class="line">    # 二分法寻找目标值</span><br><span class="line">    def binarySearch(self,nums, <span class="keyword">l</span>, r, target):</span><br><span class="line">        <span class="keyword">if</span> r &gt; <span class="variable">l:</span></span><br><span class="line">            mid = <span class="keyword">int</span>((r+<span class="keyword">l</span>)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            elif nums[mid] &gt; targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums, <span class="keyword">l</span>, mid - <span class="number">1</span>, target)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums, mid + <span class="number">1</span>, r, target)</span><br><span class="line">        elif r == <span class="variable">l:</span></span><br><span class="line">            <span class="keyword">if</span> nums[r] == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> r</span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    def <span class="built_in">search</span>(self, nums, target):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> num<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :<span class="built_in">type</span> targe<span class="variable">t:</span> <span class="keyword">int</span></span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        旋转数组：</span><br><span class="line">                输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] 和 <span class="keyword">k</span> = <span class="number">3</span></span><br><span class="line">                输出: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">                解释:</span><br><span class="line">                向右旋转 <span class="number">1</span> 步: [<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">                向右旋转 <span class="number">2</span> 步: [<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">                向右旋转 <span class="number">3</span> 步: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">        核心思想：采用二分搜索法</span><br><span class="line">                对于num来说，如果它的最后侧的数比中间数大则中间数右侧的序列是有序的，而左侧则是无序的</span><br><span class="line">                然后以此来找左侧的数组中的中间数同样进行判断，采用递归的方法来寻找到旋转点</span><br><span class="line">                找到旋转点后就可以将原数组划分为两个序列，分别对两个序列进行二分查找从而找到对应的下标</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        # 特殊处理 nums 长度为<span class="number">1</span>或<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>] == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">2</span> <span class="built_in">and</span> nums[<span class="number">1</span>] == targe<span class="variable">t:</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        # 创建字典来对应对下标</span><br><span class="line">        # <span class="built_in">index</span> = <span class="keyword">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(nums)))</span><br><span class="line">        # indexlist = dict(zip(nums,<span class="built_in">index</span>))</span><br><span class="line">        # <span class="keyword">print</span>(indexlist)</span><br><span class="line">        # 寻找旋转点</span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">0</span>] &lt; nums[<span class="built_in">len</span>(nums)-<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">index</span> = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">index</span> = self.searchMidPoint(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)  # 旋转点</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">index</span> += <span class="number">1</span></span><br><span class="line">        #print(<span class="built_in">index</span>)</span><br><span class="line">        # 找到旋转点之后就可以将原数组划分为两个有序数组</span><br><span class="line">        leftlist = nums[<span class="number">0</span>:<span class="built_in">index</span>]</span><br><span class="line">        rightlist = nums[<span class="built_in">index</span>:<span class="built_in">len</span>(nums)]</span><br><span class="line">        <span class="keyword">print</span>(leftlist)</span><br><span class="line">        <span class="keyword">print</span>(rightlist)</span><br><span class="line">        # 如果target大于leftlist则在nums中则位于leftlist，反之如果targe小于leftlist大于rightlist则在rightlist中</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(rightlist) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> target &lt; leftlist[<span class="number">0</span>] <span class="built_in">and</span> target &gt; leftlist[<span class="built_in">len</span>(leftlist)-<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tarIndex = self.binarySearch(leftlist, <span class="number">0</span>, <span class="built_in">len</span>(leftlist) - <span class="number">1</span>, target)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">index</span> - <span class="built_in">len</span>(leftlist) + tarIndex</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> target &gt;= leftlist[<span class="number">0</span>] <span class="built_in">and</span> target &lt;= leftlist[<span class="built_in">len</span>(leftlist) - <span class="number">1</span>]:</span><br><span class="line">                tarIndex = self.binarySearch(leftlist, <span class="number">0</span>, <span class="built_in">len</span>(leftlist) - <span class="number">1</span>, target)</span><br><span class="line">                <span class="keyword">if</span> tarIndex == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">index</span> - <span class="built_in">len</span>(leftlist) + tarIndex</span><br><span class="line">            elif target &gt;= rightlist[<span class="number">0</span>] <span class="built_in">and</span> target &lt;= rightlist[<span class="built_in">len</span>(rightlist) - <span class="number">1</span>]:</span><br><span class="line">                tarIndex = self.binarySearch(rightlist, <span class="number">0</span>, <span class="built_in">len</span>(rightlist) - <span class="number">1</span>, target)</span><br><span class="line">                <span class="keyword">if</span> tarIndex == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> tarIndex + <span class="built_in">index</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.<span class="built_in">search</span>(nums = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十三题&lt;/h1&gt;
&lt;p&gt;昨天这题没写完，无限火力太好玩了 md，今天又花了一个小时写完了。太菜了&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;升序排
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.32</title>
    <link href="www.strivezs.com/2021/02/04/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/04/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E9%A2%98/</id>
    <published>2021-02-04T10:49:32.290Z</published>
    <updated>2021-02-04T10:49:32.290Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十二题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个只包含 ‘(’ 和 ‘)’ 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><p></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"(()"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：最长有效括号子串是 <span class="string">"()"</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">")()())"</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长有效括号子串是 <span class="string">"()()"</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">""</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= s.length &lt;= <span class="number">3</span> * <span class="number">104</span></span><br><span class="line">s[i] 为 '(' 或 ')'</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def longestValidParentheses(self, s):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        核心思想：使用动态规划求解问题</span><br><span class="line">                碰到<span class="string">")"</span> 为基础长度为<span class="number">2</span></span><br><span class="line">                内部连在一起的的长度为<span class="keyword">dp</span>[i-<span class="number">1</span>]</span><br><span class="line">                外部连在一起的长度为<span class="keyword">dp</span>[i-<span class="keyword">dp</span>[i-<span class="number">1</span>]-<span class="number">2</span>]</span><br><span class="line">                状态转移方程为：<span class="number">2</span> + <span class="keyword">dp</span>[i-<span class="number">1</span>] + <span class="keyword">dp</span>[i-<span class="keyword">dp</span>[i-<span class="number">1</span>]-<span class="number">2</span>]</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        length = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">dp</span> = [<span class="number">0</span>] * length</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line">        # 当遇到右括号时，尝试向前匹配左括号</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">pre</span> = i - <span class="keyword">dp</span>[i-<span class="number">1</span>] -<span class="number">1</span></span><br><span class="line">                # 如果是左括号，则更新匹配长度</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">pre</span> &gt;= <span class="number">0</span> <span class="built_in">and</span> s[<span class="keyword">pre</span>] == <span class="string">'('</span>:</span><br><span class="line">                    <span class="keyword">dp</span>[i] = <span class="keyword">dp</span>[i-<span class="number">1</span>] + <span class="number">2</span></span><br><span class="line">                    # 处理独立的括号对的情形 类似()()、()(())</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">pre</span> &gt; <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">dp</span>[i] += <span class="keyword">dp</span>[<span class="keyword">pre</span>-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="keyword">dp</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.longestValidParentheses(s = <span class="string">"()(())))"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十二题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给你一个只包含 ‘(’ 和 ‘)’ 的字符串，找出最长有效（格式正确且连续）括号子串的长度。&lt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.31</title>
    <link href="www.strivezs.com/2021/02/03/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/03/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-02-03T10:44:59.391Z</published>
    <updated>2021-02-03T10:44:59.391Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十一题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须 原地 修改，只允许使用额外常数空间。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">0</span> &lt;= nums[i] &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        length = len(nums) <span class="comment"># 总长度</span></span><br><span class="line">        index_a = length - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 从后往前找</span></span><br><span class="line">        <span class="keyword">while</span> index_a &gt;= <span class="number">0</span>:</span><br><span class="line">            index_b = length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> index_b &gt; index_a :</span><br><span class="line">                <span class="comment"># 如果大于则交换位置并对前面查找的内容进行排序</span></span><br><span class="line">                <span class="keyword">if</span> nums[index_b] &gt; nums[index_a]:</span><br><span class="line">                    temp = nums[index_a]</span><br><span class="line">                    nums[index_a] = nums[index_b]</span><br><span class="line">                    nums[index_b] = temp</span><br><span class="line">                    tt = nums[index_a + <span class="number">1</span>:len(nums)]</span><br><span class="line">                    tt.sort()</span><br><span class="line">                    nums[index_a+<span class="number">1</span>:len(nums)] = tt</span><br><span class="line">                    <span class="keyword">return</span> nums</span><br><span class="line">                index_b -= <span class="number">1</span></span><br><span class="line">            index_a -= <span class="number">1</span></span><br><span class="line">        nums.reverse()</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.nextPermutation(nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十一题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。&lt;/p
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>Python—itertools库使用</title>
    <link href="www.strivezs.com/2021/02/02/Python%E2%80%94itertools%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    <id>www.strivezs.com/2021/02/02/Python%E2%80%94itertools%E5%BA%93%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-02T10:02:42.991Z</published>
    <updated>2021-02-02T10:02:42.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python—itertools库使用"><a href="#Python—itertools库使用" class="headerlink" title="Python—itertools库使用"></a>Python—itertools库使用</h1><h2 id="itertools-product"><a href="#itertools-product" class="headerlink" title="itertools.product()"></a>itertools.product()</h2><p>重复使用words 3次进行元素间的组合，总共是3×3×3=27中情况。  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"word"</span>, <span class="string">"good"</span>, <span class="string">"best"</span>]</span><br><span class="line"><span class="builtin-name">print</span>(list(itertools.product(words, <span class="attribute">repeat</span>=3)))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[(<span class="string">'word'</span>, <span class="string">'word'</span>, <span class="string">'word'</span>), (<span class="string">'word'</span>, <span class="string">'word'</span>, <span class="string">'good'</span>), (<span class="string">'word'</span>, <span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'word'</span>), (<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'good'</span>),</span><br><span class="line">(<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>, <span class="string">'word'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>, <span class="string">'good'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>, <span class="string">'best'</span>), (<span class="string">'good'</span>, <span class="string">'word'</span>, <span class="string">'word'</span>),</span><br><span class="line">(<span class="string">'good'</span>, <span class="string">'word'</span>, <span class="string">'good'</span>), (<span class="string">'good'</span>, <span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'good'</span>, <span class="string">'good'</span>, <span class="string">'word'</span>), (<span class="string">'good'</span>, <span class="string">'good'</span>, <span class="string">'good'</span>), (<span class="string">'good'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>),</span><br><span class="line">(<span class="string">'good'</span>, <span class="string">'best'</span>, <span class="string">'word'</span>), (<span class="string">'good'</span>, <span class="string">'best'</span>, <span class="string">'good'</span>), (<span class="string">'good'</span>, <span class="string">'best'</span>, <span class="string">'best'</span>), (<span class="string">'best'</span>, <span class="string">'word'</span>, <span class="string">'word'</span>), (<span class="string">'best'</span>, <span class="string">'word'</span>, <span class="string">'good'</span>),</span><br><span class="line">(<span class="string">'best'</span>, <span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'best'</span>, <span class="string">'good'</span>, <span class="string">'word'</span>), (<span class="string">'best'</span>, <span class="string">'good'</span>, <span class="string">'good'</span>), (<span class="string">'best'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>), (<span class="string">'best'</span>, <span class="string">'best'</span>, <span class="string">'word'</span>),</span><br><span class="line">(<span class="string">'best'</span>, <span class="string">'best'</span>, <span class="string">'good'</span>), (<span class="string">'best'</span>, <span class="string">'best'</span>, <span class="string">'best'</span>)]</span><br></pre></td></tr></table></figure><h2 id="itertools-combinations"><a href="#itertools-combinations" class="headerlink" title="itertools.combinations()"></a>itertools.combinations()</h2><p>内部有序自己组合，要求长度小于列表自身长度。  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"word"</span>, <span class="string">"good"</span>, <span class="string">"best"</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list(itertools.combinations(words, <span class="number">3</span>)</span></span>))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[(<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>)]</span><br><span class="line"></span><br><span class="line">words = [<span class="string">"word"</span>, <span class="string">"good"</span>, <span class="string">"best"</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list(itertools.combinations(words, <span class="number">2</span>)</span></span>))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[(<span class="string">'word'</span>, <span class="string">'good'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'good'</span>, <span class="string">'best'</span>)]</span><br></pre></td></tr></table></figure><h2 id="itertools-permutations"><a href="#itertools-permutations" class="headerlink" title="itertools.permutations()"></a>itertools.permutations()</h2><p>内部无序自组合</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"word"</span>, <span class="string">"good"</span>, <span class="string">"best"</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">list</span>(itertools.permutations(words, <span class="number">3</span>))) <span class="comment"># 3为列表长度</span></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[(<span class="string">'word'</span>, <span class="string">'good'</span>, <span class="string">'best'</span>), (<span class="string">'word'</span>, <span class="string">'best'</span>, <span class="string">'good'</span>), (<span class="string">'good'</span>, <span class="string">'word'</span>, <span class="string">'best'</span>), (<span class="string">'good'</span>, <span class="string">'best'</span>, <span class="string">'word'</span>), (<span class="string">'best'</span>, <span class="string">'word'</span>, <span class="string">'good'</span>), (<span class="string">'best'</span>, <span class="string">'good'</span>, <span class="string">'word'</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python—itertools库使用&quot;&gt;&lt;a href=&quot;#Python—itertools库使用&quot; class=&quot;headerlink&quot; title=&quot;Python—itertools库使用&quot;&gt;&lt;/a&gt;Python—itertools库使用&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="Python" scheme="www.strivezs.com/categories/Python/"/>
    
    
      <category term="Python" scheme="www.strivezs.com/tags/Python/"/>
    
      <category term="itertools" scheme="www.strivezs.com/tags/itertools/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.30</title>
    <link href="www.strivezs.com/2021/02/02/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/02/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E9%A2%98/</id>
    <published>2021-02-02T10:01:47.261Z</published>
    <updated>2021-02-02T10:01:47.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第三十题"><a href="#LeetCode第三十题" class="headerlink" title="LeetCode第三十题"></a>LeetCode第三十题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。</p><p>注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">  s = <span class="string">"barfoothefoobarman"</span>,</span><br><span class="line">  words = [<span class="string">"foo"</span>,<span class="string">"bar"</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line">解释：</span><br><span class="line">从索引 <span class="number">0</span> 和 <span class="number">9</span> 开始的子串分别是 <span class="string">"barfoo"</span> 和 <span class="string">"foobar"</span> 。</span><br><span class="line">输出的顺序不重要, [<span class="number">9</span>,<span class="number">0</span>] 也是有效答案。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">  s = <span class="string">"wordgoodgoodgoodbestword"</span>,</span><br><span class="line">  words = [<span class="string">"word"</span>,<span class="string">"good"</span>,<span class="string">"best"</span>,<span class="string">"word"</span>]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="超时版本"><a href="#超时版本" class="headerlink" title="超时版本"></a>超时版本</h3><p>采用最传统的办法直接超时了，裂开。  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">class Solution(object):</span><br><span class="line">    def findSubstring(self, s, words):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :<span class="built_in">type</span> word<span class="variable">s:</span> List[str]</span><br><span class="line">        :rtype: List[<span class="keyword">int</span>]</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        wordList = <span class="keyword">list</span>(itertools.permutations(words, <span class="built_in">len</span>(words))) # 调用库来生成列表排列组合</span><br><span class="line">        stringList = []</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(wordList)):</span><br><span class="line">            temp = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="built_in">len</span>(words)):</span><br><span class="line">                temp += wordList[i][<span class="keyword">j</span>]</span><br><span class="line">            <span class="keyword">if</span> temp not in stringLis<span class="variable">t:</span></span><br><span class="line">                stringList.<span class="keyword">append</span>(temp)</span><br><span class="line">        indexlist = []</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="built_in">len</span>(stringList)):</span><br><span class="line">                <span class="keyword">if</span> i + <span class="built_in">len</span>(stringList[<span class="keyword">j</span>]) &lt;= <span class="built_in">len</span>(s):</span><br><span class="line">                    <span class="keyword">if</span> s[i:i + <span class="built_in">len</span>(stringList[<span class="keyword">j</span>])] == stringList[<span class="keyword">j</span>]:</span><br><span class="line">                        indexlist.<span class="keyword">append</span>(i)</span><br><span class="line">        <span class="keyword">return</span> indexlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.findSubstring(s = <span class="string">"barfoothefoobarman"</span>,</span><br><span class="line">  words = [<span class="string">"foo"</span>,<span class="string">"bar"</span>]))</span><br></pre></td></tr></table></figure><h3 id="AC版本"><a href="#AC版本" class="headerlink" title="AC版本"></a>AC版本</h3><p>纯手撸，一个小时搞定，头大。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def findSubstring(self, s, words):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :<span class="built_in">type</span> word<span class="variable">s:</span> List[str]</span><br><span class="line">        :rtype: List[<span class="keyword">int</span>]</span><br><span class="line">        核心思想：</span><br><span class="line">                ① 先统计words中每个单词的词频、words中单词的个数和一个单词的长度</span><br><span class="line">                ② 然后从头开始遍历s，统计（单词数×单词长度）的长度内单词出现的次数</span><br><span class="line">                ③ 如果在当前坐标下统计到的单词次数和words中单词词频相同则表示相同并记录<span class="built_in">index</span></span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        # 统计words词频</span><br><span class="line">        wordsnum = <span class="built_in">len</span>(<span class="keyword">list</span>(<span class="keyword">set</span>(words)))</span><br><span class="line">        zerolist = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(wordsnum)]</span><br><span class="line">        wordsdicts = dict(zip(<span class="keyword">list</span>(<span class="keyword">set</span>(words)), zerolist))</span><br><span class="line">        <span class="keyword">for</span> i in word<span class="variable">s:</span></span><br><span class="line">            wordsdicts[i] += <span class="number">1</span></span><br><span class="line">        # <span class="keyword">print</span>(wordsdicts)</span><br><span class="line">        # 记录<span class="built_in">string</span>词频</span><br><span class="line">        zerolist = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(wordsnum)]</span><br><span class="line">        strdicts = dict(zip(<span class="keyword">list</span>(<span class="keyword">set</span>(words)),zerolist))</span><br><span class="line">        # 组合后的长度</span><br><span class="line">        wordnum = <span class="built_in">len</span>(words)</span><br><span class="line">        wordlength = <span class="built_in">len</span>(words[<span class="number">0</span>])</span><br><span class="line">        sumlength = wordnum * wordlength</span><br><span class="line">        # <span class="keyword">print</span>(strdicts)</span><br><span class="line">        # 下标存储<span class="keyword">list</span></span><br><span class="line">        indexlist = []</span><br><span class="line"></span><br><span class="line">        # 统计<span class="built_in">string</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            # 更新词频</span><br><span class="line">            zerolist = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(wordsnum)]</span><br><span class="line">            strdicts = dict(zip(<span class="keyword">list</span>(<span class="keyword">set</span>(words)), zerolist))</span><br><span class="line">            flag = True</span><br><span class="line">            <span class="keyword">if</span> i + sumlength &gt; <span class="built_in">len</span>(s):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t = i</span><br><span class="line">                <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(wordnum):</span><br><span class="line">                    <span class="keyword">if</span> s[<span class="variable">t:t</span>+wordlength] in word<span class="variable">s:</span></span><br><span class="line">                        strdicts[s[<span class="variable">t:t</span>+wordlength]] += <span class="number">1</span></span><br><span class="line">                        t += wordlength</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        flag = False</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> fla<span class="variable">g:</span></span><br><span class="line">                    flags = True</span><br><span class="line">                    <span class="keyword">for</span> <span class="keyword">k</span>,v in strdicts.<span class="built_in">items</span>():</span><br><span class="line">                        <span class="keyword">if</span> wordsdicts[<span class="keyword">k</span>] != <span class="variable">v:</span></span><br><span class="line">                            flags = False</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag<span class="variable">s:</span></span><br><span class="line">                        indexlist.<span class="keyword">append</span>(i)</span><br><span class="line">        <span class="keyword">return</span> indexlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.findSubstring(s = <span class="string">"barfoothefoobarman"</span>,</span><br><span class="line">  words = [<span class="string">"foo"</span>,<span class="string">"bar"</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第三十题&quot;&gt;&lt;a href=&quot;#LeetCode第三十题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第三十题&quot;&gt;&lt;/a&gt;LeetCode第三十题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; cla
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.29</title>
    <link href="www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-02-01T05:18:14.831Z</published>
    <updated>2021-02-01T05:18:14.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第二十九题"><a href="#LeetCode第二十九题" class="headerlink" title="LeetCode第二十九题"></a>LeetCode第二十九题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。</p><p>返回被除数 dividend 除以除数 divisor 得到的商。</p><p>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: dividend = <span class="number">10</span>, divisor = <span class="number">3</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: <span class="number">10</span>/<span class="number">3</span> = truncate(<span class="number">3.33333</span>..) = truncate(<span class="number">3</span>) = <span class="number">3</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: dividend = <span class="number">7</span>, divisor = <span class="number">-3</span></span><br><span class="line">输出: <span class="number">-2</span></span><br><span class="line">解释: <span class="number">7</span>/<span class="number">-3</span> = truncate(<span class="number">-2.33333</span>..) = <span class="number">-2</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">被除数和除数均为 <span class="number">32</span> 位有符号整数。</span><br><span class="line">除数不为 <span class="number">0</span>。</span><br><span class="line">假设我们的环境只能存储 <span class="number">32</span> 位有符号整数，其数值范围是 [−<span class="number">231</span>,  <span class="number">231</span> − <span class="number">1</span>]。本题中，如果除法结果溢出，则返回 <span class="number">231</span> − <span class="number">1</span>。</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(self, dividend, divisor)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type dividend: int</span></span><br><span class="line"><span class="string">        :type divisor: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i, a, b = <span class="number">0</span>, abs(dividend), abs(divisor)</span><br><span class="line">        <span class="comment"># 被除数小于除数的情况直接返回0</span></span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">or</span> a &lt; b:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> b &lt;= a:</span><br><span class="line">            b = b &lt;&lt; <span class="number">1</span>  <span class="comment"># 位运算 位左移1位</span></span><br><span class="line">            i = i + <span class="number">1</span>  <span class="comment"># i为2幂</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)) + self.divide(a - (b &gt;&gt; <span class="number">1</span>), abs(divisor)) <span class="comment"># 用减法来得到商</span></span><br><span class="line">            <span class="keyword">if</span> (dividend ^ divisor) &lt; <span class="number">0</span>: <span class="comment"># 负结果判断</span></span><br><span class="line">                res = -res</span><br><span class="line">            <span class="keyword">return</span> min(res, (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>) <span class="comment"># 去掉溢出情况</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第二十九题&quot;&gt;&lt;a href=&quot;#LeetCode第二十九题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第二十九题&quot;&gt;&lt;/a&gt;LeetCode第二十九题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.28</title>
    <link href="www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/01/LeetCode%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-02-01T05:15:53.958Z</published>
    <updated>2021-02-01T05:15:53.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第二十八题"><a href="#LeetCode第二十八题" class="headerlink" title="LeetCode第二十八题"></a>LeetCode第二十八题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现 strStr() 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"hello"</span>, <span class="attr">needle</span> = <span class="string">"ll"</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">haystack</span> = <span class="string">"aaaaa"</span>, <span class="attr">needle</span> = <span class="string">"bba"</span></span><br><span class="line">输出: -<span class="number">1</span></span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</span><br><span class="line"></span><br><span class="line">对于本题而言，当 needle 是空字符串时我们应当返回 <span class="number">0</span> 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type haystack: str</span></span><br><span class="line"><span class="string">        :type needle: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> haystack == <span class="string">""</span> <span class="keyword">and</span> needle == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        index = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(haystack)):</span><br><span class="line">            <span class="keyword">if</span> i + len(needle) &gt; len(haystack):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> haystack[i:i+len(needle)] == needle:</span><br><span class="line">                index = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.strStr(haystack = <span class="string">"hello"</span>, needle = <span class="string">"ll"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第二十八题&quot;&gt;&lt;a href=&quot;#LeetCode第二十八题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第二十八题&quot;&gt;&lt;/a&gt;LeetCode第二十八题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
</feed>
