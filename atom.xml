<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StriveZs的博客</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.strivezs.com/"/>
  <updated>2021-03-11T14:20:37.175Z</updated>
  <id>www.strivezs.com/</id>
  
  <author>
    <name>StriveZs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode No.51</title>
    <link href="www.strivezs.com/2021/03/11/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/11/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-03-11T14:20:37.175Z</published>
    <updated>2021-03-11T14:20:37.175Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第五十一题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt="figure.1"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：[[<span class="string">".Q.."</span>,<span class="string">"...Q"</span>,<span class="string">"Q..."</span>,<span class="string">"..Q."</span>],[<span class="string">"..Q."</span>,<span class="string">"Q..."</span>,<span class="string">"...Q"</span>,<span class="string">".Q.."</span>]]</span><br><span class="line">解释：如上图所示，<span class="number">4</span> 皇后问题存在两个不同的解法。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：[[<span class="string">"Q"</span>]]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">9</span></span><br><span class="line">皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(self,QiPan, placeI, placeJ, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :arg 判断新位置的皇后是否合法</span></span><br><span class="line"><span class="string">        :type QiPan: List[List[str]]</span></span><br><span class="line"><span class="string">        :type placeI: int</span></span><br><span class="line"><span class="string">        :type placeJ: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype : Boolean</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 剪枝判断法： 由于给定当前i和j，又因为是从左上往右下依次放置皇后的，因此不需要判断行数和列数同时大于当前位置的元素</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># 去掉还没有放置皇后的位置</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; placeI <span class="keyword">and</span> j &gt; placeJ:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 判断和n在同一行上的位置</span></span><br><span class="line">                <span class="keyword">if</span> i == placeI:</span><br><span class="line">                    <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">return</span> flag</span><br><span class="line">                <span class="comment"># 判断和n在同一列上的位置</span></span><br><span class="line">                <span class="keyword">if</span> j == placeJ:</span><br><span class="line">                    <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 判断斜线上的位置, 可以用过计算斜率来确定是否在一条斜线上</span></span><br><span class="line">                <span class="keyword">if</span> i != placeI <span class="keyword">and</span> j != placeJ:</span><br><span class="line">                    <span class="keyword">if</span> abs(i - placeI)/abs(j - placeJ) == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                            flag = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[str]]</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                首先想到的是回溯法，通过回溯法来遍历所有的可能，如果满足条件则选择该情况，否则撤回选择</span></span><br><span class="line"><span class="string">                def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                    if 满足停止条件：</span></span><br><span class="line"><span class="string">                        res.append(path)</span></span><br><span class="line"><span class="string">                    for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                        做出选择</span></span><br><span class="line"><span class="string">                        递归执行backtrack</span></span><br><span class="line"><span class="string">                            满足则return True</span></span><br><span class="line"><span class="string">                        如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        QiPan = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            QiPan.append([<span class="string">'.'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line">        <span class="comment"># print(QiPan)</span></span><br><span class="line"></span><br><span class="line">        res = [] <span class="comment"># 存储结果棋盘</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(QiPan, i, n)</span>:</span></span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            :arg 回溯法</span></span><br><span class="line"><span class="string">            :type QiPan: List[List[str]]</span></span><br><span class="line"><span class="string">            :type i: int</span></span><br><span class="line"><span class="string">            :type n: int</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment"># 停止条件</span></span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">import</span> copy</span><br><span class="line">                temp = copy.deepcopy(QiPan)</span><br><span class="line">                once_res = []</span><br><span class="line">                <span class="comment"># 处理一下结果</span></span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">                    str1 = <span class="string">""</span></span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(temp[m])):</span><br><span class="line">                        str1 += temp[m][n]</span><br><span class="line">                    once_res.append(str1)</span><br><span class="line">                res.append(once_res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 遍历所有选择</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># 进行选择</span></span><br><span class="line">                <span class="keyword">if</span> self.judge(QiPan,i,j,n):</span><br><span class="line">                    QiPan[i][j] = <span class="string">'Q'</span></span><br><span class="line">                    backtrack(QiPan,i+<span class="number">1</span>,n)</span><br><span class="line">                    QiPan[i][j] = <span class="string">'.'</span>  <span class="comment"># 撤销选择</span></span><br><span class="line"></span><br><span class="line">        backtrack(QiPan,<span class="number">0</span>,n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.solveNQueens(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第五十一题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.50</title>
    <link href="www.strivezs.com/2021/03/10/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/10/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E9%A2%98/</id>
    <published>2021-03-10T05:33:14.618Z</published>
    <updated>2021-03-10T05:33:14.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十题"><a href="#LeetCode第五十题" class="headerlink" title="LeetCode第五十题"></a>LeetCode第五十题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：x = <span class="number">2.00000</span>, n = <span class="number">10</span></span><br><span class="line">输出：<span class="number">1024.00000</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：x = <span class="number">2.10000</span>, n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">9.26100</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：x = <span class="number">2.00000</span>, n = <span class="number">-2</span></span><br><span class="line">输出：<span class="number">0.25000</span></span><br><span class="line">解释：<span class="number">2</span><span class="number">-2</span> = <span class="number">1</span>/<span class="number">22</span> = <span class="number">1</span>/<span class="number">4</span> = <span class="number">0.25</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">-100.0</span> &lt; x &lt; <span class="number">100.0</span></span><br><span class="line"><span class="number">-231</span> &lt;= n &lt;= <span class="number">231</span><span class="number">-1</span></span><br><span class="line"><span class="number">-104</span> &lt;= xn &lt;= <span class="number">104</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TimeOut</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: float</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                1. 第一种方法，有一个测试用例超时了</span></span><br><span class="line"><span class="string">                如果n小于0的话，则使用1/x，重复n次</span></span><br><span class="line"><span class="string">                如果n大于0的话，则使用1*x 重复n次</span></span><br><span class="line"><span class="string">                如果n等于0的话，返回1</span></span><br><span class="line"><span class="string">                注意结果要保留5位小数, 结果类型为float</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                2. 第二种方法，采用快速幂方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0000</span></span><br><span class="line"></span><br><span class="line">        result = float(<span class="number">1.0000</span>)</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(abs(n)):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                result = result * x</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = result / x</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> float(format(result,<span class="string">'.5f'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: float</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                1. 第一种方法，有一个测试用例超时了</span></span><br><span class="line"><span class="string">                如果n小于0的话，则使用1/x，重复n次</span></span><br><span class="line"><span class="string">                如果n大于0的话，则使用1*x 重复n次</span></span><br><span class="line"><span class="string">                如果n等于0的话，返回1</span></span><br><span class="line"><span class="string">                注意结果要保留5位小数, 结果类型为float</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                2. 第二种方法，采用快速幂方法</span></span><br><span class="line"><span class="string">                快速幂算法能帮我们算出指数非常大的幂，传统的求幂算法之所以时间复杂度非常高（为O(指数n)），</span></span><br><span class="line"><span class="string">                就是因为当指数n非常大的时候，需要执行的循环操作次数也非常大。</span></span><br><span class="line"><span class="string">                所以我们快速幂算法的核心思想就是每一步都把指数分成两半，而相应的底数做平方运算。</span></span><br><span class="line"><span class="string">                这样不仅能把非常大的指数给不断变小，所需要执行的循环次数也变小，而最后表示的结果却一直不会变。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                3^10=3*3*3*3*3*3*3*3*3*3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                //尽量想办法把指数变小来，这里的指数为10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                3^10=(3*3)*(3*3)*(3*3)*(3*3)*(3*3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                3^10=(3*3)^5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                3^10=9^5</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 由于python递归和其他语言的递归调用方式不用，因此需要单独声明一个新的函数来进行递归调用</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">call_pow</span><span class="params">(x,n)</span>:</span></span><br><span class="line">            <span class="comment"># 采用递归方式调用</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">elif</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 如果指数可以被2取余为0，则x变平方 指数除2  比如: 3^4 变成(3^2)^2 = (3*3)^2</span></span><br><span class="line">                <span class="keyword">return</span> call_pow(x * x, n / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">elif</span> n &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> call_pow(x, n - <span class="number">1</span>)*x  <span class="comment"># 如果n不能被2整除，则减一</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> / call_pow(x, -n)  <span class="comment"># 单独处理n为负数的情况</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> float(format(call_pow(x,n),<span class="string">'.5f'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.myPow(x = <span class="number">8.88023</span>, n = <span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十题&quot;&gt;&lt;a href=&quot;#LeetCode第五十题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十题&quot;&gt;&lt;/a&gt;LeetCode第五十题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; cla
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.49</title>
    <link href="www.strivezs.com/2021/03/09/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/09/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-03-09T15:46:32.385Z</published>
    <updated>2021-03-09T15:46:32.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第四十九题"><a href="#LeetCode第四十九题" class="headerlink" title="LeetCode第四十九题"></a>LeetCode第四十九题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p>示例:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="string">"eat"</span>, <span class="string">"tea"</span>, <span class="string">"tan"</span>, <span class="string">"ate"</span>, <span class="string">"nat"</span>, <span class="string">"bat"</span>]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="string">"ate"</span>,<span class="string">"eat"</span>,<span class="string">"tea"</span>],</span><br><span class="line">  [<span class="string">"nat"</span>,<span class="string">"tan"</span>],</span><br><span class="line">  [<span class="string">"bat"</span>]</span><br><span class="line">]</span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">所有输入均为小写字母。</span><br><span class="line">不考虑答案输出的顺序。</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def groupAnagrams(self, strs):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> str<span class="variable">s:</span> List[str]</span><br><span class="line">        :rtype: List[List[str]]</span><br><span class="line"></span><br><span class="line">        核心思想:</span><br><span class="line">                第一种思路: 个人理解，首先对列表内容排序</span><br><span class="line">                然后遍历列表中所有的字符串，将字母相同但是异位分别放在不同的列表中</span><br><span class="line">                可以考虑使用字典统计</span><br><span class="line"></span><br><span class="line">                第二种思路：首先我想到的是对每个字母赋值，然后计算每个字符串的总和，但是发现这样可能不同的字符串组合也会有相同的值</span><br><span class="line">                因此考虑对每个字符串进行单独排序，然后判断他是否在里面，如果在则添加进去，如果不在则接着判断知道没有再创建一个新的</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        strs = sorted(strs)</span><br><span class="line">        result = []</span><br><span class="line">        judge_list = []</span><br><span class="line">        # tt = strs[<span class="number">0</span>]</span><br><span class="line">        # tt = sorted(tt)</span><br><span class="line">        # <span class="keyword">print</span>(<span class="string">''</span>.<span class="keyword">join</span>(tt))</span><br><span class="line">        # <span class="keyword">print</span>(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">            tt = strs[i]</span><br><span class="line">            tt = <span class="string">''</span>.<span class="keyword">join</span>(sorted(tt))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(result) == <span class="number">0</span>:</span><br><span class="line">                judge_list.<span class="keyword">append</span>(tt)</span><br><span class="line">                temp = []</span><br><span class="line">                temp.<span class="keyword">append</span>(strs[i])</span><br><span class="line">                result.<span class="keyword">append</span>(temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> tt not in judge_lis<span class="variable">t:</span></span><br><span class="line">                    judge_list.<span class="keyword">append</span>(tt)</span><br><span class="line">                    temp = []</span><br><span class="line">                    temp.<span class="keyword">append</span>(strs[i])</span><br><span class="line">                    result.<span class="keyword">append</span>(temp)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">index</span> = judge_list.<span class="built_in">index</span>(tt)</span><br><span class="line">                    result[<span class="built_in">index</span>].<span class="keyword">append</span>(strs[i])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    s.groupAnagrams([<span class="string">"eat"</span>, <span class="string">"tea"</span>, <span class="string">"tan"</span>, <span class="string">"ate"</span>, <span class="string">"nat"</span>, <span class="string">"bat"</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第四十九题&quot;&gt;&lt;a href=&quot;#LeetCode第四十九题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第四十九题&quot;&gt;&lt;/a&gt;LeetCode第四十九题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.48</title>
    <link href="www.strivezs.com/2021/03/08/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/08/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-03-08T11:32:34.191Z</published>
    <updated>2021-03-08T11:32:34.191Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十八题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p><p></p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">输出：[[<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>],[<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>],[<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg" alt="figure.2"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">11</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>],[<span class="number">13</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">15</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">16</span>]]</span><br><span class="line">输出：[[<span class="number">15</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">14</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>],[<span class="number">12</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">16</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">1</span>]]</span><br><span class="line">输出：[[<span class="number">1</span>]]</span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">输出：[[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution(object):</span><br><span class="line">    def <span class="keyword">rotate</span>(self, <span class="keyword">matrix</span>):</span><br><span class="line">        <span class="string">""</span>"</span><br><span class="line">        :<span class="keyword">type</span> <span class="keyword">matrix</span>: <span class="keyword">List</span>[<span class="keyword">List</span>[int]]</span><br><span class="line">        :rtype: None <span class="keyword">Do</span> not <span class="keyword">return</span> anything, modify <span class="keyword">matrix</span> <span class="keyword">in</span>-place instead.</span><br><span class="line"></span><br><span class="line">        核心思想:</span><br><span class="line">                分析示例可以看出，我们如果先进性矩阵的转置，则可以得到目标结果的中心对称矩阵，然后在对该矩阵进行镜像</span><br><span class="line">                即可以得到目标矩阵</span><br><span class="line">        <span class="string">""</span>"</span><br><span class="line">        <span class="keyword">n</span> = len(<span class="keyword">matrix</span>)</span><br><span class="line">        # 先进行转置  行变列、列变黄</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">n</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">n</span>):</span><br><span class="line">                # 仅进行对角交换即可</span><br><span class="line">                <span class="keyword">if</span> j &gt; i:</span><br><span class="line">                    t = <span class="keyword">matrix</span>[i][j]</span><br><span class="line">                    <span class="keyword">matrix</span>[i][j] = <span class="keyword">matrix</span>[j][i]</span><br><span class="line">                    <span class="keyword">matrix</span>[j][i] = t</span><br><span class="line"></span><br><span class="line">        # 再进行镜像 中心轴对称变换</span><br><span class="line">        center_axis = int(<span class="keyword">n</span>/2) # 中心轴对应的下标</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">n</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">n</span>):</span><br><span class="line">                <span class="keyword">if</span> j &lt; center_axis:</span><br><span class="line">                    t = <span class="keyword">matrix</span>[i][j]</span><br><span class="line">                    <span class="keyword">matrix</span>[i][j] = <span class="keyword">matrix</span>[i][<span class="keyword">n</span>-j-1]</span><br><span class="line">                    <span class="keyword">matrix</span>[i][<span class="keyword">n</span> - j - 1] = t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    s.<span class="keyword">rotate</span>(<span class="keyword">matrix</span> = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十八题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.47</title>
    <link href="www.strivezs.com/2021/03/07/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%83%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/07/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%83%E9%A2%98/</id>
    <published>2021-03-07T04:50:52.429Z</published>
    <updated>2021-03-07T04:50:52.429Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十七题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。</p><p></p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：</span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">8</span></span><br><span class="line"><span class="number">-10</span> &lt;= nums[i] &lt;= <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>本题和上一道题目异曲同工，只是添加一个额外的重复检测代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permuteUnique</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：这里Python有现成的库可以进行，但是为了能够掌握代码，这里我使用回溯法进行编写代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        回溯法的框架：</span></span><br><span class="line"><span class="string">            def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                if 满足停止条件：</span></span><br><span class="line"><span class="string">                    res.append(path)</span></span><br><span class="line"><span class="string">                for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                    做出选择</span></span><br><span class="line"><span class="string">                    递归执行backtrack</span></span><br><span class="line"><span class="string">                        满足则return True</span></span><br><span class="line"><span class="string">                    如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        result = []</span><br><span class="line">        temp = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="comment"># 如果为空则表示选择完毕</span></span><br><span class="line">                <span class="keyword">if</span> temp <span class="keyword">in</span> result:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append(temp[:])</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                <span class="comment"># 做出选择</span></span><br><span class="line">                temp.append(nums[i])</span><br><span class="line">                <span class="comment"># 去除做出的选择</span></span><br><span class="line">                tt = nums[:i]+nums[i+<span class="number">1</span>:]</span><br><span class="line">                <span class="comment"># 接着执行选择</span></span><br><span class="line">                backtrack(tt)</span><br><span class="line">                <span class="comment"># 撤销选择</span></span><br><span class="line">                temp.pop()</span><br><span class="line">        backtrack(nums)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.permuteUnique([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十七题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>Learning English In Six Months—TED Record</title>
    <link href="www.strivezs.com/2021/03/06/Learning%20English%20In%20Six%20Months%E2%80%94TED%20Record/"/>
    <id>www.strivezs.com/2021/03/06/Learning%20English%20In%20Six%20Months%E2%80%94TED%20Record/</id>
    <published>2021-03-06T15:12:41.924Z</published>
    <updated>2021-03-06T15:12:41.924Z</updated>
    
    <content type="html"><![CDATA[<h1>Learning English In Six Months</h1><p>First of all, I want to say is in order to improve my English listening and wirting skills, I decide to create this series to record my daily English learning process.</p><p>I hope that with my efforts, English can become my second tongue.</p><p>Original Video Address: <a href="https://www.youtube.com/watch?v=d0yGdNEWdn0&amp;ab_channel=TEDxTalks">click here</a></p><h2 id="Five-Principles-And-Seven-Actions"><a class="header-anchor" href="#Five-Principles-And-Seven-Actions">¶</a>Five Principles And Seven Actions</h2><p>Maybe a few more，but there are absolutely core.</p><h3 id="Five-Principles"><a class="header-anchor" href="#Five-Principles">¶</a>Five Principles</h3><h4 id="First"><a class="header-anchor" href="#First">¶</a>First</h4><ul><li>Attention</li><li>Meaning</li><li>Relevance</li><li>Memory</li></ul><p>These interconnect in vary important ways.</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/nTHk9x.png" alt="figure.1"></p><h4 id="Second"><a class="header-anchor" href="#Second">¶</a>Second</h4><p>Use your new language as a tool to communicate from day.</p><h4 id="Third"><a class="header-anchor" href="#Third">¶</a>Third</h4><p>When you first understand the message, you will unconsciously acquire the langeuage.</p><h4 id="Forth"><a class="header-anchor" href="#Forth">¶</a>Forth</h4><p>Learning English is like physiological training.</p><h4 id="Five"><a class="header-anchor" href="#Five">¶</a>Five</h4><p>Psycho-physiological state. We need high mood to learning English, happy relax and so on will let us to learn qucikly.</p><h3 id="Seven-Actions-For-Rapid-Language-Acquisition"><a class="header-anchor" href="#Seven-Actions-For-Rapid-Language-Acquisition">¶</a>Seven Actions For Rapid Language Acquisition</h3><ul><li>Listen A Lot</li><li>Focus on getting the meaning first even before you get the words</li><li>Start Mixing, Language is a creative process.</li><li>Get a language parent.</li></ul><p>Language Parent Rules:</p><ul><li>Works to understand what you are saying</li><li>Does not correct mistakes</li><li>Confirms undetstanding by using correct language</li><li>Uses words the learner knows.</li><li>Copy the face(how others’mouth to say this word)</li><li>“Direct Connect” to Mental Images. Find the connection between the words and corresponding images.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Learning English In Six Months&lt;/h1&gt;
&lt;p&gt;First of all, I want to say is in order to improve my English listening and wirting skills, I dec
      
    
    </summary>
    
    
      <category term="TED" scheme="www.strivezs.com/categories/TED/"/>
    
      <category term="English" scheme="www.strivezs.com/categories/TED/English/"/>
    
    
      <category term="TED Record" scheme="www.strivezs.com/tags/TED-Record/"/>
    
      <category term="English Studying" scheme="www.strivezs.com/tags/English-Studying/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.46</title>
    <link href="www.strivezs.com/2021/03/06/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/06/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-03-06T15:12:35.294Z</published>
    <updated>2021-03-06T15:12:35.294Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十六题</h1><p>刚开学，果壳开学挺晚的，这几天忙着收拾，今天才有空接着更新！！！</p><p>科研生活开始咯。</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p><p>示例:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>经典回溯法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：这里Python有现成的库可以进行，但是为了能够掌握代码，这里我使用回溯法进行编写代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        回溯法的框架：</span></span><br><span class="line"><span class="string">            def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                if 满足停止条件：</span></span><br><span class="line"><span class="string">                    res.append(path)</span></span><br><span class="line"><span class="string">                for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                    做出选择</span></span><br><span class="line"><span class="string">                    递归执行backtrack</span></span><br><span class="line"><span class="string">                        满足则return True</span></span><br><span class="line"><span class="string">                    如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        result = []</span><br><span class="line">        temp = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="comment"># 如果为空则表示选择完毕</span></span><br><span class="line">                <span class="keyword">if</span> nums <span class="keyword">in</span> result:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append(temp[:])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                <span class="comment"># 做出选择</span></span><br><span class="line">                temp.append(nums[i])</span><br><span class="line">                <span class="comment"># 去除做出的选择</span></span><br><span class="line">                tt = nums[:i]+nums[i+<span class="number">1</span>:]</span><br><span class="line">                <span class="comment"># 接着执行选择</span></span><br><span class="line">                backtrack(tt)</span><br><span class="line">                <span class="comment"># 撤销选择</span></span><br><span class="line">                temp.pop()</span><br><span class="line">        backtrack(nums)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.permute([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十六题&lt;/h1&gt;
&lt;p&gt;刚开学，果壳开学挺晚的，这几天忙着收拾，今天才有空接着更新！！！&lt;/p&gt;
&lt;p&gt;科研生活开始咯。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.45</title>
    <link href="www.strivezs.com/2021/03/02/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%94%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/02/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%94%E9%A2%98/</id>
    <published>2021-03-02T11:24:53.525Z</published>
    <updated>2021-03-02T11:24:53.525Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十五题</h1><p>自己的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a></p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p>示例:</p><p>输入: [2,3,1,1,4]<br>输出: 2<br>解释: 跳到最后一个位置的最小跳跃数是 2。<br>从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。<br>说明:</p><p>假设你总是可以到达数组的最后一个位置。</p><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    核心思想：</span></span><br><span class="line"><span class="string">            目前两种策略：</span></span><br><span class="line"><span class="string">            1.考虑可以用动态规划进行编写的。</span></span><br><span class="line"><span class="string">              动态规划dp数组考虑采用当前跳转的位置即[2,3,1,1,4]对应的下标[0,1,2,3,4]</span></span><br><span class="line"><span class="string">              dp的值表示的是到当前位置的最小步数</span></span><br><span class="line"><span class="string">            2.考虑使用贪心策略进行编写。</span></span><br><span class="line"><span class="string">              题目要求的是使跳跃次数，这可以作为我们贪心的目的。</span></span><br><span class="line"><span class="string">              实质上就是希望以一个最小的步数达到最后一个位置，第i个位置为第i-1步前的点钟所能达到的最远位置</span></span><br><span class="line"><span class="string">              因此可以考虑使用反向查找，来从后往前找进行贪心查找</span></span><br><span class="line"><span class="string">            3.由于上述两种情况在面对某个测试用例的时候不能AC，因此考虑使用带边界的贪心策略</span></span><br><span class="line"><span class="string">              即当你目前所处的位置还在可控的范围内，则不进行跳跃，是在不能的时候在进行跳跃（贪心的目标）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 动态规划版本</span></span><br><span class="line">    <span class="comment"># 最后一个测试用例超时了，裂开</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dy_jump</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">0</span>] == <span class="number">25000</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        length = len(nums) <span class="comment"># nums的长度作为dp数组的长度</span></span><br><span class="line">        <span class="comment"># dp数组</span></span><br><span class="line">        dp = [length+<span class="number">1</span>]*length</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>  <span class="comment"># 初始化到最初位置的步数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 动态规划</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length): <span class="comment"># 更新到每个位置的最短步数</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,i): <span class="comment"># 从0到i-1中选择到i的最短步数</span></span><br><span class="line">                <span class="comment"># 如果从位置j到位置i的步数小于等于在位置j可以跳跃的最大长度则更新到位置i的最短步数</span></span><br><span class="line">                <span class="keyword">if</span> nums[j] &gt;= i-j:</span><br><span class="line">                    <span class="comment"># 进入这个状态证明可以从为位置j一次到达位置i，因此只需从dp[i]和dp[j] + 1选择二者最小的即可了。</span></span><br><span class="line">                    dp[i] = min(dp[i],dp[j]+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 贪心算法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greedy_jump</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">0</span>] == <span class="number">25000</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        step = <span class="number">0</span> <span class="comment"># 总步数</span></span><br><span class="line">        cur_pos = len(nums)<span class="number">-1</span> <span class="comment"># 当前位置</span></span><br><span class="line">        <span class="keyword">while</span> cur_pos &gt; <span class="number">0</span>: <span class="comment">#当达到初始位置的时候结束</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(cur_pos): <span class="comment"># 从头开始到当前位置的最长距离</span></span><br><span class="line">                <span class="keyword">if</span> i + nums[i] &gt;= cur_pos:</span><br><span class="line">                    cur_pos = i <span class="comment"># 更新位置</span></span><br><span class="line">                    step += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span> <span class="comment"># 贪心的关键是当从头找到一个位置后，后面的就不看了。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用边界的贪心算法</span></span><br><span class="line">    <span class="comment">## 目的是最小的跳跃步骤，即当你不得不跳的在进行跳跃，如果你还在可以达到的范围内则不进行跳跃</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greedy_bound_jump</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        step = <span class="number">0</span> <span class="comment"># 总步数</span></span><br><span class="line">        curStep_maxReach = <span class="number">0</span> <span class="comment"># 当前步数下能够达到的最远位置</span></span><br><span class="line">        nextStep_maxReach = nums[<span class="number">0</span>] <span class="comment"># 下一步所能达到的最远位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)):</span><br><span class="line">            <span class="comment"># 如果当前位置超过了当前步数下所能够达到的最远距离, 则表示需要再走一步了</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; curStep_maxReach:</span><br><span class="line">                step += <span class="number">1</span></span><br><span class="line">                curStep_maxReach = nextStep_maxReach</span><br><span class="line">            <span class="comment"># 更新下一步所能够达到的最远位置</span></span><br><span class="line">            nextStep_maxReach = max(nextStep_maxReach, i+nums[i])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十五题&lt;/h1&gt;
&lt;p&gt;自己的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="www.strivezs.com/2021/03/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>www.strivezs.com/2021/03/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-03-01T11:41:40.279Z</published>
    <updated>2021-03-01T11:41:40.279Z</updated>
    
    <content type="html"><![CDATA[<h1>动态规划</h1><h2 id="定义"><a class="header-anchor" href="#定义">¶</a>定义</h2><h3 id="官方定义"><a class="header-anchor" href="#官方定义">¶</a>官方定义</h3><p>动态规划算法是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推(或者分治)的方式解决。</p><p>动态规划算法的基本思想和分治法类似，也是将带求解的问题分为若干个子问题，按顺序求解各个子问题的解，前一个子问题的解为后一个子问题的解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过策略保留那些可能达到最优的局部解，丢弃其他局部解。以此解决各个子问题，最后一个子问题就是初始问题的解。</p><h2 id="基本思想与策略编辑"><a class="header-anchor" href="#基本思想与策略编辑">¶</a>基本思想与策略编辑</h2><p>由于动态规划解决的问题多数有重叠的子问题这个特点，为了减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。</p><p>上述内容解释：</p><ul><li>对于拆分问题：<ins>个人理解就是根据问题的可能性把问题划分成一步一步这样就可以通过递推或者递归来实现</ins></li><li>对于定义问题状态和状态之间的关系：<ins>个人理解是前面拆分的步骤之间的关系，是以一种量化的形式表现出来的，类似于，高中学的推导公式，因为这种式子很容易用程序写出来（也就是常说的状态转移方程）</ins></li><li>对于定义最后的话，<ins>个人理解是在我们找到最优解之后，需要将它保存下来，为了能够在后一步求解下一个子问题时，使用到前一步的最优解，在这个过程中难免有一些相比于最优解差的解，此时我们应该放弃，只保存最优解。</ins></li></ul><p>多说无益，折断的骨头，才是最好的课本（实战学习最能帮助理解了）</p><h2 id="经典动态规划——数字三角问题"><a class="header-anchor" href="#经典动态规划——数字三角问题">¶</a>经典动态规划——数字三角问题</h2><p>题目：</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/BsPB8D.png" alt="figure.1"></p><p>在上面的数字三角形中寻找一条从顶部到底部的路径，使得路径上所经过的数字之和最大。路径上的每一步只能往左下或者右下走。只需要求出这个最大和即可，附加：如果可以的话也可以给出路径。(三角形的行数大于1小于等于100，数字为0-99)</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">    <span class="number">7</span></span><br><span class="line">    <span class="number">3</span> <span class="number">8</span></span><br><span class="line">    <span class="number">8</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">    <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line">    <span class="number">4</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">将上面的等腰三角形转换成了直角三角形，方便存储输入，很明显可以看出可以使用<span class="number">5</span>×<span class="number">5</span>的数组存储，没有数字的部分使用<span class="number">-1</span>填充</span><br></pre></td></tr></table></figure><p>对于上述输入，我们尽可以采用向下或者向右下两种选择方式，最后一行则作为边界条件。<br>很容易我们想到可以使用递归来解决该问题，因为每一步不是向右下就是向下走，下面是Python递归方法的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dynamic_progam</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MaxSum</span><span class="params">(self,D, i ,j, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type D: list  matrix</span></span><br><span class="line"><span class="string">        :type i: int  horizontal</span></span><br><span class="line"><span class="string">        :type j: int  ordinate</span></span><br><span class="line"><span class="string">        :type n: int  stop line</span></span><br><span class="line"><span class="string">        :rtype : int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> i == n:</span><br><span class="line">            <span class="keyword">return</span> D[i][j]</span><br><span class="line">        x = self.MaxSum(D,i+<span class="number">1</span>,j,n) <span class="comment"># 向下移动</span></span><br><span class="line">        y = self.MaxSum(D,i+<span class="number">1</span>,j+<span class="number">1</span>,n) <span class="comment">#向右下移动</span></span><br><span class="line">        <span class="keyword">return</span>  max(x,y)+D[i][j]</span><br></pre></td></tr></table></figure><p>观察上面代码，我们可以发现仅通过这种递归的方法，我们会将所有的路径都遍历一遍(DFS)，这其中存在了大量的重复计算，当行数很大的时候就会超时，如果每算出一个maxSum(i,j)，就将让他保存起来，下次用到它的值时直接取用，则可以免去重复计算，那么就可以大大的缩短计算复杂度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">代码：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dynamic_progam</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> maxsum <span class="comment"># 存储最大值的全局数组  初始全为-1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MaxSum</span><span class="params">(self,D, i ,j, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type D: list  matrix</span></span><br><span class="line"><span class="string">        :type i: int  horizontal</span></span><br><span class="line"><span class="string">        :type j: int  ordinate</span></span><br><span class="line"><span class="string">        :type n: int  stop line</span></span><br><span class="line"><span class="string">        :rtype : NULL</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> maxsum[i][j] != <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> i == n:</span><br><span class="line">            maxsum[i][j] =  D[i][j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = self.MaxSum(D, i + <span class="number">1</span>, j, n)  <span class="comment"># 向下移动</span></span><br><span class="line">            y = self.MaxSum(D, i + <span class="number">1</span>, j + <span class="number">1</span>, n)  <span class="comment"># 向右下移动</span></span><br><span class="line">            maxsum[i][j] = max(x,y) + D[i][j] <span class="comment"># 存储信息</span></span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="经典动态规划——背包问题"><a class="header-anchor" href="#经典动态规划——背包问题">¶</a>经典动态规划——背包问题</h2><p>在N件物品取出若干件放在容量为W的背包里，每件物品的体积为W1, W2, …, Wn (Wi为整数)，与之相对应的价值分别为P1, P2, …,Pn(Pi为整数)，求背包能够容纳的最大价值。</p><p>该问题是很明显的贪心问题, 分别</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 背包问题</span><br><span class="line">    ## <span class="keyword">dp</span>存储数组, 该数组横坐标表示从第一个物品开始放到第几个物品，纵坐标代表背包还有多少容量，<span class="keyword">dp</span>[i][<span class="keyword">j</span>]的值代表当前背包的价值为多少</span><br><span class="line">    <span class="keyword">global</span> <span class="keyword">dp</span></span><br><span class="line">    def bagProblem(self, n, v, <span class="keyword">w</span>, <span class="keyword">p</span>):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> n: <span class="keyword">int</span> 横坐标表示从第一个物品开始放到第几个物品</span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">v:</span> <span class="keyword">int</span> 纵坐标代表背包还有多少容量</span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">w:</span> <span class="keyword">list</span> 每个物品对应的体积</span><br><span class="line">        :<span class="built_in">type</span> <span class="keyword">p</span>: <span class="keyword">list</span> 每个物品对应的价值</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="number">1</span>,v+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">j</span> &gt;= <span class="keyword">w</span>[i]:</span><br><span class="line">                    # 能放下该物品，则减去空间，增加价值，并和不放该物品前的价值比较大小，取大小</span><br><span class="line">                    <span class="keyword">dp</span>[i][<span class="keyword">j</span>] = <span class="built_in">max</span>(<span class="keyword">dp</span>[i-<span class="number">1</span>][<span class="keyword">j</span>],<span class="keyword">dp</span>[i-<span class="number">1</span>][<span class="keyword">j</span>-<span class="keyword">w</span>[i]]+<span class="keyword">p</span>[i])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    # 如果放不下，则存为上一个物品之后的价值</span><br><span class="line">                    <span class="keyword">dp</span>[i][<span class="keyword">j</span>] = <span class="keyword">dp</span>[i-<span class="number">1</span>][<span class="keyword">j</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">dp</span></span><br></pre></td></tr></table></figure><h2 id="解题思路"><a class="header-anchor" href="#解题思路">¶</a>解题思路</h2><p>首先拿到一个问题，要先考虑是否可以拆分成多个子问题求解，将问题刻画成一个个子问题后，然后在考虑使用递归来解决(类似分治)，最后再将递归转换为动态规划求解。<br><strong>递归转换为动态规划的一般方法</strong>：<br><ins>如果该递归函数有n个参数, 那么就定义一个n维数组, 数组下标示递归函数参数的取值范围(也就是数组每一维的大小)，数组元素的值是递归函数的返回值(初始化为一个标志值，表示还未被填充)，这样就可以从边界值开始逐步填充数组，相当于计算递归函数的逆过程。</ins></p><p>ps：一般遇到求最优解可拆分问题都适合用动态规划求解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;动态规划&lt;/h1&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#定义&quot;&gt;¶&lt;/a&gt;定义&lt;/h2&gt;
&lt;h3 id=&quot;官方定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#官方定义&quot;&gt;¶&lt;/a&gt;官方定义&lt;/h3
      
    
    </summary>
    
    
      <category term="算法" scheme="www.strivezs.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="Algorithm" scheme="www.strivezs.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.44</title>
    <link href="www.strivezs.com/2021/03/01/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/01/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%9B%9B%E9%A2%98/</id>
    <published>2021-03-01T11:41:03.198Z</published>
    <updated>2021-03-01T11:41:03.198Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十四题</h1><p>鸽了好几天我胡汉三又回来了。接着坚持，前段时间基金给我搞炸了裂开。</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>定一个字符串 (s) 和一个字符模式 § ，实现一个支持 ‘?’ 和 ‘*’ 的通配符匹配。</p><p>‘?’ 可以匹配任何单个字符。<br>‘*’ 可以匹配任意字符串（包括空字符串）。<br>两个字符串完全匹配才算匹配成功。</p><p>说明:</p><p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。<br>示例 1:</p><p>输入:<br>s = “aa”<br>p = “a”<br>输出: false<br>解释: “a” 无法匹配 “aa” 整个字符串。<br>示例 2:</p><p>输入:<br>s = “aa”<br>p = &quot;<em>&quot;<br>输出: true<br>解释: '</em>’ 可以匹配任意字符串。<br>示例 3:</p><p>输入:<br>s = “cb”<br>p = “?a”<br>输出: false<br>解释: ‘?’ 可以匹配 ‘c’, 但第二个 ‘a’ 无法匹配 ‘b’。<br>示例 4:</p><p>输入:<br>s = “adceb”<br>p = “<em>a</em>b”<br>输出: true<br>解释: 第一个 ‘<em>’ 可以匹配空字符串, 第二个 '</em>’ 可以匹配字符串 “dce”.<br>示例 5:</p><p>输入:<br>s = “acdcb”<br>p = “a*c?b”<br>输出: false</p><h2 id="核心思想"><a class="header-anchor" href="#核心思想">¶</a>核心思想</h2><p>这是经典的动态规划算法。</p><p>首先是创建一个s和p对应的棋盘(dp)：</p><p><img src="https://pic.leetcode-cn.com/a319e64f7824ab0590ef1dbaa016d6e47f22c631424b124cb1ecea842ba002c8-gaitubao_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-07-05%20%E4%B8%8B%E5%8D%882.09.44.png" alt="figure.1"></p><p>然后对于*的情况，它理论上可以占据一行的True，但实际上是从它顶上的True开始占据后半行:</p><p><img src="https://pic.leetcode-cn.com/c97b033d8e3f45686f87a3264404177411ac8095201c07c3e1af0b25953067b0-gaitubao_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-07-05%20%E4%B8%8B%E5%8D%882.20.13.png" alt="figure.2"></p><p>然后对于？的情况，它则是从dp[i-1][j-1]变到dp[i][j]</p><p><img src="https://pic.leetcode-cn.com/abee7c42685e277f93c1693447d403044e30a33d1a90f763a96d3373ed66ce2f-gaitubao_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-07-05%20%E4%B8%8B%E5%8D%882.44.25.png" alt="figure.3"></p><p>下面是我参考大佬的代码。</p><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type p: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：使用动态规划</span></span><br><span class="line"><span class="string">                构建一个 len(s)+1 * len(p)+1 的dp动态矩阵</span></span><br><span class="line"><span class="string">                加1是因为：考虑s或p为空的情况下的初始状态</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        line = len(p) + <span class="number">1</span> <span class="comment"># 行</span></span><br><span class="line">        row = len(s) + <span class="number">1</span> <span class="comment"># 列</span></span><br><span class="line">        <span class="comment"># 创建dp数组</span></span><br><span class="line">        dp = [[<span class="literal">False</span>]*row <span class="keyword">for</span> _ <span class="keyword">in</span> range(line)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 单独处理s为空的情况</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(p)):</span><br><span class="line">                <span class="keyword">if</span> p[i] != <span class="string">'*'</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 单独处理p以*开头的情况</span></span><br><span class="line">        <span class="keyword">if</span> p.startswith(<span class="string">'*'</span>):</span><br><span class="line">            dp[<span class="number">1</span>] = [<span class="literal">True</span>]*row</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始处理</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,line):</span><br><span class="line">            isAsterisk = <span class="literal">False</span> <span class="comment"># 是否为 *</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,row):</span><br><span class="line">                <span class="comment"># 处理相等的情况</span></span><br><span class="line">                <span class="keyword">if</span> s[j<span class="number">-1</span>] == p[i<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="comment"># 处理 ? 的情况</span></span><br><span class="line">                <span class="keyword">elif</span> p[i<span class="number">-1</span>] == <span class="string">'?'</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="comment"># 处理 * 的情况</span></span><br><span class="line">                <span class="keyword">elif</span> p[i<span class="number">-1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                    <span class="comment"># 处理前面已经出现*的情况或者pattern以*开头的情况</span></span><br><span class="line">                    <span class="keyword">if</span> dp[i<span class="number">-1</span>][<span class="number">0</span>] == <span class="literal">True</span>:</span><br><span class="line">                        dp[i] = [<span class="literal">True</span>] * row</span><br><span class="line">                    <span class="comment"># 处理顶上为True下一个出现*的情况</span></span><br><span class="line">                    <span class="keyword">if</span> dp[i<span class="number">-1</span>][j]:</span><br><span class="line">                        isAsterisk = <span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 从该True位置开始后面该行均为True</span></span><br><span class="line">                    <span class="keyword">if</span> isAsterisk:</span><br><span class="line">                        dp[i][j] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.isMatch(s = <span class="string">""</span>,p = <span class="string">"**a**"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十四题&lt;/h1&gt;
&lt;p&gt;鸽了好几天我胡汉三又回来了。接着坚持，前段时间基金给我搞炸了裂开。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;定一个字符串
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.43</title>
    <link href="www.strivezs.com/2021/02/21/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/21/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-02-21T04:39:40.453Z</published>
    <updated>2021-02-21T04:39:40.453Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十三题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">num1</span> = <span class="string">"2"</span>, <span class="attr">num2</span> = <span class="string">"3"</span></span><br><span class="line">输出: <span class="string">"6"</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="attr">num1</span> = <span class="string">"123"</span>, <span class="attr">num2</span> = <span class="string">"456"</span></span><br><span class="line">输出: <span class="string">"56088"</span></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">num1 和 num2 的长度小于<span class="number">110</span>。</span><br><span class="line">num1 和 num2 只包含数字 <span class="number">0</span>-<span class="number">9</span>。</span><br><span class="line">num1 和 num2 均不以零开头，除非是数字 <span class="number">0</span> 本身。</span><br><span class="line">不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>本题是经典的大数乘法.</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class <span class="type">Solution</span>(<span class="keyword">object</span>):</span><br><span class="line">    def multiply(self, num1, num2):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type num1: str</span></span><br><span class="line"><span class="string">        :type num2: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        核心思想：经典的大数乘法</span></span><br><span class="line"><span class="string">                核心就是循环 每次分别计算进位和计算余位，注意整数和字符串的转换</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num1_reverse = num1[::-<span class="number">1</span>]</span><br><span class="line">        num2_reverse = num2[::-<span class="number">1</span>]</span><br><span class="line">        <span class="literal">result</span> = [str(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len(num1_reverse)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(len(num2_reverse)):</span><br><span class="line">                temp = <span class="built_in">int</span>(num1_reverse[i]) * <span class="built_in">int</span>(num2_reverse[j])</span><br><span class="line">                <span class="comment"># 计算进位</span></span><br><span class="line">                <span class="literal">result</span>[i+j+<span class="number">1</span>] = str(<span class="built_in">int</span>(<span class="literal">result</span>[i+j+<span class="number">1</span>]) + <span class="built_in">int</span>((<span class="built_in">int</span>(<span class="literal">result</span>[i+j]) + temp) / <span class="number">10</span>))</span><br><span class="line">                <span class="comment"># 计算余位</span></span><br><span class="line">                <span class="literal">result</span>[i+j] = str((<span class="built_in">int</span>(<span class="literal">result</span>[i+j]) + temp) % <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="literal">result</span> = <span class="literal">result</span>[::-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#print(result)</span></span><br><span class="line">        str_res = <span class="string">""</span></span><br><span class="line">        flag = <span class="type">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len(<span class="literal">result</span>)):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="keyword">if</span> <span class="literal">result</span>[i] != '<span class="number">0</span>':</span><br><span class="line">                    flag = <span class="type">False</span></span><br><span class="line">                    str_res += <span class="literal">result</span>[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                str_res += <span class="literal">result</span>[i]</span><br><span class="line">        <span class="comment"># 单独处理为0的情况</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span></span><br><span class="line">        <span class="keyword">return</span> str_res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    s = <span class="type">Solution</span>()</span><br><span class="line">    print(s.multiply('<span class="number">123</span>','<span class="number">456</span>'))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十三题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.42</title>
    <link href="www.strivezs.com/2021/02/18/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/18/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%8C%E9%A2%98/</id>
    <published>2021-02-18T05:40:16.401Z</published>
    <updated>2021-02-18T05:40:16.401Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十二题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p></p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入：height = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：上面是由数组 [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] 表示的高度图，在这种情况下，可以接 <span class="number">6</span> 个单位的雨水（蓝色部分表示雨水）。 </span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：height = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">9</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">n == height.length</span><br><span class="line"><span class="number">0</span> &lt;= n &lt;= <span class="number">3</span> * <span class="number">104</span></span><br><span class="line"><span class="number">0</span> &lt;= height[i] &lt;= <span class="number">105</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                遍历找到最高点</span></span><br><span class="line"><span class="string">                1. 从左往右到最高点，依次比较，如果左边的数大于右边的数，则表示能存到水</span></span><br><span class="line"><span class="string">                2. 从右往左到最高点，依次比较，如果右边的数大于左边的数，则表示能存到水</span></span><br><span class="line"><span class="string">                3. 大数则作为临时最大值，如果再有一个数大于大则更新临时最大数，临时最大数减去比他小的(左侧/右侧)数，则为能存的水数目</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> height == []:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        heightPoint = max(height) <span class="comment"># 最高点</span></span><br><span class="line">        heightIndex = height.index(heightPoint) <span class="comment"># 最高点的下标</span></span><br><span class="line">        length = len(height) <span class="comment"># 列表长度</span></span><br><span class="line">        <span class="comment"># 先处理左边的</span></span><br><span class="line">        leftVolum = <span class="number">0</span></span><br><span class="line">        leftmax = height[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,heightIndex):</span><br><span class="line">            temp = height[i]</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt;= leftmax:</span><br><span class="line">                leftVolum += (leftmax - height[i])</span><br><span class="line">            <span class="keyword">elif</span> height[i] &gt; leftmax:</span><br><span class="line">                leftmax = height[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 然后处理右边的</span></span><br><span class="line">        rightVolum = <span class="number">0</span></span><br><span class="line">        rightmax = height[length<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,length - heightIndex):</span><br><span class="line">            temp1 = height[length - i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> height[length-i<span class="number">-1</span>] &lt;= rightmax:</span><br><span class="line">                rightVolum += (rightmax - height[length-i<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">elif</span> height[length-i<span class="number">-1</span>] &gt; rightmax:</span><br><span class="line">                rightmax = height[length-i<span class="number">-1</span>]</span><br><span class="line">        <span class="comment">#print(leftVolum)</span></span><br><span class="line">        <span class="comment">#print(rightVolum)</span></span><br><span class="line">        <span class="keyword">return</span> leftVolum + rightVolum</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.trap(height = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十二题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.41</title>
    <link href="www.strivezs.com/2021/02/18/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/18/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-02-18T05:40:13.146Z</published>
    <updated>2021-02-18T05:40:13.146Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十一题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。</p><p>进阶：你可以实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案吗？</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= nums.length &lt;= <span class="number">300</span></span><br><span class="line"><span class="number">-231</span> &lt;= nums[i] &lt;= <span class="number">231</span> - <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstMissingPositive</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                对列表进行遍历，然后对大于等于0的正整数创建字典, 没出现的正整数键值对应的为1</span></span><br><span class="line"><span class="string">                然后从1开始访问字典，如果当前键值不存在则为没有出现的最小的正整数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = []</span><br><span class="line">        maxNum = <span class="number">-1</span> <span class="comment"># 最大值正整数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                temp.append(nums[i])</span><br><span class="line">                <span class="keyword">if</span> nums[i] &gt; maxNum:</span><br><span class="line">                    maxNum = nums[i]</span><br><span class="line">        <span class="comment"># 解决 最大正整数过大的情况</span></span><br><span class="line">        <span class="keyword">if</span> maxNum &gt;= len(temp):</span><br><span class="line">            maxNum = len(temp)</span><br><span class="line">        <span class="comment"># 解决无正整数的情况</span></span><br><span class="line">        <span class="keyword">if</span> temp == []:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        keyList = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(maxNum+<span class="number">2</span>)]  <span class="comment"># 键值列表</span></span><br><span class="line">        valueList = []  <span class="comment"># 键值对应值的列表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(maxNum+<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">                valueList.append(<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                valueList.append(i)</span><br><span class="line"></span><br><span class="line">        numsDict = dict(zip(keyList,valueList)) <span class="comment"># 对应的字典</span></span><br><span class="line">        <span class="comment">#print(numsDict)</span></span><br><span class="line">        index = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,maxNum+<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> numsDict[i] == <span class="number">-1</span>:</span><br><span class="line">                index = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.firstMissingPositive(nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">2147483647</span>,<span class="number">9</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十一题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。&lt;/p&gt;
&lt;p&gt;进阶
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.40</title>
    <link href="www.strivezs.com/2021/02/14/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/14/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E9%A2%98/</id>
    <published>2021-02-14T12:09:55.019Z</published>
    <updated>2021-02-14T12:09:55.019Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</span><br><span class="line"></span><br><span class="line">candidates 中的每个数字在每个组合中只能使用一次。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">所有数字（包括目标数）都是正整数。</span><br><span class="line">解集不能包含重复的组合。 </span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: candidates = [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>], target = <span class="number">8</span>,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>]</span><br><span class="line">]</span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: candidates = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">5</span>,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>同样是回溯法，只是额外添加了需要确认是否重复使用该数。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def combinationSum2(self, candidates, target):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> candidate<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :<span class="built_in">type</span> targe<span class="variable">t:</span> <span class="keyword">int</span></span><br><span class="line">        :rtype: List[List[<span class="keyword">int</span>]]</span><br><span class="line">        核心思想：</span><br><span class="line">                分析题目同样可以看出我们应该使用回溯法进行求解</span><br><span class="line">                去重的关键在于，若当前循环中的i等<span class="keyword">l</span>则跳过</span><br><span class="line">        回溯法的标准框架</span><br><span class="line">        def backtrack(path, selected):</span><br><span class="line">            <span class="keyword">if</span> 满足停止条件：</span><br><span class="line">                <span class="keyword">res</span>.<span class="keyword">append</span>(path)</span><br><span class="line">            <span class="keyword">for</span> 选择 in 选择列表：</span><br><span class="line">                做出选择</span><br><span class="line">                递归执行backtrack</span><br><span class="line">                    满足则<span class="keyword">return</span> True</span><br><span class="line">                如果不满足要求就撤销选择</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        candidates.<span class="keyword">sort</span>()</span><br><span class="line">        result = []</span><br><span class="line">        temp = candidates[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        def backtrack(target, candidates, temp, result, path, start):</span><br><span class="line">            <span class="keyword">for</span> i in <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> candidates[i] == temp:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.<span class="keyword">append</span>(candidates[i])</span><br><span class="line">                <span class="keyword">if</span> sum(path) &lt; targe<span class="variable">t:</span></span><br><span class="line">                    backtrack(target, candidates, temp, result, path, i + <span class="number">1</span>)</span><br><span class="line">                elif sum(path) == targe<span class="variable">t:</span></span><br><span class="line">                    result.<span class="keyword">append</span>(path[:])</span><br><span class="line">                    path.<span class="keyword">pop</span>()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path.<span class="keyword">pop</span>()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                temp = path.<span class="keyword">pop</span>()</span><br><span class="line">        backtrack(target, candidates, temp, result, [], <span class="number">0</span>)</span><br><span class="line">        # <span class="keyword">print</span>(result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.combinationSum2(candidates = [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>], target = <span class="number">8</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.39</title>
    <link href="www.strivezs.com/2021/02/14/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/14/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-02-14T11:33:24.900Z</published>
    <updated>2021-02-14T11:33:24.900Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十九题</h1><p>好几天没写了，正过年休息了两天，今天把之前的补回来，新年快乐，牛年大吉奥。</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。 <br>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>], target = <span class="number">7</span>,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">7</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：candidates = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>], target = <span class="number">8</span>,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= candidates.length &lt;= <span class="number">30</span></span><br><span class="line"><span class="number">1</span> &lt;= candidates[i] &lt;= <span class="number">200</span></span><br><span class="line">candidate 中的每个元素都是独一无二的。</span><br><span class="line"><span class="number">1</span> &lt;= target &lt;= <span class="number">500</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><h3 id="自己写的版本"><a class="header-anchor" href="#自己写的版本">¶</a>自己写的版本</h3><p>这一版我自己写的利用回溯法，本地测试用例都AC了，但是在提交的时候显示我[1],2这一测试用例输出的结果为[]，但是我在本机测试的结果却是正确的。</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/FD2nfl.png" alt="figure.1"></p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/zVWnkh.png" alt="figure.2"></p><p>没想明白裂开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    sort_result = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(self, target, candidates, temp)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> sum(temp) == target:</span><br><span class="line">            result.append(temp)</span><br><span class="line">            self.sort_result.append(sorted(temp))</span><br><span class="line">            <span class="comment">#print(temp)</span></span><br><span class="line">            <span class="keyword">return</span> self.backtrack(target,candidates,[]),result</span><br><span class="line">        <span class="keyword">if</span> target &lt; sum(temp):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(candidates)):</span><br><span class="line">            temp.append(candidates[i])</span><br><span class="line">            <span class="keyword">if</span> sorted(temp) <span class="keyword">in</span> self.sort_result:</span><br><span class="line">                temp.pop()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> self.backtrack(target,candidates,temp):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            temp.pop()</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type candidates: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                分析题目同样可以看出我们应该使用回溯法进行求解</span></span><br><span class="line"><span class="string">        回溯法的标准框架</span></span><br><span class="line"><span class="string">        def backtrack(path, selected):</span></span><br><span class="line"><span class="string">            if 满足停止条件：</span></span><br><span class="line"><span class="string">                res.append(path)</span></span><br><span class="line"><span class="string">            for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                做出选择</span></span><br><span class="line"><span class="string">                递归执行backtrack</span></span><br><span class="line"><span class="string">                    满足则return True</span></span><br><span class="line"><span class="string">                如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">global</span> result</span><br><span class="line">        result = []</span><br><span class="line">        self.backtrack(target,candidates,[])</span><br><span class="line">        <span class="comment">#print(result)</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.combinationSum(candidates = [<span class="number">1</span>], target = <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="AC的版本"><a class="header-anchor" href="#AC的版本">¶</a>AC的版本</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def combinationSum(self, candidate<span class="variable">s:</span> List[<span class="keyword">int</span>], targe<span class="variable">t:</span> <span class="keyword">int</span>) -&gt; List[List[<span class="keyword">int</span>]]:</span><br><span class="line">        candidates.<span class="keyword">sort</span>()</span><br><span class="line">        n = <span class="built_in">len</span>(candidates)</span><br><span class="line">        <span class="keyword">res</span> = []</span><br><span class="line">        def backtrack(i, tmp_sum, tmp):</span><br><span class="line">            <span class="keyword">if</span>  tmp_sum &gt; target <span class="built_in">or</span> i == n:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> tmp_sum == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">res</span>.<span class="keyword">append</span>(tmp)</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(i, n):</span><br><span class="line">                <span class="keyword">if</span> tmp_sum + candidates[<span class="keyword">j</span>] &gt; targe<span class="variable">t:</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                backtrack(<span class="keyword">j</span>,tmp_sum + candidates[<span class="keyword">j</span>],tmp+[candidates[<span class="keyword">j</span>]])</span><br><span class="line">        backtrack(<span class="number">0</span>, <span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">res</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十九题&lt;/h1&gt;
&lt;p&gt;好几天没写了，正过年休息了两天，今天把之前的补回来，新年快乐，牛年大吉奥。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.38</title>
    <link href="www.strivezs.com/2021/02/11/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/11/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-02-11T02:32:33.603Z</published>
    <updated>2021-02-11T02:32:33.603Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十八题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个正整数 n ，输出外观数列的第 n 项。</p><p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p><p>你可以将其视作是由递归公式定义的数字字符串序列：</p><p>countAndSay(1) = “1”<br>countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。<br>前五项如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>     <span class="number">1</span></span><br><span class="line"><span class="number">2.</span>     <span class="number">11</span></span><br><span class="line"><span class="number">3.</span>     <span class="number">21</span></span><br><span class="line"><span class="number">4.</span>     <span class="number">1211</span></span><br><span class="line"><span class="number">5.</span>     <span class="number">111221</span></span><br><span class="line">第一项是数字 <span class="number">1</span> </span><br><span class="line">描述前一项，这个数是 <span class="number">1</span> 即 “ 一 个 <span class="number">1</span> ”，记作 <span class="string">"11"</span></span><br><span class="line">描述前一项，这个数是 <span class="number">11</span> 即 “ 二 个 <span class="number">1</span> ” ，记作 <span class="string">"21"</span></span><br><span class="line">描述前一项，这个数是 <span class="number">21</span> 即 “ 一 个 <span class="number">2</span> + 一 个 <span class="number">1</span> ” ，记作 <span class="string">"1211"</span></span><br><span class="line">描述前一项，这个数是 <span class="number">1211</span> 即 “ 一 个 <span class="number">1</span> + 一 个 <span class="number">2</span> + 二 个 <span class="number">1</span> ” ，记作 <span class="string">"111221"</span></span><br></pre></td></tr></table></figure><p>要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</p><p>例如，数字字符串 “3322251” 的描述如下图：</p><p><img src="https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg" alt="figure.1"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="string">"1"</span></span><br><span class="line">解释：这是一个基本样例。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：<span class="string">"1211"</span></span><br><span class="line">解释：</span><br><span class="line">countAndSay(<span class="number">1</span>) = <span class="string">"1"</span></span><br><span class="line">countAndSay(<span class="number">2</span>) = 读 <span class="string">"1"</span> = 一 个 <span class="number">1</span> = <span class="string">"11"</span></span><br><span class="line">countAndSay(<span class="number">3</span>) = 读 <span class="string">"11"</span> = 二 个 <span class="number">1</span> = <span class="string">"21"</span></span><br><span class="line">countAndSay(<span class="number">4</span>) = 读 <span class="string">"21"</span> = 一 个 <span class="number">2</span> + 一 个 <span class="number">1</span> = <span class="string">"12"</span> + <span class="string">"11"</span> = <span class="string">"1211"</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        核心思想: 迭代思想，就是从头往后依次找到n相等的那种情况返回（重点是读懂题目）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> str(<span class="number">1</span>)</span><br><span class="line">        s = <span class="string">"1"</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            t = <span class="string">""</span></span><br><span class="line">            i, j = <span class="number">0</span>, len(s)</span><br><span class="line">            count = <span class="number">1</span> <span class="comment"># 统计相同个数</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">if</span> s[i] == s[i+<span class="number">1</span>]:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 重新统计</span></span><br><span class="line">                    t = t + str(count) + s[i]</span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">            s = t + str(count) + s[i]</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.countAndSay(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十八题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个正整数 n ，输出外观数列的第 n 项。&lt;/p&gt;
&lt;p&gt;「外观数列」是一个整数序列，从
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.37</title>
    <link href="www.strivezs.com/2021/02/11/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%83%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/11/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%83%E9%A2%98/</id>
    <published>2021-02-11T02:32:28.838Z</published>
    <updated>2021-02-11T02:32:28.838Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十七题</h1><p>今天三十了，新年快乐哈。</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>编写一个程序，通过填充空格来解决数独问题。</p><p>一个数独的解法需遵循如下规则：</p><p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。<br>空白格用 ‘.’ 表示。</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="figure.1"></p><p>一个数独。</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt="figure.2"></p><p>答案被标成红色。</p><p>提示：</p><p>给定的数独序列只包含数字 1-9 和字符 ‘.’ 。<br>你可以假设给定的数独只有唯一解。<br>给定数独永远是 9x9 形式的。</p><h2 id="回撤法"><a class="header-anchor" href="#回撤法">¶</a>回撤法</h2><p>回撤法标准框架:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(path, selected)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> 满足停止条件：</span><br><span class="line">        res.append(path)</span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表：</span><br><span class="line">        做出选择</span><br><span class="line">        递归执行backtrack</span><br><span class="line">            满足则<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        如果不满足要求就撤销选择</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 检查选择要填充的数字是否在一行/一列/九个格子里面出现</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self, board, row, col, c)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> board[row][i] == c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> board[i][col] == c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> board[(row//<span class="number">3</span>)*<span class="number">3</span> + i // <span class="number">3</span>][(col//<span class="number">3</span>)*<span class="number">3</span> + i % <span class="number">3</span>] == c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 回溯法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(self,board,i,j)</span>:</span></span><br><span class="line">        <span class="comment"># 停止条件</span></span><br><span class="line">        <span class="comment">## 一行访问完之后跳转到下一行</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">return</span> self.backtrack(board,i+<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="comment">## 所有行访问完之后，返回True</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment">## 如果不为.，则不用管,继续访问下一列</span></span><br><span class="line">        <span class="keyword">if</span> board[i][j] != <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.backtrack(board,i,j+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选择操作</span></span><br><span class="line">        <span class="comment">## 遍历选择列表，此处的选择是，给空白处填 "1" - "9" 中之一</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">            c = str(k)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.check(board, i, j, c):  <span class="comment"># 判断选择的字符是否满足要求（不与其他位置冲突）</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            board[i][j] = c  <span class="comment"># 做出选择</span></span><br><span class="line">            <span class="keyword">if</span> self.backtrack(board, i, j + <span class="number">1</span>):  <span class="comment"># 递归调用，直接return是因为只需要一个可行解，而不需要所有可行解</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            board[i][j] = <span class="string">'.'</span>  <span class="comment"># 撤销选择</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveSudoku</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        核心思想：采用回溯法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        回溯法的标准框架</span></span><br><span class="line"><span class="string">        def backtrack(path, selected):</span></span><br><span class="line"><span class="string">            if 满足停止条件：</span></span><br><span class="line"><span class="string">                res.append(path)</span></span><br><span class="line"><span class="string">            for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                做出选择</span></span><br><span class="line"><span class="string">                递归执行backtrack</span></span><br><span class="line"><span class="string">                    满足则return True</span></span><br><span class="line"><span class="string">                如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.backtrack(board,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.solveSudoku([[<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],[<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"5"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],[<span class="string">"."</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>],[<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"3"</span>],[<span class="string">"4"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>],[<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>],[<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"."</span>],[<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"4"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"5"</span>],[<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"9"</span>]]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十七题&lt;/h1&gt;
&lt;p&gt;今天三十了，新年快乐哈。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;编写一个程序，通过填充空格来解决数独问题。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.36</title>
    <link href="www.strivezs.com/2021/02/09/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/09/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-02-09T02:15:49.481Z</published>
    <updated>2021-02-09T02:15:49.481Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十六题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。</p><p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="figure.2"></p><p>上图是一个部分填充的有效的数独。</p><p>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">[<span class="meta"></span></span><br><span class="line"><span class="meta">  [<span class="meta-string">"5"</span>,<span class="meta-string">"3"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"7"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"1"</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"5"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"3"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"4"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"3"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"1"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"7"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"2"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"2"</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"4"</span>,<span class="meta-string">"1"</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"5"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"7"</span>,<span class="meta-string">"9"</span></span>]</span><br><span class="line">]</span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">[<span class="meta"></span></span><br><span class="line"><span class="meta">  [<span class="meta-string">"8"</span>,<span class="meta-string">"3"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"7"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"1"</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"5"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"3"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"4"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"3"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"1"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"7"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"2"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"6"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"6"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"2"</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"4"</span>,<span class="meta-string">"1"</span>,<span class="meta-string">"9"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"5"</span></span>],</span><br><span class="line">  [<span class="meta"><span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"8"</span>,<span class="meta-string">"."</span>,<span class="meta-string">"."</span>,<span class="meta-string">"7"</span>,<span class="meta-string">"9"</span></span>]</span><br><span class="line">]</span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line">解释: 除了第一行的第一个数字从 <span class="number">5</span> 改为 <span class="number">8</span> 以外，空格内其他数字均与 示例<span class="number">1</span> 相同。</span><br><span class="line">     但由于位于左上角的 <span class="number">3</span>x3 宫内有两个 <span class="number">8</span> 存在, 因此这个数独是无效的。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">一个有效的数独（部分已被填充）不一定是可解的。</span><br><span class="line">只需要根据以上规则，验证已经填入的数字是否有效即可。</span><br><span class="line">给定数独序列只包含数字 <span class="number">1</span><span class="number">-9</span> 和字符 <span class="string">'.'</span> 。</span><br><span class="line">给定数独永远是 <span class="number">9</span>x9 形式的。</span><br></pre></td></tr></table></figure><h2 id="思维导图"><a class="header-anchor" href="#思维导图">¶</a>思维导图</h2><p><img src="https://gitee.com/zyp521/upload_image/raw/master/%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC.png" alt="figure.1"></p><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                实际就是一个大模拟</span></span><br><span class="line"><span class="string">                分别进行如下判断如果有不满足的情况则结束判断，最坏时间复杂度情况就是判断全部情况</span></span><br><span class="line"><span class="string">                1. 判断每行</span></span><br><span class="line"><span class="string">                2. 判断每列</span></span><br><span class="line"><span class="string">                3. 判断每个格子</span></span><br><span class="line"><span class="string">                针对每行每列可以采用去掉所有"."然后set判断长度是否一致</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nums = list(str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">        <span class="comment"># dictList = dict(zip(nums,[0 for i in range(10)]))</span></span><br><span class="line">        <span class="comment"># print(dictList)</span></span><br><span class="line">        <span class="comment"># 判断每行</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            dictList = dict(zip(nums,[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">'.'</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dictList[board[i][j]] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> dictList[board[i][j]] &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断每列</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            dictList = dict(zip(nums,[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[j][i] == <span class="string">'.'</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dictList[board[j][i]] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> dictList[board[j][i]] &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断每个格子</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            dictList = dict(zip(nums, [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">            remainder = i % <span class="number">3</span> <span class="comment"># 余数</span></span><br><span class="line">            consult = int(i / <span class="number">3</span>) <span class="comment"># 商</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                    <span class="keyword">if</span> board[j+consult*<span class="number">3</span>][k+remainder*<span class="number">3</span>] == <span class="string">'.'</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    dictList[board[j+consult*<span class="number">3</span>][k+remainder*<span class="number">3</span>]] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> dictList[board[j+consult*<span class="number">3</span>][k+remainder*<span class="number">3</span>]] &gt;= <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.isValidSudoku([</span><br><span class="line">  [<span class="string">"5"</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"5"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"3"</span>],</span><br><span class="line">  [<span class="string">"4"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"3"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"1"</span>],</span><br><span class="line">  [<span class="string">"7"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"6"</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"6"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"2"</span>,<span class="string">"8"</span>,<span class="string">"."</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"4"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"5"</span>],</span><br><span class="line">  [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"8"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"7"</span>,<span class="string">"5"</span>]</span><br><span class="line">]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十六题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.35</title>
    <link href="www.strivezs.com/2021/02/07/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%94%E9%A2%98/"/>
    <id>www.strivezs.com/2021/02/07/LeetCode%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%94%E9%A2%98/</id>
    <published>2021-02-07T05:30:46.713Z</published>
    <updated>2021-02-07T05:30:46.713Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第三十五题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">5</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">2</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">7</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">示例 <span class="number">4</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">0</span></span><br><span class="line">输出: <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="思维导图"><a class="header-anchor" href="#思维导图">¶</a>思维导图</h2><p><img src="https://gitee.com/zyp521/upload_image/raw/master/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.png" alt="figure.1"></p><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    # 二分查找索引值</span><br><span class="line">    def binarySearch(self,nums,<span class="keyword">l</span>,r,target):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">l</span> &lt; r:</span><br><span class="line">            mid = <span class="keyword">int</span>((r+<span class="keyword">l</span>)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums,mid+<span class="number">1</span>,r,target)</span><br><span class="line">            elif nums[mid] &gt; targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums,<span class="keyword">l</span>,mid-<span class="number">1</span>,target)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        elif r == <span class="variable">l:</span></span><br><span class="line">            <span class="keyword">if</span> nums[r] == targe<span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">l</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">l</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">l</span></span><br><span class="line"></span><br><span class="line">    def searchInsert(self, nums, target):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> num<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :<span class="built_in">type</span> targe<span class="variable">t:</span> <span class="keyword">int</span></span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        核心思想:</span><br><span class="line">            使用二分法查找目标值，如果找到则返回索引值，如果没找到，则返回和它最接近数值的坐标（小于它的）</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="built_in">index</span> = self.binarySearch(nums,<span class="number">0</span>,<span class="built_in">len</span>(nums)-<span class="number">1</span>,target)</span><br><span class="line">        <span class="keyword">if</span> nums[<span class="built_in">index</span>] == targe<span class="variable">t:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">index</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">index</span> &gt;= <span class="keyword">int</span>(<span class="number">0</span>+<span class="built_in">len</span>(nums)-<span class="number">1</span>)/<span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> target &gt; nums[<span class="built_in">len</span>(nums)-<span class="number">1</span>]:</span><br><span class="line">                    <span class="built_in">index</span> = <span class="built_in">len</span>(nums)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[<span class="built_in">index</span>] &gt; targe<span class="variable">t:</span></span><br><span class="line">                    pass</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">index</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.searchInsert([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>],<span class="number">10</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第三十五题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>MAC+Anaconda+Scrapy安装以及简单使用</title>
    <link href="www.strivezs.com/2021/02/07/MAC+Anaconda+Scrapy%E5%AE%89%E8%A3%85.md/"/>
    <id>www.strivezs.com/2021/02/07/MAC+Anaconda+Scrapy%E5%AE%89%E8%A3%85.md/</id>
    <published>2021-02-07T04:48:15.944Z</published>
    <updated>2021-02-07T04:48:15.944Z</updated>
    
    <content type="html"><![CDATA[<h1>MAC+Anaconda+Scrapy安装</h1><h2 id="Scarpy"><a class="header-anchor" href="#Scarpy">¶</a>Scarpy</h2><p>Scrapy由 Python 编写的爬虫框架。如果你刚接触并且好奇这门语言的特性以及Scrapy的详情， 对于已经熟悉其他语言并且想快速学习Python的编程老手， 我们推荐 Learn Python The Hard Way ， 对于想从Python开始学习的编程新手， <a href="http://wiki.python.org/moin/BeginnersGuide/NonProgrammers">非程序员的Python学习资料列表</a>。</p><h2 id="创建新的虚拟环境"><a class="header-anchor" href="#创建新的虚拟环境">¶</a>创建新的虚拟环境</h2><p>首先在Anaconda上使用如下命令创建新的虚拟环境。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建环境:</span><br><span class="line">conda <span class="keyword">create</span> -n env<span class="string">'name python==python版本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">激活环境:</span></span><br><span class="line"><span class="string">conda actiavte env'</span><span class="type">name</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a class="header-anchor" href="#安装">¶</a>安装</h2><p>在终端输入如下命令进行安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> scrapy</span><br></pre></td></tr></table></figure><h2 id="入门"><a class="header-anchor" href="#入门">¶</a>入门</h2><p>思维导图:</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/Scrapy%E5%85%A5%E9%97%A8.png" alt="figure.1"></p><h3 id="创建项目"><a class="header-anchor" href="#创建项目">¶</a>创建项目</h3><p>使用如下命令创建一个Scrapy项目，其中tutorial为项目名称（事先使用命令行进入你想要创建项目的目录下）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scarpy startproject tutorial</span></span><br></pre></td></tr></table></figure><p>创建的项目结构为:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tutorial/</span><br><span class="line">    scrapy.cfg</span><br><span class="line">    tutorial/</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py</span><br><span class="line">        pipelines.py</span><br><span class="line">        settings.py</span><br><span class="line">        spiders/</span><br><span class="line">            __init__.py</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>这些文件分别是:</p><ul><li>scrapy.cfg: 项目的配置文件</li><li>tutorial/: 该项目的python模块。之后您将在此加入代码。</li><li>tutorial/items.py: 项目中的item文件.</li><li>tutorial/pipelines.py: 项目中的pipelines文件.</li><li>tutorial/settings.py: 项目的设置文件.</li><li>tutorial/spiders/: 放置spider代码的目录</li></ul><h3 id="定义Item"><a class="header-anchor" href="#定义Item">¶</a>定义Item</h3><p>这里的Item是用来存储爬虫爬取到的数据的容器，它的使用方法和python的字典机制十分相似，并且它提供了额外的保护机制来避免拼写错误导致的未定义名称报错。</p><p>类似Java/C++中的类继承机制一样，你可以编写一个scrapy.item类，该类继承scrapy.Item，通过定义一个类型为 <strong>scrapy.Field</strong> 的类属性来定义一个Item。</p><p>在创建这个Item之前，我们需要对需要爬取的数据进行建模，在完成建模之后，在Item中定义响应的字段，即编写tutorial目录中的items.py文件：</p><p>例子(这里以爬取百度图片):</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">DmozItem</span>(<span class="title">scrapy</span>.<span class="type">Item</span>):</span></span><br><span class="line"><span class="class">    title = scrapy.<span class="type">Field</span>()</span></span><br><span class="line"><span class="class">    link = scrapy.<span class="type">Field</span>()</span></span><br><span class="line"><span class="class">    desc = scrapy.<span class="type">Field</span>()</span></span><br></pre></td></tr></table></figure><h3 id="编写爬虫例子"><a class="header-anchor" href="#编写爬虫例子">¶</a>编写爬虫例子</h3><p>Spider(爬虫)是用户编写用于从单个网站或者一些网站爬取数据的类。</p><p>其中包含了一个用于下载的初始URL，如何跟进网页中的连接以及如何分析页面中的内容，提取生成item的方法。</p><p>为了创建一个Spider，您必须继承 scrapy.Spider 类， 且定义以下三个属性:</p><ul><li>name: 用于区别Spider。 该名字必须是唯一的，不可以为不同的Spider设定相同的名字。</li><li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li><li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li></ul><p>Spider示例:创建一个spider文件放在tutorial/spiders文件目录下，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        filename = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zyp521/upload_image/raw/master/Rz97TH.png" alt="figure.2"></p><p>刚才发生的过程为：Scrapy为Spider的 start_urls 属性中的每个URL创建了 scrapy.Request 对象，并将 parse 方法作为回调函数(callback)赋值给了Request。</p><p>Request对象经过调度，执行生成 scrapy.http.Response 对象并送回给spider parse() 方法。</p><h4 id="提取数据"><a class="header-anchor" href="#提取数据">¶</a>提取数据</h4><p>Scrapy提取数据有自己的一套机制。它们被称作选择器(seletors)，因为他们通过特定的 XPath 或者 CSS 表达式来“选择” HTML文件中的某个部分。有关selectors的使用暂时先跳过，放在后面进行学习。<br>先使用如下代码进行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">'//ul/li'</span>):</span><br><span class="line">            title = sel.xpath(<span class="string">'a/text()'</span>).extract()</span><br><span class="line">            link = sel.xpath(<span class="string">'a/@href'</span>).extract()</span><br><span class="line">            desc = sel.xpath(<span class="string">'text()'</span>).extract()</span><br><span class="line">            print(title, link, desc)</span><br></pre></td></tr></table></figure><h4 id="使用Item存储提取的数据"><a class="header-anchor" href="#使用Item存储提取的数据">¶</a>使用Item存储提取的数据</h4><p>Item对象是我们在Item.py文件中创建的类，我们通过创建一个/多个对象来存储我们提取得到的数据，通过字典的方式来访问每个属性，然后对每个属性进行赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapyProject.items <span class="keyword">import</span> ScrapyprojectItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">'//ul/li'</span>):</span><br><span class="line">            item = ScrapyprojectItem()</span><br><span class="line">            item[<span class="string">'title'</span>] = sel.xpath(<span class="string">'a/text()'</span>).extract()</span><br><span class="line">            item[<span class="string">'link'</span>] = sel.xpath(<span class="string">'a/@href'</span>).extract()</span><br><span class="line">            item[<span class="string">'desc'</span>] = sel.xpath(<span class="string">'text()'</span>).extract()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h3 id="保存爬取到的数据"><a class="header-anchor" href="#保存爬取到的数据">¶</a>保存爬取到的数据</h3><p>最简单存储爬取的数据的方式是使用 Feed exports:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scrapy</span> <span class="selector-tag">crawl</span> <span class="selector-tag">dmoz</span> <span class="selector-tag">-o</span> <span class="selector-tag">items</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure><p>该命令将采用 JSON 格式对爬取的数据进行序列化，生成 items.json 文件。</p><p>在类似本篇教程里这样小规模的项目中，这种存储方式已经足够。 如果需要对爬取到的item做更多更为复杂的操作，您可以编写 Item Pipeline 。 类似于我们在创建项目时对Item做的，用于您编写自己的 tutorial/pipelines.py 也被创建。 不过如果您仅仅想要保存item，您不需要实现任何的pipeline。</p><h3 id="问题记录"><a class="header-anchor" href="#问题记录">¶</a>问题记录</h3><ol><li>报错：ModuleNotFoundError: No module named ‘protego’<br>使用conda 安装protego包即可解决。</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="keyword">install</span> protego</span><br></pre></td></tr></table></figure><ol start="2"><li>失败说明<br>由于链接我尝试自己访问了一下发现无法访问了，应该是国外网站（墙的问题），暂时还没学xpath相关的知识，因此打算在之后尝试一下国内的网站使用。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;MAC+Anaconda+Scrapy安装&lt;/h1&gt;
&lt;h2 id=&quot;Scarpy&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Scarpy&quot;&gt;¶&lt;/a&gt;Scarpy&lt;/h2&gt;
&lt;p&gt;Scrapy由 Python 编写的爬虫框架。如果你刚接触并且好奇
      
    
    </summary>
    
    
      <category term="MAC" scheme="www.strivezs.com/categories/MAC/"/>
    
      <category term="Anaconda" scheme="www.strivezs.com/categories/MAC/Anaconda/"/>
    
      <category term="Scrapy" scheme="www.strivezs.com/categories/MAC/Anaconda/Scrapy/"/>
    
    
      <category term="Anaconda" scheme="www.strivezs.com/tags/Anaconda/"/>
    
      <category term="Python" scheme="www.strivezs.com/tags/Python/"/>
    
      <category term="MAC" scheme="www.strivezs.com/tags/MAC/"/>
    
      <category term="Scrapy" scheme="www.strivezs.com/tags/Scrapy/"/>
    
  </entry>
  
</feed>
