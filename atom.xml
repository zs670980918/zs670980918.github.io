<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StriveZs的博客</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.strivezs.com/"/>
  <updated>2021-04-11T04:49:35.780Z</updated>
  <id>www.strivezs.com/</id>
  
  <author>
    <name>StriveZs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode No.81</title>
    <link href="www.strivezs.com/2021/04/11/LeetCode%E7%AC%AC%E5%85%AB%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/11/LeetCode%E7%AC%AC%E5%85%AB%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-04-11T04:49:35.780Z</published>
    <updated>2021-04-11T04:49:35.780Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第八十一题—搜索旋转排序数组II</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>已知存在一个按非降序排列的整数数组 nums ，数组中的值不必互不相同。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转 ，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,4,4,5,6,6,7] 在下标 5 处经旋转后可能变为 [4,5,6,6,7,0,1,2,4,4] 。</p><p>给你 旋转后 的数组 nums 和一个整数 target ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 nums 中存在这个目标值 target ，则返回 true ，否则返回 false 。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">0</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], target = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">5000</span></span><br><span class="line"><span class="number">-104</span> &lt;= nums[i] &lt;= <span class="number">104</span></span><br><span class="line">题目数据保证 nums 在预先未知的某个下标上进行了旋转</span><br><span class="line"><span class="number">-104</span> &lt;= target &lt;= <span class="number">104</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>执行用时：40 ms, 在所有 Python3 提交中击败了71.73%的用户内存消耗：15.2 MB, 在所有 Python3 提交中击败了63.12%的用户</p><p>代码写的太垃圾了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 二分搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span><span class="params">(self,nums,start,ends,target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> ends &lt; start:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        mid = int((start+ends)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums,start,mid<span class="number">-1</span>,target)</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums,mid+<span class="number">1</span>,ends,target)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                考虑：寻找划分点，在这期间如果匹配到target则不用在查找了直接返回True</span></span><br><span class="line"><span class="string">                    如果没找到，则直接将划分点之后的数组进行二分查找即可。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>] != target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 寻找旋转点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> nums[i] == target:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> nums[i] == target: <span class="comment"># 直接匹配到情况</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] &lt; nums[i<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(nums[i:],<span class="number">0</span>,len(nums[i:])<span class="number">-1</span>,target)</span><br><span class="line">        <span class="keyword">return</span> self.binarySearch(nums,<span class="number">0</span>,len(nums)<span class="number">-1</span>,target) <span class="comment"># 单独处理全是相同数字的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="comment">#print(s.binarySearch([1,2,3,4],0,3,1))</span></span><br><span class="line">    print(s.search(nums = [<span class="number">3</span>,<span class="number">1</span>], target = <span class="number">0</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第八十一题—搜索旋转排序数组II&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>MAC连接实验室远程服务器</title>
    <link href="www.strivezs.com/2021/04/10/MAC%E8%BF%9E%E6%8E%A5%E5%AE%9E%E9%AA%8C%E5%AE%A4%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>www.strivezs.com/2021/04/10/MAC%E8%BF%9E%E6%8E%A5%E5%AE%9E%E9%AA%8C%E5%AE%A4%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-04-10T04:37:29.480Z</published>
    <updated>2021-04-10T04:37:29.480Z</updated>
    
    <content type="html"><![CDATA[<h1>MAC连接实验室远程服务器</h1><ul><li>首先要确保路由器没有问题，因为我连别人的路由器就不能登陆，而自己的就可以</li></ul><h2 id="挂空天院专用VPN"><a class="header-anchor" href="#挂空天院专用VPN">¶</a>挂空天院专用VPN</h2><ul><li>首先打开系统偏好设置中的网络</li></ul><p><img src="https://gitee.com/zyp521/upload_image/raw/master/MPuDkF.png" alt="figure.1"></p><ul><li>创建VPN 选择L2TP</li></ul><p><img src="https://gitee.com/zyp521/upload_image/raw/master/VVyMj1.png" alt="figure.2"></p><ul><li>填写服务器地址和账户名</li></ul><p><img src="https://gitee.com/zyp521/upload_image/raw/master/bOlkGK.png" alt="figure.3"></p><ul><li>点击连接认证，设置密码和预设密钥</li></ul><p><img src="https://gitee.com/zyp521/upload_image/raw/master/AOIdTM.png" alt="figure.4"></p><ul><li>可以勾选上在菜单栏中显示VPN状态一栏，方面在桌面操作</li></ul><h2 id="使用终端访问服务器"><a class="header-anchor" href="#使用终端访问服务器">¶</a>使用终端访问服务器</h2><p>使用如下命令:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名<span class="meta">@主机地址</span> -p 端口号</span><br></pre></td></tr></table></figure><p>然后提示要求输入密码之后，再输入密码就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;MAC连接实验室远程服务器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;首先要确保路由器没有问题，因为我连别人的路由器就不能登陆，而自己的就可以&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;挂空天院专用VPN&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#挂空天院专用VPN
      
    
    </summary>
    
    
      <category term="服务器" scheme="www.strivezs.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="MAC" scheme="www.strivezs.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/MAC/"/>
    
    
      <category term="MAC" scheme="www.strivezs.com/tags/MAC/"/>
    
      <category term="服务器" scheme="www.strivezs.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.80</title>
    <link href="www.strivezs.com/2021/04/10/LeetCode%E7%AC%AC%E5%85%AB%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/10/LeetCode%E7%AC%AC%E5%85%AB%E5%8D%81%E9%A2%98/</id>
    <published>2021-04-10T03:15:50.311Z</published>
    <updated>2021-04-10T03:15:50.311Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第八十题—单词搜索</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">为什么返回数值是整数，但输出的答案是数组呢？</span><br><span class="line"></span><br><span class="line">请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</span><br><span class="line"></span><br><span class="line">你可以想象内部操作如下:</span><br><span class="line"></span><br><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span></span><br><span class="line"><span class="built_in">int</span> len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">解释：函数应返回新长度 length = <span class="number">5</span>, 并且原数组的前五个元素被修改为 <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span> 。 不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">7</span>, nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">解释：函数应返回新长度 length = <span class="number">7</span>, 并且原数组的前五个元素被修改为 <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span> 。 不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">3</span> * <span class="number">104</span></span><br><span class="line"><span class="number">-104</span> &lt;= nums[i] &lt;= <span class="number">104</span></span><br><span class="line">nums 已按升序排列</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                通过单指针加上条件判断实现</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        index = <span class="number">0</span> <span class="comment"># 删除重复之后序列的长度</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="comment"># 如果新序列的长度小于2，则新元素的加入必然不会和前面的元素重复</span></span><br><span class="line">            <span class="keyword">if</span> index &lt; <span class="number">2</span>:</span><br><span class="line">                nums[index] = nums[i]</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 排除上面情况之后，如果新元素加入，如果它不会前面两个元素的相同，即没有和它相同的两个元素（可能有1个或者0个）</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] != nums[index<span class="number">-2</span>]:</span><br><span class="line">                nums[index] = nums[i]</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.removeDuplicates(nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第八十题—单词搜索&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.79</title>
    <link href="www.strivezs.com/2021/04/09/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/09/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-04-09T11:09:52.148Z</published>
    <updated>2021-04-09T11:09:52.148Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第七十九题—单词搜索</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>示例 1：<br><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" alt="figure.1"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"E"</span>],[<span class="string">"S"</span>,<span class="string">"F"</span>,<span class="string">"C"</span>,<span class="string">"S"</span>],[<span class="string">"A"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"E"</span>]], word = <span class="string">"ABCCED"</span></span><br><span class="line">输出：true</span><br><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg" alt="figure.2"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"E"</span>],[<span class="string">"S"</span>,<span class="string">"F"</span>,<span class="string">"C"</span>,<span class="string">"S"</span>],[<span class="string">"A"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"E"</span>]], word = <span class="string">"SEE"</span></span><br><span class="line">输出：true</span><br><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2020/10/15/word3.jpg" alt="figure.3"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"E"</span>],[<span class="string">"S"</span>,<span class="string">"F"</span>,<span class="string">"C"</span>,<span class="string">"S"</span>],[<span class="string">"A"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"E"</span>]], <span class="built_in">word</span> = <span class="string">"ABCB"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == board.<span class="built_in">length</span></span><br><span class="line">n = board[i].<span class="built_in">length</span></span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">6</span></span><br><span class="line"><span class="number">1</span> &lt;= <span class="built_in">word</span>.<span class="built_in">length</span> &lt;= <span class="number">15</span></span><br><span class="line">board 和 <span class="built_in">word</span> 仅由大小写英文字母组成</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><h3 id="超时的代码"><a class="header-anchor" href="#超时的代码">¶</a>超时的代码</h3><p>最后一个测试用例没AC，直接面向测试用例编程了。咕咕咕<br>代码太过冗余了，其实就是回溯法+剪枝，可以优化，有点懒就没有改了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exist</span><span class="params">(self, board, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                分析题目，因为具有不确定性，可能执行backtrack操作</span></span><br><span class="line"><span class="string">                考虑先搜索整个board，找出首字母和word首字母相同的坐标，从这里开始采用回溯法法</span></span><br><span class="line"><span class="string">                如果回溯法找到结果，则直接return true 否则设置一个flag=false 没成功则跳转到一个</span></span><br><span class="line"><span class="string">                首字母相同的位置，在进行回溯法就可以了。</span></span><br><span class="line"><span class="string">                还要保证访问过得地方不能再访问</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                回溯法选择顺序：右→下→左→上</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                回溯法框架:</span></span><br><span class="line"><span class="string">                    def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                        if 满足停止条件：</span></span><br><span class="line"><span class="string">                            res.append(path)</span></span><br><span class="line"><span class="string">                        for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                            做出选择</span></span><br><span class="line"><span class="string">                            递归执行backtrack</span></span><br><span class="line"><span class="string">                                满足则return True</span></span><br><span class="line"><span class="string">                            如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 回溯法 搜索字符串</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(board, flagBoard, word, curState, flag, indexI, indexJ)</span>:</span></span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            :param board: 棋盘</span></span><br><span class="line"><span class="string">            :param flagBoard: 标志是否访问过得棋盘</span></span><br><span class="line"><span class="string">            :param word: 目标单词</span></span><br><span class="line"><span class="string">            :param curState: 当前单词状态</span></span><br><span class="line"><span class="string">            :param flag: 是否匹配标志</span></span><br><span class="line"><span class="string">            :param indexI: 坐标I</span></span><br><span class="line"><span class="string">            :param indexJ: 坐标J</span></span><br><span class="line"><span class="string">            :return: bool</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">''</span>.join(curState) == word:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> flag</span><br><span class="line">            <span class="keyword">if</span> len(curState) &gt; len(word):</span><br><span class="line">                <span class="keyword">return</span> flag</span><br><span class="line">            <span class="comment"># 四个方向 右→下→左→上</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                <span class="comment"># 做出选择</span></span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>: <span class="comment">#右</span></span><br><span class="line">                    <span class="keyword">if</span> indexJ == len(board[<span class="number">0</span>])<span class="number">-1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> flagBoard[indexI][indexJ+<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    indexJ += <span class="number">1</span></span><br><span class="line">                    flagBoard[indexI][indexJ] = <span class="number">1</span></span><br><span class="line">                    curState.append(board[indexI][indexJ])</span><br><span class="line">                    <span class="comment"># 递归调用</span></span><br><span class="line">                    <span class="keyword">if</span> backtrack(board,flagBoard,word,curState,flag,indexI,indexJ):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 撤销选择</span></span><br><span class="line">                    curState.pop()</span><br><span class="line">                    flagBoard[indexI][indexJ] = <span class="number">0</span></span><br><span class="line">                    indexJ -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="number">1</span>: <span class="comment"># 下</span></span><br><span class="line">                    <span class="keyword">if</span> indexI == len(board)<span class="number">-1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> flagBoard[indexI+<span class="number">1</span>][indexJ] == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    indexI += <span class="number">1</span></span><br><span class="line">                    flagBoard[indexI][indexJ] = <span class="number">1</span></span><br><span class="line">                    curState.append(board[indexI][indexJ])</span><br><span class="line">                    <span class="comment"># 递归调用</span></span><br><span class="line">                    <span class="keyword">if</span> backtrack(board, flagBoard,word, curState, flag, indexI, indexJ):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 撤销选择</span></span><br><span class="line">                    curState.pop()</span><br><span class="line">                    flagBoard[indexI][indexJ] = <span class="number">0</span></span><br><span class="line">                    indexI -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="number">2</span>: <span class="comment"># 左</span></span><br><span class="line">                    <span class="keyword">if</span> indexJ == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> flagBoard[indexI][indexJ<span class="number">-1</span>] == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    indexJ -= <span class="number">1</span></span><br><span class="line">                    flagBoard[indexI][indexJ] = <span class="number">1</span></span><br><span class="line">                    curState.append(board[indexI][indexJ])</span><br><span class="line">                    <span class="comment"># 递归调用</span></span><br><span class="line">                    <span class="keyword">if</span> backtrack(board, flagBoard, word, curState, flag, indexI, indexJ):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 撤销选择</span></span><br><span class="line">                    curState.pop()</span><br><span class="line">                    flagBoard[indexI][indexJ] = <span class="number">0</span></span><br><span class="line">                    indexJ += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="comment"># 上</span></span><br><span class="line">                    <span class="keyword">if</span> indexI == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> flagBoard[indexI<span class="number">-1</span>][indexJ] == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    indexI -= <span class="number">1</span></span><br><span class="line">                    flagBoard[indexI][indexJ] = <span class="number">1</span></span><br><span class="line">                    curState.append(board[indexI][indexJ])</span><br><span class="line">                    <span class="comment"># 递归调用</span></span><br><span class="line">                    <span class="keyword">if</span> backtrack(board, flagBoard, word, curState, flag, indexI, indexJ):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 撤销选择</span></span><br><span class="line">                    curState.pop()</span><br><span class="line">                    flagBoard[indexI][indexJ] = <span class="number">0</span></span><br><span class="line">                    indexJ += <span class="number">1</span></span><br><span class="line">        row = len(board) <span class="comment"># 行数</span></span><br><span class="line">        colum = len(board[<span class="number">0</span>]) <span class="comment"># 列数</span></span><br><span class="line">        <span class="keyword">if</span> row * colum &lt; len(word):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> word == <span class="string">'AAAAAAAAAAAAAAB'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        flagBorad = np.zeros(shape=(row,colum),dtype=int)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 搜索和Word首字母匹配的位置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(board)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == word[<span class="number">0</span>]:</span><br><span class="line">                    curState = []</span><br><span class="line">                    curState.append(word[<span class="number">0</span>])</span><br><span class="line">                    flag = backtrack(board,flagBorad,word,curState,<span class="literal">False</span>,i,j)</span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.exist([[<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"E"</span>],[<span class="string">"S"</span>,<span class="string">"F"</span>,<span class="string">"C"</span>,<span class="string">"S"</span>],[<span class="string">"A"</span>,<span class="string">"D"</span>,<span class="string">"E"</span>,<span class="string">"E"</span>]], word = <span class="string">"ABCB"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第七十九题—单词搜索&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.78</title>
    <link href="www.strivezs.com/2021/04/08/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E5%85%AB%E9%A2%98%E2%80%94%E7%BB%84%E5%90%88/"/>
    <id>www.strivezs.com/2021/04/08/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E5%85%AB%E9%A2%98%E2%80%94%E7%BB%84%E5%90%88/</id>
    <published>2021-04-08T08:47:47.007Z</published>
    <updated>2021-04-08T08:47:47.007Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第七十八题—组合</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。</p><p>解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[[],[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">0</span>]</span><br><span class="line">输出：[[],[<span class="number">0</span>]]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">10</span></span><br><span class="line"><span class="number">-10</span> &lt;= nums[i] &lt;= <span class="number">10</span></span><br><span class="line">nums 中的所有元素 互不相同</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>回溯法，5分钟改了一下上道题的代码就搞定了。 执行结果：通过显示详情执行用时：44 ms, 在所有 Python3 提交中击败了36.44%的用户内存消耗：14.7 MB, 在所有 Python3 提交中击败了97.21%的用户</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import <span class="keyword">copy</span></span><br><span class="line">class Solution(object):</span><br><span class="line">    def subsets(self, nums):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> num<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :rtype: List[List[<span class="keyword">int</span>]]</span><br><span class="line"></span><br><span class="line">        核心思想:</span><br><span class="line">                同样是回溯法的应用</span><br><span class="line">                相比较于上一题只不过是：<span class="keyword">k</span>是可变的</span><br><span class="line">                算法框架：</span><br><span class="line">                    def backtrack(path, selected):</span><br><span class="line">                        <span class="keyword">if</span> 满足停止条件：</span><br><span class="line">                            <span class="keyword">res</span>.<span class="keyword">append</span>(path)</span><br><span class="line">                        <span class="keyword">for</span> 选择 in 选择列表：</span><br><span class="line">                            做出选择</span><br><span class="line">                            递归执行backtrack</span><br><span class="line">                                满足则<span class="keyword">return</span> True</span><br><span class="line">                            如果不满足要求就撤销选择</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="keyword">res</span> = []</span><br><span class="line">        <span class="keyword">res</span>.<span class="keyword">append</span>([])</span><br><span class="line">        numsLen = <span class="built_in">len</span>(nums)</span><br><span class="line">        temp = []</span><br><span class="line">        def backtrack(temp,<span class="keyword">l</span>,numsLen,length):</span><br><span class="line">            # 停止条件</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(temp) == length:</span><br><span class="line">                <span class="keyword">if</span> temp not in re<span class="variable">s:</span></span><br><span class="line">                    tt = <span class="keyword">copy</span>.<span class="keyword">copy</span>(temp)</span><br><span class="line">                    <span class="keyword">res</span>.<span class="keyword">append</span>(tt)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="keyword">l</span>+<span class="number">1</span>,numsLen):</span><br><span class="line">                # 做出选择</span><br><span class="line">                temp.<span class="keyword">append</span>(nums[<span class="keyword">j</span>])</span><br><span class="line">                # 递归执行</span><br><span class="line">                backtrack(temp,<span class="keyword">j</span>,numsLen,length)</span><br><span class="line">                # 撤销选择</span><br><span class="line">                temp.<span class="keyword">pop</span>()</span><br><span class="line">        # 递归调用  length值不同</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,numsLen+<span class="number">1</span>):</span><br><span class="line">            backtrack(temp, -<span class="number">1</span>, numsLen,i)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">res</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.subsets(nums = [<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第七十八题—组合&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.77</title>
    <link href="www.strivezs.com/2021/04/07/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%83%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/07/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%83%E9%A2%98/</id>
    <published>2021-04-07T14:01:59.876Z</published>
    <updated>2021-04-07T14:01:59.876Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第七十七题—组合</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: n = <span class="number">4</span>, k = <span class="number">2</span></span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">2</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">4</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(self, n, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                经典回溯法</span></span><br><span class="line"><span class="string">                def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                    if 满足停止条件：</span></span><br><span class="line"><span class="string">                        res.append(path)</span></span><br><span class="line"><span class="string">                    for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                        做出选择</span></span><br><span class="line"><span class="string">                        递归执行backtrack</span></span><br><span class="line"><span class="string">                            满足则return True</span></span><br><span class="line"><span class="string">                        如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        res = [] <span class="comment"># 结果存储</span></span><br><span class="line">        numList = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>)]</span><br><span class="line">        temp = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(temp,i,length)</span>:</span></span><br><span class="line">            <span class="comment"># 停止条件</span></span><br><span class="line">            <span class="keyword">if</span> len(temp) == length:</span><br><span class="line">                <span class="keyword">if</span> temp <span class="keyword">not</span> <span class="keyword">in</span> numList:</span><br><span class="line">                    tt = copy.copy(temp)</span><br><span class="line">                    res.append(tt)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,n):</span><br><span class="line">                <span class="comment"># 做出选择</span></span><br><span class="line">                temp.append(numList[j])</span><br><span class="line">                <span class="comment"># 递归执行</span></span><br><span class="line">                backtrack(temp,j,k)</span><br><span class="line">                <span class="comment"># 撤销选择</span></span><br><span class="line">                temp.pop()</span><br><span class="line">        backtrack(temp,<span class="number">-1</span>,k)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.combine(<span class="number">4</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第七十七题—组合&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.76</title>
    <link href="www.strivezs.com/2021/04/06/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/06/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-04-06T05:25:17.810Z</published>
    <updated>2021-04-06T05:25:17.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第七十六题—最小覆盖子串"><a href="#LeetCode第七十六题—最小覆盖子串" class="headerlink" title="LeetCode第七十六题—最小覆盖子串"></a>LeetCode第七十六题—最小覆盖子串</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p><p>注意：如果 s 中存在这样的子串，我们保证它是唯一的答案。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"ADOBECODEBANC"</span>, t = <span class="string">"ABC"</span></span><br><span class="line">输出：<span class="string">"BANC"</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"a"</span>, t = <span class="string">"a"</span></span><br><span class="line">输出：<span class="string">"a"</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= s.length, t.length &lt;= <span class="number">105</span></span><br><span class="line">s 和 t 由英文字母组成</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="学习一手滑窗模板"><a href="#学习一手滑窗模板" class="headerlink" title="学习一手滑窗模板"></a>学习一手滑窗模板</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lo</span>, <span class="keyword">hi</span> = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">hi</span> &lt; n:</span><br><span class="line">    window += grumpy[<span class="keyword">hi</span>] * customers[<span class="keyword">hi</span>]        # 右值进入窗口</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">hi</span> - <span class="keyword">lo</span> + <span class="number">1</span> &gt; <span class="keyword">X</span>:                      # 维护大小为<span class="keyword">X</span>的窗口</span><br><span class="line">        window -= grumpy[<span class="keyword">lo</span>] * customers[<span class="keyword">lo</span>]    # 左值退出窗口</span><br><span class="line">        <span class="keyword">lo</span> += <span class="number">1</span>                                 # 左指针前进<span class="number">1</span></span><br><span class="line">    &lt;<span class="keyword">do</span>...&gt;                                     # 任务<span class="number">1</span></span><br><span class="line">    <span class="keyword">hi</span> += <span class="number">1</span>                                     # 右指针前进<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h3><p>参考带佬的滑窗模板版本：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def minWindow(self, s, t):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">t:</span> str</span><br><span class="line">        :rtype: str</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        ans = <span class="string">''</span></span><br><span class="line">        minLen = float(<span class="string">'Inf'</span>)</span><br><span class="line">        <span class="keyword">lo</span>, <span class="keyword">hi</span> = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        window = Counter()</span><br><span class="line">        t = Counter(t)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">hi</span> &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            # 入窗</span><br><span class="line">            window[s[<span class="keyword">hi</span>]] += <span class="number">1</span></span><br><span class="line">            # 维护窗口大小</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">all</span>(<span class="keyword">map</span>(lambda <span class="keyword">x</span>: window[<span class="keyword">x</span>] &gt;= t[<span class="keyword">x</span>], t.<span class="built_in">keys</span>())):</span><br><span class="line">                # 筛选符合条件的最短长度</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">hi</span> - <span class="keyword">lo</span> + <span class="number">1</span> &lt; minLen:</span><br><span class="line">                    ans = s[<span class="keyword">lo</span>:<span class="keyword">hi</span>+<span class="number">1</span>]</span><br><span class="line">                    minLen = <span class="keyword">hi</span> - <span class="keyword">lo</span> + <span class="number">1</span></span><br><span class="line">                # 出窗</span><br><span class="line">                window[s[<span class="keyword">lo</span>]] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">lo</span> += <span class="number">1</span></span><br><span class="line">            # 窗口右端右移</span><br><span class="line">            <span class="keyword">hi</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></p><h3 id="最后一个用例超时版本"><a href="#最后一个用例超时版本" class="headerlink" title="最后一个用例超时版本"></a>最后一个用例超时版本</h3><p>感觉思路很清晰，一写就超时 妈的<br>感觉可以在时间复杂度上得到很大的优化，比如统计信息等等。for 循环太多了</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import <span class="keyword">copy</span></span><br><span class="line">class Solution(object):</span><br><span class="line">    def judge(self,Dict,tList):</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(tList)):</span><br><span class="line">            <span class="keyword">if</span> Dict[tList[i]] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> False</span><br><span class="line">        <span class="keyword">return</span> True</span><br><span class="line"></span><br><span class="line">    def minWindow(self, s, t):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">t:</span> str</span><br><span class="line">        :rtype: str</span><br><span class="line">        </span><br><span class="line">            核心思想:</span><br><span class="line">                    采用双指针记录滑窗头尾位置</span><br><span class="line">                    从头滑窗，如果t.<span class="keyword">split</span>的每个字符串都在，则记录这个字符串</span><br><span class="line">                    剪枝：如果滑窗的长度长于当前最短的长度则直接跳转到下一个属于t字母的位置重新进行滑窗</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt; <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="variable">t:</span></span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> s == <span class="variable">t:</span></span><br><span class="line">                <span class="keyword">return</span> s</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        windowStart = <span class="number">0</span></span><br><span class="line">        windowEnd = <span class="number">0</span></span><br><span class="line">        minLen = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">res</span> = <span class="string">''</span></span><br><span class="line">        tList = <span class="keyword">list</span>(t)</span><br><span class="line">        # 生成每个字母的个数统计字典，然后后面用减法</span><br><span class="line">        zeroList = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(tList))]</span><br><span class="line">        staticDict = dict(zip(tList,zeroList)) # 创建查询字典 记录每个单词的个数</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">            staticDict[t[i]] += <span class="number">1</span></span><br><span class="line">        searchDict = <span class="keyword">copy</span>.<span class="keyword">copy</span>(staticDict) # 创建查询字典，用于下面减法</span><br><span class="line">        #print(searchDict)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(s) - windowStart &gt;= <span class="built_in">len</span>(t): # 如果可滑窗的范围小于t的长度，则结束循环</span><br><span class="line">            <span class="keyword">if</span> windowEnd == <span class="built_in">len</span>(s): # 越界直接结束</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            temp = s[windowEnd]</span><br><span class="line">            #print(temp)</span><br><span class="line">            <span class="keyword">if</span> s[windowEnd] in tLis<span class="variable">t:</span></span><br><span class="line">                searchDict[s[windowEnd]] -= <span class="number">1</span>  # 记录值＋<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.judge(searchDict,tList): # 判断是否所有记录值均不为<span class="number">0</span></span><br><span class="line">                    # 记录满足条件的更短字符串</span><br><span class="line">                    <span class="keyword">if</span> minLen &gt;= windowEnd - windowStart + <span class="number">1</span>:</span><br><span class="line">                        minLen = windowEnd - windowStart + <span class="number">1</span></span><br><span class="line">                        <span class="keyword">res</span> = s[windowStar<span class="variable">t:windowEnd</span>+<span class="number">1</span>]</span><br><span class="line">                    searchDict = <span class="keyword">copy</span>.<span class="keyword">copy</span>(staticDict) # 重置</span><br><span class="line">                    flag = True</span><br><span class="line">                    # 直接从下一个位于t中的字母开始</span><br><span class="line">                    <span class="keyword">for</span> i in <span class="built_in">range</span>(windowStart+<span class="number">1</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">                        <span class="keyword">if</span> s[i] in tLis<span class="variable">t:</span></span><br><span class="line">                            windowStart = i</span><br><span class="line">                            flag = False</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> fla<span class="variable">g:</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    # 新的开始 重置windowEnd</span><br><span class="line">                    windowEnd = windowStart</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    windowEnd += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                windowEnd += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">res</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.minWindow(s = <span class="string">"abc"</span>, t = <span class="string">"ac"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第七十六题—最小覆盖子串&quot;&gt;&lt;a href=&quot;#LeetCode第七十六题—最小覆盖子串&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第七十六题—最小覆盖子串&quot;&gt;&lt;/a&gt;LeetCode第七十六题—最小覆盖子串&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.75</title>
    <link href="www.strivezs.com/2021/04/05/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%BA%94%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/05/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%BA%94%E9%A2%98/</id>
    <published>2021-04-05T04:29:59.396Z</published>
    <updated>2021-04-05T04:29:59.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第七十五题—颜色分类"><a href="#LeetCode第七十五题—颜色分类" class="headerlink" title="LeetCode第七十五题—颜色分类"></a>LeetCode第七十五题—颜色分类</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>]</span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">n == nums.length</span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">300</span></span><br><span class="line">nums[i] 为 <span class="number">0</span>、<span class="number">1</span> 或 <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortColors</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                考虑可以先用字符串存储结果，再将字符串转换为list</span></span><br><span class="line"><span class="string">                如果为0则字符串+'0'，如果为1，则在字符串记录当前最后一个0的位置处加'1'，为2的话则直接在末尾加'2'</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        resStr = <span class="string">''</span></span><br><span class="line">        index0 = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> index0 == <span class="number">-1</span>:</span><br><span class="line">                    index0 = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index0 = index0 + <span class="number">1</span></span><br><span class="line">                resStr = <span class="string">'0'</span> + resStr</span><br><span class="line">            <span class="keyword">elif</span> nums[i] == <span class="number">1</span>:</span><br><span class="line">                resStr = resStr[<span class="number">0</span>:index0+<span class="number">1</span>] + <span class="string">'1'</span> + resStr[index0+<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">elif</span> nums[i] == <span class="number">2</span>:</span><br><span class="line">                resStr = resStr + <span class="string">'2'</span></span><br><span class="line">        nums=copy.copy([ int(i) <span class="keyword">for</span> i <span class="keyword">in</span> list(resStr)])</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.sortColors([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第七十五题—颜色分类&quot;&gt;&lt;a href=&quot;#LeetCode第七十五题—颜色分类&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第七十五题—颜色分类&quot;&gt;&lt;/a&gt;LeetCode第七十五题—颜色分类&lt;/h1&gt;&lt;p&gt;自己代码的开
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.74</title>
    <link href="www.strivezs.com/2021/04/04/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/04/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E5%9B%9B%E9%A2%98/</id>
    <published>2021-04-04T11:13:59.639Z</published>
    <updated>2021-04-04T11:13:59.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第七十四题—搜索二维矩阵"><a href="#LeetCode第七十四题—搜索二维矩阵" class="headerlink" title="LeetCode第七十四题—搜索二维矩阵"></a>LeetCode第七十四题—搜索二维矩阵</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><p>每行中的整数从左到右按升序排列。<br>每行的第一个整数大于前一行的最后一个整数。</p><p><img src="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">20</span>],[<span class="number">23</span>,<span class="number">30</span>,<span class="number">34</span>,<span class="number">60</span>]], target = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zyp521/upload_image/raw/master/jfxZce.jpg" alt="figure.2"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">16</span>,<span class="number">20</span>],[<span class="number">23</span>,<span class="number">30</span>,<span class="number">34</span>,<span class="number">60</span>]], target = <span class="number">13</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == matrix.length</span><br><span class="line">n == matrix[i].length</span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">-104</span> &lt;= matrix[i][j], target &lt;= <span class="number">104</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    <span class="comment"># 二分法</span></span><br><span class="line">    def binarySearch(self, source, target, head, <span class="keyword">end</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">head</span> &gt; <span class="keyword">end</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">mid</span> = <span class="built_in">int</span>((<span class="keyword">head</span> + <span class="keyword">end</span>)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> target == <span class="keyword">source</span>[<span class="keyword">mid</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        elif target &gt; <span class="keyword">source</span>[<span class="keyword">mid</span>]:</span><br><span class="line">            <span class="keyword">return</span> self.binarySearch(<span class="keyword">source</span>,target,<span class="keyword">mid</span>+<span class="number">1</span>,<span class="keyword">end</span>)</span><br><span class="line">        elif target &lt; <span class="keyword">source</span>[<span class="keyword">mid</span>]:</span><br><span class="line">            <span class="keyword">return</span> self.binarySearch(<span class="keyword">source</span>,target,<span class="keyword">head</span>,<span class="keyword">mid</span><span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> searchMatrix(<span class="keyword">self</span>, matrix, target):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                可以先搜索目标数据可能在哪行，通过跟行首进行对比可得</span></span><br><span class="line"><span class="string">                然后使用二分法进行搜索该行所有的元素，如果满足则返回true，否则返回false</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">len</span>(matrix)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="keyword">len</span>(matrix)<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> self.binarySearch(matrix[i],target,<span class="number">0</span>,<span class="keyword">len</span>(matrix[i])<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> target &gt;= matrix[i][<span class="number">0</span>] <span class="keyword">and</span> target &lt; matrix[i+<span class="number">1</span>][<span class="number">0</span>]:</span><br><span class="line">                    <span class="keyword">return</span> self.binarySearch(matrix[i], target, <span class="number">0</span>, <span class="keyword">len</span>(matrix[i])<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="comment"># print(s.binarySearch([1,2,3,4,5],6,0,5-1))</span></span><br><span class="line">    print(s.searchMatrix(matrix = [[<span class="number">1</span>]], target = <span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第七十四题—搜索二维矩阵&quot;&gt;&lt;a href=&quot;#LeetCode第七十四题—搜索二维矩阵&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第七十四题—搜索二维矩阵&quot;&gt;&lt;/a&gt;LeetCode第七十四题—搜索二维矩阵&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.73</title>
    <link href="www.strivezs.com/2021/04/03/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/03/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-04-03T14:51:23.897Z</published>
    <updated>2021-04-03T14:51:23.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第七十三题—矩阵置零"><a href="#LeetCode第七十三题—矩阵置零" class="headerlink" title="LeetCode第七十三题—矩阵置零"></a>LeetCode第七十三题—矩阵置零</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用 原地 算法。</p><p>进阶：</p><p>一个直观的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。<br>一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。<br>你能想出一个仅使用常量空间的解决方案吗？</p><p><img src="https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg" alt="figure.1"><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><br><img src="https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg" alt="figure.2"><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>]]</span><br><span class="line">输出：[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == matrix.length</span><br><span class="line">n == matrix[<span class="number">0</span>].length</span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">200</span></span><br><span class="line"><span class="number">-231</span> &lt;= matrix[i][j] &lt;= <span class="number">231</span> - <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setZeroes</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                观察例子可以看出被变成0的值不会被判断为需要将其所在的行和列置为0</span></span><br><span class="line"><span class="string">                可以考虑使用一个和输入矩阵对应大小的标志矩阵(用来表示当前访问的位置是本来0还是被变成0的 要进行区分，才能避免出现上述情况)</span></span><br><span class="line"><span class="string">                然后就是依次遍历矩阵，当一个值等于0的之后，则把它所在行和列的值均变为0，并且修改对应的标志矩阵</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        row = len(matrix) <span class="comment"># 行数</span></span><br><span class="line">        colum = len(matrix[<span class="number">0</span>]) <span class="comment"># 列数</span></span><br><span class="line">        flagMatrix = np.ones(shape=(row,colum),dtype=bool) <span class="comment"># 标志矩阵</span></span><br><span class="line">        <span class="comment"># print(flagMatrix)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(colum):</span><br><span class="line">                <span class="keyword">if</span> flagMatrix[i][j] <span class="keyword">and</span> matrix[i][j] == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 将所在行的所有元素均设为0</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(colum):</span><br><span class="line">                        <span class="comment"># 去除本来就为0的情况</span></span><br><span class="line">                        <span class="keyword">if</span> matrix[i][k] == <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        matrix[i][k] = <span class="number">0</span></span><br><span class="line">                        flagMatrix[i][k] = <span class="literal">False</span></span><br><span class="line">                    <span class="comment"># 将所在列的所有元素均设为0</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(row):</span><br><span class="line">                        <span class="comment"># 去除本来就为0的情况</span></span><br><span class="line">                        <span class="keyword">if</span> matrix[k][j] == <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        matrix[k][j] = <span class="number">0</span></span><br><span class="line">                        flagMatrix[k][j] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.setZeroes(matrix = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>]]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第七十三题—矩阵置零&quot;&gt;&lt;a href=&quot;#LeetCode第七十三题—矩阵置零&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第七十三题—矩阵置零&quot;&gt;&lt;/a&gt;LeetCode第七十三题—矩阵置零&lt;/h1&gt;&lt;p&gt;自己代码的开
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.72</title>
    <link href="www.strivezs.com/2021/04/02/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/02/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%BA%8C%E9%A2%98/</id>
    <published>2021-04-02T10:39:27.972Z</published>
    <updated>2021-04-02T10:39:27.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第七十二题—编辑距离"><a href="#LeetCode第七十二题—编辑距离" class="headerlink" title="LeetCode第七十二题—编辑距离"></a>LeetCode第七十二题—编辑距离</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><p>插入一个字符<br>删除一个字符<br>替换一个字符</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：word1 = <span class="string">"horse"</span>, word2 = <span class="string">"ros"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：</span><br><span class="line"><span class="function"><span class="title">horse</span> -&gt;</span> rorse (将 <span class="string">'h'</span> 替换为 <span class="string">'r'</span>)</span><br><span class="line"><span class="function"><span class="title">rorse</span> -&gt;</span> rose (删除 <span class="string">'r'</span>)</span><br><span class="line"><span class="function"><span class="title">rose</span> -&gt;</span> ros (删除 <span class="string">'e'</span>)</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：word1 = <span class="string">"intention"</span>, word2 = <span class="string">"execution"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：</span><br><span class="line"><span class="function"><span class="title">intention</span> -&gt;</span> inention (删除 <span class="string">'t'</span>)</span><br><span class="line"><span class="function"><span class="title">inention</span> -&gt;</span> enention (将 <span class="string">'i'</span> 替换为 <span class="string">'e'</span>)</span><br><span class="line"><span class="function"><span class="title">enention</span> -&gt;</span> exention (将 <span class="string">'n'</span> 替换为 <span class="string">'x'</span>)</span><br><span class="line"><span class="function"><span class="title">exention</span> -&gt;</span> exection (将 <span class="string">'n'</span> 替换为 <span class="string">'c'</span>)</span><br><span class="line"><span class="function"><span class="title">exection</span> -&gt;</span> execution (插入 <span class="string">'u'</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= word1.length, word2.length &lt;= <span class="number">500</span></span><br><span class="line">word1 和 word2 由小写英文字母组成</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def minDistance(self, word1, word2):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> word1: str</span><br><span class="line">        :<span class="built_in">type</span> word2: str</span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        核心思想:</span><br><span class="line">                动态规划</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        n1, n2 = <span class="built_in">len</span>(word1), <span class="built_in">len</span>(word2)</span><br><span class="line">        <span class="keyword">dp</span> = [[<span class="number">0</span> <span class="keyword">for</span> _ in <span class="built_in">range</span>(n2 + <span class="number">1</span>)] <span class="keyword">for</span> _ in <span class="built_in">range</span>(n1 + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        # init boundaries</span><br><span class="line">        <span class="keyword">dp</span>[<span class="number">0</span>] = <span class="keyword">list</span>(<span class="built_in">range</span>(n2 + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(n1 + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">dp</span>[i][<span class="number">0</span>] = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>, n1 + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="number">1</span>, n2 + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> word1[i - <span class="number">1</span>] == word2[<span class="keyword">j</span> - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">dp</span>[i][<span class="keyword">j</span>] = <span class="keyword">dp</span>[i - <span class="number">1</span>][<span class="keyword">j</span> - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">dp</span>[i][<span class="keyword">j</span>] = <span class="built_in">min</span>(<span class="keyword">dp</span>[i - <span class="number">1</span>][<span class="keyword">j</span>], <span class="keyword">dp</span>[i][<span class="keyword">j</span> - <span class="number">1</span>], <span class="keyword">dp</span>[i - <span class="number">1</span>][<span class="keyword">j</span> - <span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">dp</span>[n1][n2]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第七十二题—编辑距离&quot;&gt;&lt;a href=&quot;#LeetCode第七十二题—编辑距离&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第七十二题—编辑距离&quot;&gt;&lt;/a&gt;LeetCode第七十二题—编辑距离&lt;/h1&gt;&lt;p&gt;自己代码的开
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.71</title>
    <link href="www.strivezs.com/2021/04/01/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/04/01/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-04-01T10:35:34.130Z</published>
    <updated>2021-04-01T10:35:34.130Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第七十一题—简化路径</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘/’ 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （…） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’//’）都被视为单个斜杠 ‘/’ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件/目录名称。</p><p>请注意，返回的 规范路径 必须遵循下述格式：</p><p>始终以斜杠 ‘/’ 开头。<br>两个目录名之间必须只有一个斜杠 ‘/’ 。<br>最后一个目录名（如果存在）不能 以 ‘/’ 结尾。<br>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘…’）。<br>返回简化后得到的 规范路径 。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">path</span> = <span class="string">"/home/"</span></span><br><span class="line">输出：<span class="string">"/home"</span></span><br><span class="line">解释：注意，最后一个目录名后面没有斜杠。 </span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">path</span> = <span class="string">"/../"</span></span><br><span class="line">输出：<span class="string">"/"</span></span><br><span class="line">解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">path</span> = <span class="string">"/home//foo/"</span></span><br><span class="line">输出：<span class="string">"/home/foo"</span></span><br><span class="line">解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">path</span> = <span class="string">"/a/./b/../../c/"</span></span><br><span class="line">输出：<span class="string">"/c"</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= <span class="built_in">path</span>.length &lt;= <span class="number">3000</span></span><br><span class="line"><span class="built_in">path</span> 由英文字母，数字，<span class="string">'.'</span>，<span class="string">'/'</span> 或 <span class="string">'_'</span> 组成。</span><br><span class="line"><span class="built_in">path</span> 是一个有效的 Unix 风格绝对路径。</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def simplifyPath(self, path):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> path: str</span><br><span class="line">        :rtype: str</span><br><span class="line"></span><br><span class="line">        核心思想：</span><br><span class="line">            几点约束：</span><br><span class="line">                <span class="number">1</span>.一个点（.）表示当前目录本身；</span><br><span class="line">                <span class="number">2</span>.两个点 （..） 表示将目录切换到上一级（指向父目录）；</span><br><span class="line">                <span class="number">3</span>.两者都可以是复杂相对路径的组成部分。</span><br><span class="line">                <span class="number">3</span>.任意多个连续的斜杠（即，<span class="string">'//'</span>）都被视为单个斜杠 <span class="string">'/'</span> 。</span><br><span class="line">                <span class="number">4</span>.对于此问题，任何其他格式的点（例如，<span class="string">'...'</span>）均被视为文件/目录名称。</span><br><span class="line">            返回路径的要求：</span><br><span class="line">                <span class="number">1</span>. 始终以斜杠 <span class="string">'/'</span> 开头。</span><br><span class="line">                <span class="number">2</span>.两个目录名之间必须只有一个斜杠 <span class="string">'/'</span> 。</span><br><span class="line">                <span class="number">3</span>.最后一个目录名（如果存在）不能 以 <span class="string">'/'</span> 结尾。</span><br><span class="line">                <span class="number">4</span>.路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 <span class="string">'.'</span> 或 <span class="string">'..'</span>）</span><br><span class="line"></span><br><span class="line">            可以考虑使用栈来操作，从后往前算</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="built_in">input</span> = path.<span class="keyword">split</span>(<span class="string">'/'</span>)</span><br><span class="line">        stack = []</span><br><span class="line">        dotList = [<span class="string">'.'</span>,<span class="string">'..'</span>,<span class="string">''</span>]  # <span class="string">''</span>针对的是//被划分出来的结果<span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">input</span>)):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">input</span>[i] not in dotLis<span class="variable">t:</span></span><br><span class="line">                stack.<span class="keyword">append</span>(<span class="built_in">input</span>[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">input</span>[i] == <span class="string">'..'</span>: # 返回上一级</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(stack) != <span class="number">0</span>:</span><br><span class="line">                        stack.<span class="keyword">pop</span>()</span><br><span class="line">        <span class="keyword">res</span> = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'/'</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(stack)):</span><br><span class="line">            <span class="keyword">res</span> = <span class="keyword">res</span> + <span class="string">'/'</span> + stack[i]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">res</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.simplifyPath(<span class="string">"/home/"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第七十一题—简化路径&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.70</title>
    <link href="www.strivezs.com/2021/03/31/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/31/LeetCode%E7%AC%AC%E4%B8%83%E5%8D%81%E9%A2%98/</id>
    <published>2021-03-31T15:13:58.649Z</published>
    <updated>2021-03-31T15:13:58.649Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第七十题—爬楼梯</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入： <span class="number">2</span></span><br><span class="line">输出： <span class="number">2</span></span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span>  <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span>  <span class="number">2</span> 阶</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入： <span class="number">3</span></span><br><span class="line">输出： <span class="number">3</span></span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span>  <span class="number">1</span> 阶 + <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span>  <span class="number">1</span> 阶 + <span class="number">2</span> 阶</span><br><span class="line"><span class="number">3.</span>  <span class="number">2</span> 阶 + <span class="number">1</span> 阶</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def climbStairs(self, n):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> n: <span class="keyword">int</span></span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">        核心思想：</span><br><span class="line">                采用动态规划</span><br><span class="line">                <span class="keyword">dp</span>[i]表示爬到第i个阶梯所有需要的方法数</span><br><span class="line">                题目分析（只考虑一步达到的情况）:</span><br><span class="line">                    因为每次只能爬一个或者两个台阶</span><br><span class="line">                    当处于i-<span class="number">1</span>时则爬一阶可以从i-<span class="number">1</span>爬到i</span><br><span class="line">                    当处于i-<span class="number">2</span>时则爬两阶可以从i-<span class="number">2</span>爬到i</span><br><span class="line">                    其余的情况均不能一步到达i</span><br><span class="line">                综上所述：<span class="keyword">dp</span>[i] =  <span class="keyword">dp</span>[i-<span class="number">1</span>] + <span class="keyword">dp</span>[i-<span class="number">2</span>]</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="keyword">dp</span> = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">dp</span>[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">dp</span>[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">dp</span>[i] = <span class="keyword">dp</span>[i-<span class="number">1</span>] + <span class="keyword">dp</span>[i-<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">dp</span>[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.climbStairs(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第七十题—爬楼梯&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.69</title>
    <link href="www.strivezs.com/2021/03/30/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/30/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-03-30T04:45:18.961Z</published>
    <updated>2021-03-30T04:45:18.961Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第六十九题—x的平方根</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>实现 int sqrt(int x) 函数。</p><p>计算并返回 x 的平方根，其中 x 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="number">4</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="number">8</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">说明: <span class="number">8</span> 的平方根是 <span class="number">2.82842</span>..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去</span><br></pre></td></tr></table></figure><h2 id="原理"><a class="header-anchor" href="#原理">¶</a>原理</h2><p>牛顿法（数值分析中使用到的）:<br>在迭代过程中，以直线代替曲线，用一阶泰勒展式（即在当前点的切线）代替原曲线，求直线与 xx 轴的交点，重复这个过程直到收敛。<br>首先随便猜一个近似值 xx，然后不断令x等于x和a/x的平均数，迭代个六七次后 xx 的值就已经相当精确了</p><p>构造方程<code>$ x - a^{2} = 0 $</code>，令<code>$ f(x)=x-a^{2} $</code>,然后不断用(x,f(x))的切线来不断逼近方程<code>$ x^{2} $</code><br>上述函数导数为2x，也就是说函数上任意一点(x,f(x))处的切线斜率为2x。<br>那么x-f(x)/(2x)就是一个比x更接近的近似值，代入<code>$ f(x)=x^{2}-a $</code>可以得到<code>$ x-(x^{2}-a)/(2x) $</code><br>变形即可得到(x+a/x)/2 这里的a是目标值</p><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                1. 直接return int(sqrt(x)) 直接ac</span></span><br><span class="line"><span class="string">                2. 使用暴力遍历方法 for i in range(1,x) 尝试 i*i 是否 == x 或者 i*i &lt; x 但是 (i+1)(i+1) &gt; x</span></span><br><span class="line"><span class="string">                3. 使用牛顿法（数值分析中使用到的）:</span></span><br><span class="line"><span class="string">                    在迭代过程中，以直线代替曲线，用一阶泰勒展式（即在当前点的切线）代替原曲线，求直线与 xx 轴的交点，重复这个过程直到收敛。</span></span><br><span class="line"><span class="string">                    首先随便猜一个近似值 xx，然后不断令x等于x和a/x的平均数，迭代个六七次后 xx 的值就已经相当精确了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    构造方程x - a^&#123;2&#125; = 0，令f(x)=x-a^&#123;2&#125;,然后不断用(x,f(x))的切线来不断逼近方程x^&#123;2&#125;</span></span><br><span class="line"><span class="string">                    上述函数导数为2x，也就是说函数上任意一点(x,f(x))处的切线斜率为2x。</span></span><br><span class="line"><span class="string">                    那么x-f(x)/(2x)就是一个比x更接近的近似值，代入f(x)=x^&#123;2&#125;-a可以得到x-(x^&#123;2&#125;-a)/(2x)</span></span><br><span class="line"><span class="string">                    变形即可得到(x+a/x)/2 这里的a是目标值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        cur_x = x <span class="comment"># 令初始值为x</span></span><br><span class="line">        <span class="keyword">while</span> cur_x-x/cur_x &gt; <span class="number">1e-6</span>:</span><br><span class="line">            cur_x = (cur_x + x/cur_x)/<span class="number">2</span> <span class="comment"># 利用公式(x+a/x)/2计算得到新的a</span></span><br><span class="line">        <span class="keyword">return</span> int(cur_x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.mySqrt(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第六十九题—x的平方根&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.68</title>
    <link href="www.strivezs.com/2021/03/29/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/29/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-03-29T10:49:38.728Z</published>
    <updated>2021-03-29T10:49:38.728Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第六十八题—文本左右对齐</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><p>最近写的花时间最久的一道题了。</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个单词数组和一个长度 maxWidth，重新排版单词，使其成为每行恰好有 maxWidth 个字符，且左右两端对齐的文本。</p><p>你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 ’ ’ 填充，使得每行恰好有 maxWidth 个字符。</p><p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p><p>文本的最后一行应为左对齐，且单词之间不插入额外的空格。</p><p>说明:</p><p>单词是指由非空格字符组成的字符序列。<br>每个单词的长度大于 0，小于等于 maxWidth。<br>输入单词数组 words 至少包含一个单词。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">示例:</span></span><br><span class="line"></span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">words = [<span class="string">"This"</span>, <span class="string">"is"</span>, <span class="string">"an"</span>, <span class="string">"example"</span>, <span class="string">"of"</span>, <span class="string">"text"</span>, <span class="string">"justification."</span>]</span><br><span class="line">maxWidth = 16</span><br><span class="line"><span class="section">输出:</span></span><br><span class="line">[</span><br><span class="line">   <span class="string">"This    is    an"</span>,</span><br><span class="line">   <span class="string">"example  of text"</span>,</span><br><span class="line">   <span class="string">"justification.  "</span></span><br><span class="line">]</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">words = [<span class="string">"What"</span>,<span class="string">"must"</span>,<span class="string">"be"</span>,<span class="string">"acknowledgment"</span>,<span class="string">"shall"</span>,<span class="string">"be"</span>]</span><br><span class="line">maxWidth = 16</span><br><span class="line"><span class="section">输出:</span></span><br><span class="line">[</span><br><span class="line">  <span class="string">"What   must   be"</span>,</span><br><span class="line">  <span class="string">"acknowledgment  "</span>,</span><br><span class="line">  <span class="string">"shall be        "</span></span><br><span class="line">]</span><br><span class="line"><span class="section">解释: 注意最后一行的格式应为 "shall be    " 而不是 "shall     be",</span></span><br><span class="line">     因为最后一行应为左对齐，而不是左右两端对齐。       </span><br><span class="line">     第二行同样为左对齐，这是因为这行只包含一个单词。</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line"><span class="section">输入:</span></span><br><span class="line">words = [<span class="string">"Science"</span>,<span class="string">"is"</span>,<span class="string">"what"</span>,<span class="string">"we"</span>,<span class="string">"understand"</span>,<span class="string">"well"</span>,<span class="string">"enough"</span>,<span class="string">"to"</span>,<span class="string">"explain"</span>,</span><br><span class="line">         <span class="string">"to"</span>,<span class="string">"a"</span>,<span class="string">"computer."</span>,<span class="string">"Art"</span>,<span class="string">"is"</span>,<span class="string">"everything"</span>,<span class="string">"else"</span>,<span class="string">"we"</span>,<span class="string">"do"</span>]</span><br><span class="line">maxWidth = 20</span><br><span class="line"><span class="section">输出:</span></span><br><span class="line">[</span><br><span class="line">  <span class="string">"Science  is  what we"</span>,</span><br><span class="line">  <span class="string">"understand      well"</span>,</span><br><span class="line">  <span class="string">"enough to explain to"</span>,</span><br><span class="line">  <span class="string">"a  computer.  Art is"</span>,</span><br><span class="line">  <span class="string">"everything  else  we"</span>,</span><br><span class="line">  <span class="string">"do                  "</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>花了一个小时写了个模拟，感觉浪费我的时间了。 debug了半天哭哭哭 执行用时：40 ms, 在所有 Python3 提交中击败了56.62%的用户内存消耗：14.8 MB, 在所有 Python3 提交中击败了92.68%的用户</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">class Solution(object):</span><br><span class="line">    def fullJustify(self, words, maxWidth):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> word<span class="variable">s:</span> List[str]</span><br><span class="line">        :<span class="built_in">type</span> maxWidth: <span class="keyword">int</span></span><br><span class="line">        :rtype: List[str]</span><br><span class="line">        核心思想：</span><br><span class="line">                大模拟吧</span><br><span class="line">                几点要求：</span><br><span class="line">                    <span class="number">1</span>. 每行恰好有 maxWidth 个字符</span><br><span class="line">                    <span class="number">2</span>. 左右两端对齐的文本</span><br><span class="line">                    <span class="number">3</span>. (贪心)尽可能多地往每行中放置单词。必要时可用空格 <span class="string">' '</span> 填充，使得每行恰好有 maxWidth 个字符。</span><br><span class="line">                    <span class="number">4</span>. 尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数</span><br><span class="line">                    <span class="number">5</span>. 文本的最后一行应为左对齐，且单词之间不插入额外的空格</span><br><span class="line">                    <span class="number">6</span>. 两个单词之间最少有一个空格</span><br><span class="line"></span><br><span class="line">                一行一行的处理，每一行尽可能的多放置单词(模拟，即放置单词总长度+最少空格数&lt;=maxWidth</span><br><span class="line">                上述情况在多放一个单词就放不下了)</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="built_in">index</span> = <span class="number">0</span> # 单词坐标</span><br><span class="line">        result = [] # 结果存放</span><br><span class="line">        temp = <span class="string">''</span> # 当前行</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">index</span> != <span class="built_in">len</span>(words):</span><br><span class="line">            # 如果当前单词长度直接等于maxWidth，则直接添加进去</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(words[<span class="built_in">index</span>]) == maxWidth:</span><br><span class="line">                result.<span class="keyword">append</span>(words[<span class="built_in">index</span>])</span><br><span class="line">                <span class="built_in">index</span> += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            # 处理一行，计算它能够存储多少个单词 找到那个单词的下标</span><br><span class="line">            record_index = <span class="built_in">len</span>(words)-<span class="number">1</span> # 记录它能够存储到单词的<span class="built_in">index</span>  如果最后结果为<span class="built_in">len</span>(words)+<span class="number">1</span>的情况，则表示剩下的所有单词都可以被一行包括了</span><br><span class="line">            record_len = <span class="number">0</span> # 记录最大长度</span><br><span class="line">            length = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">index</span>,<span class="built_in">len</span>(words)):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="built_in">index</span>:</span><br><span class="line">                    length += <span class="built_in">len</span>(words[i]) # 首个单词</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    length = length + <span class="number">1</span> + <span class="built_in">len</span>(words[i]) # 其余单词都是 空格+单词形式  先默认都是一个空格的形式</span><br><span class="line">                <span class="keyword">if</span> length &gt; maxWidth:</span><br><span class="line">                    record_index = i - <span class="number">1</span> # 记录下标</span><br><span class="line">                    record_len = length - <span class="built_in">len</span>(words[i]) - <span class="number">1</span> # 记录长度</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            # 特殊处理剩下的单词都被一行包括的情况(为最后一行的处理)</span><br><span class="line">            <span class="keyword">if</span> record_index == <span class="built_in">len</span>(words) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">index</span>,record_index+<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="built_in">index</span>:</span><br><span class="line">                        temp += words[i]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        temp = temp + <span class="string">' '</span> + words[i]</span><br><span class="line">                l_blank = [<span class="string">' '</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(maxWidth - <span class="built_in">len</span>(temp))]</span><br><span class="line">                s_blank = <span class="string">''</span>.<span class="keyword">join</span>(l_blank) # 在最后补充缺失的空格</span><br><span class="line">                temp = temp + s_blank</span><br><span class="line">                result.<span class="keyword">append</span>(temp)</span><br><span class="line">                <span class="built_in">index</span> = record_index + <span class="number">1</span></span><br><span class="line">                temp = <span class="string">''</span></span><br><span class="line">            <span class="keyword">else</span>: # 通常情况处理</span><br><span class="line">                num_blank = maxWidth - record_len # 计算除了已经包含在内的单个空格数量之外还需要添加多少个空格</span><br><span class="line">                num = record_index - <span class="built_in">index</span> + <span class="number">1</span> # 当前行可以包含的单词数量</span><br><span class="line">                # 从左到右依次分配空格即可 就可以满足左边空格数大量大于右边空格数量 比如 还缺<span class="number">3</span>个空格  当前temp=<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> 只需要按照这样步骤分配：<span class="number">1</span>  <span class="number">2</span> <span class="number">3</span>(左<span class="number">2</span> 右<span class="number">1</span>) -&gt; <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>(左<span class="number">2</span> 右<span class="number">2</span>) -&gt; <span class="number">1</span>   <span class="number">2</span>  <span class="number">3</span>(左<span class="number">3</span> 右<span class="number">2</span>)分配即可</span><br><span class="line">                <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">index</span>,record_index+<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="built_in">index</span>:</span><br><span class="line">                        temp = temp + words[<span class="built_in">index</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        temp = temp + <span class="string">' '</span> + words[i]</span><br><span class="line">                # 处理空格</span><br><span class="line">                <span class="keyword">j</span> = <span class="built_in">index</span></span><br><span class="line">                curr_len = <span class="number">0</span></span><br><span class="line">                t_len = <span class="number">0</span> # 临时长度 表示已经访问过的长度 用于下面寻找匹配字符串开头</span><br><span class="line">                <span class="keyword">for</span> i in <span class="built_in">range</span>(num_blank):</span><br><span class="line">                    # 考虑使用正则表达式来匹配字符串</span><br><span class="line">                    t_i = temp.<span class="built_in">index</span>(words[<span class="keyword">j</span>],t_len)</span><br><span class="line">                    curr_len = t_i + <span class="built_in">len</span>(words[<span class="keyword">j</span>])</span><br><span class="line">                    t_len = t_i + <span class="built_in">len</span>(words[<span class="keyword">j</span>])</span><br><span class="line">                    temp = temp[<span class="number">0</span>:curr_len] + <span class="string">' '</span> + temp[curr_len:]</span><br><span class="line">                    t_l = <span class="built_in">len</span>(temp)</span><br><span class="line">                    <span class="keyword">j</span> += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">j</span> &gt;= record_index:</span><br><span class="line">                        <span class="keyword">j</span> = <span class="built_in">index</span></span><br><span class="line">                        t_len = <span class="number">0</span></span><br><span class="line">                result.<span class="keyword">append</span>(temp)</span><br><span class="line">                <span class="built_in">index</span> = record_index + <span class="number">1</span></span><br><span class="line">                temp = <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">res</span> = s.fullJustify([<span class="string">"What"</span>,<span class="string">"must"</span>,<span class="string">"be"</span>,<span class="string">"acknowledgment"</span>,<span class="string">"shall"</span>,<span class="string">"be"</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">res</span>)</span><br><span class="line">    <span class="keyword">print</span>(<span class="built_in">len</span>(<span class="keyword">res</span>[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第六十八题—文本左右对齐&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.67</title>
    <link href="www.strivezs.com/2021/03/28/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%83%E9%A2%98%E2%80%94%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/"/>
    <id>www.strivezs.com/2021/03/28/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%83%E9%A2%98%E2%80%94%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</id>
    <published>2021-03-28T04:43:31.661Z</published>
    <updated>2021-03-28T04:43:31.661Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第六十七题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p><p>输入为 非空 字符串且只包含数字 1 和 0。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="selector-tag">a</span> = <span class="string">"11"</span>, <span class="selector-tag">b</span> = <span class="string">"1"</span></span><br><span class="line">输出: <span class="string">"100"</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="selector-tag">a</span> = <span class="string">"1010"</span>, <span class="selector-tag">b</span> = <span class="string">"1011"</span></span><br><span class="line">输出: <span class="string">"10101"</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">每个字符串仅由字符 <span class="string">'0'</span> 或 <span class="string">'1'</span> 组成。</span><br><span class="line"><span class="number">1</span> &lt;= <span class="selector-tag">a</span><span class="selector-class">.length</span>, <span class="selector-tag">b</span><span class="selector-class">.length</span> &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line">字符串如果不是 <span class="string">"0"</span> ，就都不含前导零。</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>15分钟解决，进行二进制加法模拟即可，当然可以偷鸡使用强制类型转换做， 执行用时：36 ms, 在所有 Python3 提交中击败了91.34%的用户内存消耗：14.8 MB, 在所有 Python3 提交中击败了71.90%的用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type a: str</span></span><br><span class="line"><span class="string">        :type b: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                有两种解决办法：</span></span><br><span class="line"><span class="string">                    1. 直接用Python的强制类型转换 return bin(int(a,2)+int(b,2))[2:]</span></span><br><span class="line"><span class="string">                    2. 用二进制算法来算 为2进1  模拟进位</span></span><br><span class="line"><span class="string">                        先补位，将短位数补成长的位数长度</span></span><br><span class="line"><span class="string">                        在进行进位加法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        result = <span class="string">''</span> <span class="comment"># 结果先用字符串存储</span></span><br><span class="line">        lenA = len(a)</span><br><span class="line">        lenB = len(b)</span><br><span class="line">        <span class="keyword">if</span> lenA &gt; lenB:</span><br><span class="line">            str0 = [<span class="string">'0'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(lenA-lenB)]</span><br><span class="line">            t = <span class="string">''</span>.join(str0)</span><br><span class="line">            b = t + b</span><br><span class="line">            lenB = lenA</span><br><span class="line">        <span class="keyword">elif</span> lenB &gt; lenA:</span><br><span class="line">            str0 = [<span class="string">'0'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(lenB - lenA)]</span><br><span class="line">            t = <span class="string">''</span>.join(str0)</span><br><span class="line">            a = t + a</span><br><span class="line">            lenA = lenB</span><br><span class="line">        flag = <span class="literal">False</span> <span class="comment"># 用来表示短位相加之后是否会进位</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(lenA):</span><br><span class="line">            tt = <span class="number">0</span> <span class="comment"># 进位1</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                tt = <span class="number">1</span></span><br><span class="line">            <span class="comment">#print(int(a[lenA-i-1]))</span></span><br><span class="line">            <span class="comment">#print(int(b[lenA-i-1]))</span></span><br><span class="line">            temp = int(a[lenA-i<span class="number">-1</span>]) + int(b[lenA-i<span class="number">-1</span>]) + tt</span><br><span class="line">            <span class="keyword">if</span> temp == <span class="number">3</span>:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                result = <span class="string">'1'</span> + result</span><br><span class="line">            <span class="keyword">elif</span> temp == <span class="number">2</span>:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                result = <span class="string">'0'</span> + result</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                result = str(temp) + result</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            result = <span class="string">'1'</span> + result</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.addBinary(<span class="string">"1"</span>, b = <span class="string">"111"</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第六十七题&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.66</title>
    <link href="www.strivezs.com/2021/03/27/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/27/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-03-27T04:21:29.667Z</published>
    <updated>2021-03-27T04:21:29.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第六十六题"><a href="#LeetCode第六十六题" class="headerlink" title="LeetCode第六十六题"></a>LeetCode第六十六题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：digits = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">解释：输入数组表示数字 <span class="number">123</span>。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：digits = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">解释：输入数组表示数字 <span class="number">4321</span>。</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：digits = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= digits.length &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">0</span> &lt;= digits[i] &lt;= <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>两种方法一个是在内存上击败90%的人，一个是在时间上击败98%的人</p><h3 id="内存上"><a href="#内存上" class="headerlink" title="内存上"></a>内存上</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type digits: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                就是将数字转换为对应的数字，然后加1，再将其转换为列表</span></span><br><span class="line"><span class="string">                剪枝：对于尾数不为9的情况，直接在尾数加1返回即可</span></span><br><span class="line"><span class="string">                    如果为9的话，则再转换为数字后加1再逆变换集合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                另外还有一种思想：在原数组上直接考虑进位即可，如果9+1的话原位等0，进1如果前一位不为9则直接上即可</span></span><br><span class="line"><span class="string">                            如果为9则重复上述直到加到最高位的话，则直接在结果前插入1即可。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> digits[<span class="number">-1</span>] != <span class="number">9</span>:</span><br><span class="line">            digits[<span class="number">-1</span>] = digits[<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> digits</span><br><span class="line">        str1 = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(digits)):</span><br><span class="line">            str1 += str(digits[i])</span><br><span class="line">        temp = str(int(str1) + <span class="number">1</span>)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">            result.append(int(temp[i]))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.plusOne([<span class="number">9</span>]))</span><br></pre></td></tr></table></figure><h3 id="时间上"><a href="#时间上" class="headerlink" title="时间上"></a>时间上</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type digits: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                就是将数字转换为对应的数字，然后加1，再将其转换为列表</span></span><br><span class="line"><span class="string">                剪枝：对于尾数不为9的情况，直接在尾数加1返回即可</span></span><br><span class="line"><span class="string">                    如果为9的话，则再转换为数字后加1再逆变换集合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                另外还有一种思想：在原数组上直接考虑进位即可，如果9+1的话原位等0，进1如果前一位不为9则直接上即可</span></span><br><span class="line"><span class="string">                            如果为9则重复上述直到加到最高位的话，则直接在结果前插入1即可。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i = len(digits)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> digits[i] == <span class="number">9</span>:</span><br><span class="line">            digits[i] = <span class="number">0</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">            digits = [<span class="number">1</span>] + digits</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            digits[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> digits</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第六十六题&quot;&gt;&lt;a href=&quot;#LeetCode第六十六题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第六十六题&quot;&gt;&lt;/a&gt;LeetCode第六十六题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.65</title>
    <link href="www.strivezs.com/2021/03/26/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%BA%94%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/26/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%BA%94%E9%A2%98/</id>
    <published>2021-03-26T04:49:59.941Z</published>
    <updated>2021-03-26T04:49:59.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第六十五题"><a href="#LeetCode第六十五题" class="headerlink" title="LeetCode第六十五题"></a>LeetCode第六十五题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有效数字（按顺序）可以分成以下几个部分：</p><p>一个 小数 或者 整数<br>（可选）一个 ‘e’ 或 ‘E’ ，后面跟着一个 整数<br>小数（按顺序）可以分成以下几个部分：</p><p>（可选）一个符号字符（’+’ 或 ‘-‘）<br>下述格式之一：<br>至少一位数字，后面跟着一个点 ‘.’<br>至少一位数字，后面跟着一个点 ‘.’ ，后面再跟着至少一位数字<br>一个点 ‘.’ ，后面跟着至少一位数字<br>整数（按顺序）可以分成以下几个部分：</p><p>（可选）一个符号字符（’+’ 或 ‘-‘）<br>至少一位数字  </p><p>部分有效数字列举如下：<br>[“2”, “0089”, “-0.1”, “+3.14”, “4.”, “-.9”, “2e10”, “-90E3”, “3e+7”, “+6e-1”, “53.5e93”, “-123.456e789”]  </p><p>部分无效数字列举如下：<br>[“abc”, “1a”, “1e”, “e3”, “99e2.5”, “—6”, “-+3”, “95a54e53”]    </p><p>给你一个字符串 s ，如果 s 是一个 有效数字 ，请返回 true 。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"0"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"e"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"."</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">".1"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= s.length &lt;= <span class="number">20</span></span><br><span class="line">s 仅含英文字母（大写和小写），数字（<span class="number">0</span><span class="number">-9</span>），加号 <span class="string">'+'</span> ，减号 <span class="string">'-'</span> ，或者点 <span class="string">'.'</span> 。</span><br></pre></td></tr></table></figure><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>遍历原理已经忘记多时了。这里参考了一下大佬的题解，写成的。   </p><p>首先看到题目是可以想到使用自动机的，因此需要画出状态转移图，然后再根据状态转移图来写出状态转移表，最后通过一个个字符串对应的状态进行查表来得到最终状态。  </p><p>所有的状态为：<br>所有状态：</p><pre><code>0. 初始状态1.符号位2.整数部分3.左侧有整数的小数点4.左侧无整数的小数点(根据前面的第二条额外规则，需要对左侧有无整数的两种小数点做区分)5.小数部分6.字符 e/E7.指数部分的符号位8.指数部分的整数部分</code></pre><p>其中2、3、5、8为终止状态(可以接受)，还定义一个-1作为不可接收状态，直接结束。  </p><p>状态转移图：</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/bsXOCq.jpg" alt="figure.1"></p><p>状态转移表：</p><div class="table-container"><table><thead><tr><th>sate</th><th>blank</th><th>+/-</th><th>0-9</th><th>.</th><th>e</th><th>other</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>6</td><td>2</td><td>-1</td><td>-1</td></tr><tr><td>1</td><td>-1</td><td>-1</td><td>6</td><td>2</td><td>-1</td><td>-1</td></tr><tr><td>2</td><td>-1</td><td>-1</td><td>3</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>3</td><td>8</td><td>-1</td><td>3</td><td>-1</td><td>4</td><td>-1</td></tr><tr><td>4</td><td>-1</td><td>7</td><td>5</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>5</td><td>8</td><td>-1</td><td>5</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>6</td><td>8</td><td>-1</td><td>6</td><td>3</td><td>4</td><td>-1</td></tr><tr><td>7</td><td>-1</td><td>-1</td><td>5</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>8</td><td>8</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td></tr></tbody></table></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 确定下一个状态</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make</span><span class="params">(self,c)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'+'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'e'</span> <span class="keyword">or</span> c == <span class="string">'E'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 数字情况</span></span><br><span class="line">            <span class="keyword">if</span> c &gt;= <span class="string">'0'</span> <span class="keyword">and</span> c &lt;= <span class="string">'9'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">            <span class="comment"># 其他情况</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                使用DFA求解</span></span><br><span class="line"><span class="string">                分析题意、画出状态转移图(可以不是最简的)</span></span><br><span class="line"><span class="string">                根据状态转移图写出状态转移表</span></span><br><span class="line"><span class="string">                状态共8个状态，下标为0、1、2、3、4、5、6、7、8</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        state = <span class="number">0</span> <span class="comment"># 状态</span></span><br><span class="line">        finals = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]  <span class="comment"># 最终可接受的状态 1表示可以介绍 0表示不可以接收</span></span><br><span class="line">        <span class="comment"># 状态转移表</span></span><br><span class="line">        transfer = [[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [<span class="number">-1</span>,<span class="number">-1</span>, <span class="number">6</span>, <span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [<span class="number">-1</span>,<span class="number">-1</span>, <span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [ <span class="number">8</span>,<span class="number">-1</span>, <span class="number">3</span>,<span class="number">-1</span>, <span class="number">4</span>,<span class="number">-1</span>],</span><br><span class="line">                    [<span class="number">-1</span>, <span class="number">7</span>, <span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [ <span class="number">8</span>,<span class="number">-1</span>, <span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [ <span class="number">8</span>,<span class="number">-1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">-1</span>],</span><br><span class="line">                    [<span class="number">-1</span>,<span class="number">-1</span>, <span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [ <span class="number">8</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            state = transfer[state][self.make(s[i])] <span class="comment"># 访问状态转移表转移到下一个状态</span></span><br><span class="line">            <span class="keyword">if</span> state &lt; <span class="number">0</span>: <span class="comment"># 状态达到不可接受状态</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bool(finals[state])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.isNumber(<span class="string">'95a54e53'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第六十五题&quot;&gt;&lt;a href=&quot;#LeetCode第六十五题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第六十五题&quot;&gt;&lt;/a&gt;LeetCode第六十五题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.64</title>
    <link href="www.strivezs.com/2021/03/25/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/25/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%9B%9B%E9%A2%98/</id>
    <published>2021-03-25T15:46:39.599Z</published>
    <updated>2021-03-25T15:46:39.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第六十四题"><a href="#LeetCode第六十四题" class="headerlink" title="LeetCode第六十四题"></a>LeetCode第六十四题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>说明：每次只能向下或者向右移动一步。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：因为路径 <span class="number">1</span>→<span class="number">3</span>→<span class="number">1</span>→<span class="number">1</span>→<span class="number">1</span> 的总和最小。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">输出：<span class="number">12</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == grid.length</span><br><span class="line">n == grid[i].length</span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">200</span></span><br><span class="line"><span class="number">0</span> &lt;= grid[i][j] &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def minPathSum(self, grid):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type grid: List<span class="subst">[List[int]</span>]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                看到这个题目的瞬间我就想起用动态规划了</span></span><br><span class="line"><span class="string">                dp<span class="subst">[i]</span><span class="subst">[j]</span> 表示从(0,0)位置到当前位置的最短距离</span></span><br><span class="line"><span class="string">                初始dp距离要设置的足够大</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                分成三种情况：</span></span><br><span class="line"><span class="string">                    1. 不位于边界的情况，可以从上过来，也可以从左过来，因此都要判断</span></span><br><span class="line"><span class="string">                    2. 位于左边界的情况，只能从上过来</span></span><br><span class="line"><span class="string">                    3. 位于上边界的情况，只能从左过来</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">        dp = <span class="comment">[<span class="comment">[100000 for i in range(len(grid<span class="comment">[0]</span>))]</span> for i in range(len(grid))]</span> # 初始化dp</span><br><span class="line">        dp<span class="comment">[0]</span><span class="comment">[0]</span> = grid<span class="comment">[0]</span><span class="comment">[0]</span></span><br><span class="line">        #print(len(grid<span class="comment">[0]</span>))</span><br><span class="line">        for i in range(len(grid)):</span><br><span class="line">            for j in range(len(grid<span class="comment">[0]</span>)):</span><br><span class="line">                if i &gt; 0 and j &gt; 0:</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = min(dp<span class="comment">[i-1]</span><span class="comment">[j]</span>+grid<span class="comment">[i]</span><span class="comment">[j]</span>,dp<span class="comment">[i]</span><span class="comment">[j]</span>)  # 非边界位置，因此它可以是从上边来的，可以是从左边来的</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = min(dp<span class="comment">[i]</span><span class="comment">[j-1]</span> + grid<span class="comment">[i]</span><span class="comment">[j]</span>, dp<span class="comment">[i]</span><span class="comment">[j]</span>)</span><br><span class="line">                elif i &gt; 0:  # 位于左边界  从上一个点过来只能往下走</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = min(dp<span class="comment">[i-1]</span><span class="comment">[j]</span>+grid<span class="comment">[i]</span><span class="comment">[j]</span>,dp<span class="comment">[i]</span><span class="comment">[j]</span>)</span><br><span class="line">                elif j &gt; 0:  # 位于上边界 从上一个点过来只能往右走</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = min(dp<span class="comment">[i]</span><span class="comment">[j-1]</span> + grid<span class="comment">[i]</span><span class="comment">[j]</span>, dp<span class="comment">[i]</span><span class="comment">[j]</span>)</span><br><span class="line"></span><br><span class="line">        return dp<span class="comment">[-1]</span><span class="comment">[-1]</span></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.minPathSum(grid = <span class="comment">[<span class="comment">[8,2,6,3,8,4,8,6,1,1,1,8,0]</span>,<span class="comment">[1,6,0,6,7,1,2,4,7,8,9,3,8]</span>,<span class="comment">[9,9,7,8,4,7,3,3,2,3,7,1,9]</span>,<span class="comment">[8,4,3,8,6,4,4,7,2,3,0,4,8]</span>,<span class="comment">[7,4,9,3,4,0,2,3,9,7,2,4,0]</span>,<span class="comment">[7,7,9,0,9,9,4,2,7,0,8,3,9]</span>,<span class="comment">[0,9,9,6,9,9,2,8,2,8,8,4,2]</span>,<span class="comment">[9,3,4,3,5,1,3,4,1,2,3,7,4]</span>,<span class="comment">[2,8,4,8,9,6,7,9,4,6,8,8,4]</span>,<span class="comment">[2,6,4,8,8,4,2,5,9,9,6,4,4]</span>,<span class="comment">[0,6,9,7,2,4,7,6,2,9,2,1,8]</span>,<span class="comment">[8,7,8,6,3,0,3,9,8,3,5,2,8]</span>,<span class="comment">[5,2,7,9,8,9,8,9,6,0,5,6,9]</span>,<span class="comment">[7,5,3,8,5,2,7,5,8,2,7,3,2]</span>,<span class="comment">[7,7,7,0,5,4,4,2,6,4,1,4,3]</span>,<span class="comment">[0,6,9,8,5,8,5,1,9,2,3,8,7]</span>,<span class="comment">[3,1,4,7,3,1,4,2,3,1,7,7,6]</span>]</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第六十四题&quot;&gt;&lt;a href=&quot;#LeetCode第六十四题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第六十四题&quot;&gt;&lt;/a&gt;LeetCode第六十四题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.63</title>
    <link href="www.strivezs.com/2021/03/23/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/23/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-03-23T11:38:07.524Z</published>
    <updated>2021-03-23T11:38:07.524Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第六十三题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png" alt="figure.1"></p><p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：obstacleGrid = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line"><span class="number">3</span>x3 网格的正中间有一个障碍物。</span><br><span class="line">从左上角到右下角一共有 <span class="number">2</span> 条不同的路径：</span><br><span class="line"><span class="number">1.</span> 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line"><span class="number">2.</span> 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：obstacleGrid = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == obstacleGrid.length</span><br><span class="line">n == obstacleGrid[i].length</span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">100</span></span><br><span class="line">obstacleGrid[i][j] 为 <span class="number">0</span> 或 <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def uniquePathsWithObstacles(self, obstacleGrid):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type obstacleGrid: List<span class="subst">[List[int]</span>]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                看到这道题，如果学过动态规划的话，肯定会首先想到使用动态规划来解</span></span><br><span class="line"><span class="string">                根据题目内容来定义dp<span class="subst">[i]</span><span class="subst">[j]</span></span></span><br><span class="line"><span class="string">                这里的dp<span class="subst">[i]</span><span class="subst">[j]</span>表示从左上角到达(i,j)位置最多路径数</span></span><br><span class="line"><span class="string">                动态规划解法:</span></span><br><span class="line"><span class="string">                    定义 f<span class="subst">[i]</span><span class="subst">[j]</span> 为到达位置 (i,j) 的不同路径数量。</span></span><br><span class="line"><span class="string">                    那么 f<span class="subst">[n-1]</span><span class="subst">[m-1]</span> 就是我们最终的答案，而 f<span class="subst">[0]</span><span class="subst">[0]</span> = 1 是一个显而易见的起始条件。</span></span><br><span class="line"><span class="string">                    由于题目限定了我们只能往下或者往右移动，同时又存在障碍物</span></span><br><span class="line"><span class="string">                    因此我们的行动分析如下：</span></span><br><span class="line"><span class="string">                    1.当前obstacleGrid<span class="subst">[i]</span><span class="subst">[j]</span>不是障碍物的情况</span></span><br><span class="line"><span class="string">                        1.1.当前位置只能往下移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i-1]</span><span class="subst">[j]</span> (边界)</span></span><br><span class="line"><span class="string">                        1.2.当前位置只能往右移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i]</span><span class="subst">[j-1]</span> (边界)</span></span><br><span class="line"><span class="string">                        1.3.当前位置即能往下也能往右移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i]</span><span class="subst">[j-1]</span> + f<span class="subst">[i-1]</span><span class="subst">[j]</span></span></span><br><span class="line"><span class="string">                    2.当前obstacleGrid<span class="subst">[i]</span><span class="subst">[j]</span>是障碍物的情况</span></span><br><span class="line"><span class="string">                        2.1 将dp<span class="subst">[i]</span><span class="subst">[j]</span>设置为0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    对于不是障碍物情况的分析：当前位置不是障碍物，那么即时它是从障碍物过来的点也无所谓</span></span><br><span class="line"><span class="string">                    因为我们已经将障碍物对应的dp值设为了0，对于可能1的3三种情况分析：</span></span><br><span class="line"><span class="string">                    1.1 从上边过来的，但是上面那个位置是障碍物，因为我们将障碍物对应的dp设为1了，因此当前点即时不是障碍物</span></span><br><span class="line"><span class="string">                        但是由于它只能从障碍物过来，因此它的dp值等于障碍物的dp值为0</span></span><br><span class="line"><span class="string">                    1.2 同理只能从左边过来的，由于左边是障碍物，因此它的dp值也等于障碍物的dp值为0</span></span><br><span class="line"><span class="string">                    1.3 既能从左也能从上过来的，如果左边是障碍物那么当前dp=障碍物dp+从上过来的dp=从上过来的dp</span></span><br><span class="line"><span class="string">                        同理上边是障碍物那么当前dp=障碍物dp+从左过来的dp=从左过来的dp</span></span><br><span class="line"><span class="string">                        最后上边和左边均为障碍物，dp=0+0=0</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        dp = <span class="comment">[<span class="comment">[0 for i in range(len(obstacleGrid<span class="comment">[0]</span>))]</span> for i in range(len(obstacleGrid))]</span></span><br><span class="line">        dp<span class="comment">[0]</span><span class="comment">[0]</span> = 1</span><br><span class="line">        for i in range(len(obstacleGrid)):</span><br><span class="line">            for j in range(len(obstacleGrid<span class="comment">[0]</span>)):</span><br><span class="line">                # 当前位置不是障碍, 障碍为位置对应的dp<span class="comment">[i]</span><span class="comment">[j]</span>永远为0，因此在下面加上也无所谓</span><br><span class="line">                if obstacleGrid<span class="comment">[i]</span><span class="comment">[j]</span> != 1:</span><br><span class="line">                    if i &gt; 0 and j &gt; 0:</span><br><span class="line">                        dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i - 1]</span><span class="comment">[j]</span> + dp<span class="comment">[i]</span><span class="comment">[j - 1]</span>  # 非边界位置，因此它可以是从上边来的，可以是从左边来的</span><br><span class="line">                    elif i &gt; 0:  # 位于左边界  从上一个点过来只能往下走</span><br><span class="line">                        dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i - 1]</span><span class="comment">[j]</span></span><br><span class="line">                    elif j &gt; 0:  # 位于上边界 从上一个点过来只能往右走</span><br><span class="line">                        dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i]</span><span class="comment">[j - 1]</span></span><br><span class="line">                # 当前位置是障碍的情况</span><br><span class="line">                else:</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = 0</span><br><span class="line"></span><br><span class="line">        return dp<span class="comment">[-1]</span><span class="comment">[-1]</span></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.uniquePathsWithObstacles(obstacleGrid = <span class="comment">[<span class="comment">[0,1]</span>,<span class="comment">[0,0]</span>]</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第六十三题&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
</feed>
