<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StriveZs的博客</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.strivezs.com/"/>
  <updated>2021-03-27T04:21:29.667Z</updated>
  <id>www.strivezs.com/</id>
  
  <author>
    <name>StriveZs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode No.66</title>
    <link href="www.strivezs.com/2021/03/27/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/27/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-03-27T04:21:29.667Z</published>
    <updated>2021-03-27T04:21:29.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第六十六题"><a href="#LeetCode第六十六题" class="headerlink" title="LeetCode第六十六题"></a>LeetCode第六十六题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：digits = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">解释：输入数组表示数字 <span class="number">123</span>。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：digits = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">解释：输入数组表示数字 <span class="number">4321</span>。</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：digits = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= digits.length &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">0</span> &lt;= digits[i] &lt;= <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>两种方法一个是在内存上击败90%的人，一个是在时间上击败98%的人</p><h3 id="内存上"><a href="#内存上" class="headerlink" title="内存上"></a>内存上</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type digits: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                就是将数字转换为对应的数字，然后加1，再将其转换为列表</span></span><br><span class="line"><span class="string">                剪枝：对于尾数不为9的情况，直接在尾数加1返回即可</span></span><br><span class="line"><span class="string">                    如果为9的话，则再转换为数字后加1再逆变换集合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                另外还有一种思想：在原数组上直接考虑进位即可，如果9+1的话原位等0，进1如果前一位不为9则直接上即可</span></span><br><span class="line"><span class="string">                            如果为9则重复上述直到加到最高位的话，则直接在结果前插入1即可。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> digits[<span class="number">-1</span>] != <span class="number">9</span>:</span><br><span class="line">            digits[<span class="number">-1</span>] = digits[<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> digits</span><br><span class="line">        str1 = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(digits)):</span><br><span class="line">            str1 += str(digits[i])</span><br><span class="line">        temp = str(int(str1) + <span class="number">1</span>)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">            result.append(int(temp[i]))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.plusOne([<span class="number">9</span>]))</span><br></pre></td></tr></table></figure><h3 id="时间上"><a href="#时间上" class="headerlink" title="时间上"></a>时间上</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type digits: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                就是将数字转换为对应的数字，然后加1，再将其转换为列表</span></span><br><span class="line"><span class="string">                剪枝：对于尾数不为9的情况，直接在尾数加1返回即可</span></span><br><span class="line"><span class="string">                    如果为9的话，则再转换为数字后加1再逆变换集合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                另外还有一种思想：在原数组上直接考虑进位即可，如果9+1的话原位等0，进1如果前一位不为9则直接上即可</span></span><br><span class="line"><span class="string">                            如果为9则重复上述直到加到最高位的话，则直接在结果前插入1即可。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i = len(digits)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> digits[i] == <span class="number">9</span>:</span><br><span class="line">            digits[i] = <span class="number">0</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">            digits = [<span class="number">1</span>] + digits</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            digits[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> digits</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第六十六题&quot;&gt;&lt;a href=&quot;#LeetCode第六十六题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第六十六题&quot;&gt;&lt;/a&gt;LeetCode第六十六题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.65</title>
    <link href="www.strivezs.com/2021/03/26/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%BA%94%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/26/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%BA%94%E9%A2%98/</id>
    <published>2021-03-26T04:49:59.941Z</published>
    <updated>2021-03-26T04:49:59.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第六十五题"><a href="#LeetCode第六十五题" class="headerlink" title="LeetCode第六十五题"></a>LeetCode第六十五题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有效数字（按顺序）可以分成以下几个部分：</p><p>一个 小数 或者 整数<br>（可选）一个 ‘e’ 或 ‘E’ ，后面跟着一个 整数<br>小数（按顺序）可以分成以下几个部分：</p><p>（可选）一个符号字符（’+’ 或 ‘-‘）<br>下述格式之一：<br>至少一位数字，后面跟着一个点 ‘.’<br>至少一位数字，后面跟着一个点 ‘.’ ，后面再跟着至少一位数字<br>一个点 ‘.’ ，后面跟着至少一位数字<br>整数（按顺序）可以分成以下几个部分：</p><p>（可选）一个符号字符（’+’ 或 ‘-‘）<br>至少一位数字  </p><p>部分有效数字列举如下：<br>[“2”, “0089”, “-0.1”, “+3.14”, “4.”, “-.9”, “2e10”, “-90E3”, “3e+7”, “+6e-1”, “53.5e93”, “-123.456e789”]  </p><p>部分无效数字列举如下：<br>[“abc”, “1a”, “1e”, “e3”, “99e2.5”, “—6”, “-+3”, “95a54e53”]    </p><p>给你一个字符串 s ，如果 s 是一个 有效数字 ，请返回 true 。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"0"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"e"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"."</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">".1"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= s.length &lt;= <span class="number">20</span></span><br><span class="line">s 仅含英文字母（大写和小写），数字（<span class="number">0</span><span class="number">-9</span>），加号 <span class="string">'+'</span> ，减号 <span class="string">'-'</span> ，或者点 <span class="string">'.'</span> 。</span><br></pre></td></tr></table></figure><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>遍历原理已经忘记多时了。这里参考了一下大佬的题解，写成的。   </p><p>首先看到题目是可以想到使用自动机的，因此需要画出状态转移图，然后再根据状态转移图来写出状态转移表，最后通过一个个字符串对应的状态进行查表来得到最终状态。  </p><p>所有的状态为：<br>所有状态：</p><pre><code>0. 初始状态1.符号位2.整数部分3.左侧有整数的小数点4.左侧无整数的小数点(根据前面的第二条额外规则，需要对左侧有无整数的两种小数点做区分)5.小数部分6.字符 e/E7.指数部分的符号位8.指数部分的整数部分</code></pre><p>其中2、3、5、8为终止状态(可以接受)，还定义一个-1作为不可接收状态，直接结束。  </p><p>状态转移图：</p><p><img src="https://gitee.com/zyp521/upload_image/raw/master/bsXOCq.jpg" alt="figure.1"></p><p>状态转移表：</p><div class="table-container"><table><thead><tr><th>sate</th><th>blank</th><th>+/-</th><th>0-9</th><th>.</th><th>e</th><th>other</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>6</td><td>2</td><td>-1</td><td>-1</td></tr><tr><td>1</td><td>-1</td><td>-1</td><td>6</td><td>2</td><td>-1</td><td>-1</td></tr><tr><td>2</td><td>-1</td><td>-1</td><td>3</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>3</td><td>8</td><td>-1</td><td>3</td><td>-1</td><td>4</td><td>-1</td></tr><tr><td>4</td><td>-1</td><td>7</td><td>5</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>5</td><td>8</td><td>-1</td><td>5</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>6</td><td>8</td><td>-1</td><td>6</td><td>3</td><td>4</td><td>-1</td></tr><tr><td>7</td><td>-1</td><td>-1</td><td>5</td><td>-1</td><td>-1</td><td>-1</td></tr><tr><td>8</td><td>8</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td></tr></tbody></table></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 确定下一个状态</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make</span><span class="params">(self,c)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'+'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'e'</span> <span class="keyword">or</span> c == <span class="string">'E'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 数字情况</span></span><br><span class="line">            <span class="keyword">if</span> c &gt;= <span class="string">'0'</span> <span class="keyword">and</span> c &lt;= <span class="string">'9'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">            <span class="comment"># 其他情况</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                使用DFA求解</span></span><br><span class="line"><span class="string">                分析题意、画出状态转移图(可以不是最简的)</span></span><br><span class="line"><span class="string">                根据状态转移图写出状态转移表</span></span><br><span class="line"><span class="string">                状态共8个状态，下标为0、1、2、3、4、5、6、7、8</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        state = <span class="number">0</span> <span class="comment"># 状态</span></span><br><span class="line">        finals = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]  <span class="comment"># 最终可接受的状态 1表示可以介绍 0表示不可以接收</span></span><br><span class="line">        <span class="comment"># 状态转移表</span></span><br><span class="line">        transfer = [[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [<span class="number">-1</span>,<span class="number">-1</span>, <span class="number">6</span>, <span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [<span class="number">-1</span>,<span class="number">-1</span>, <span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [ <span class="number">8</span>,<span class="number">-1</span>, <span class="number">3</span>,<span class="number">-1</span>, <span class="number">4</span>,<span class="number">-1</span>],</span><br><span class="line">                    [<span class="number">-1</span>, <span class="number">7</span>, <span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [ <span class="number">8</span>,<span class="number">-1</span>, <span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [ <span class="number">8</span>,<span class="number">-1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">-1</span>],</span><br><span class="line">                    [<span class="number">-1</span>,<span class="number">-1</span>, <span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>],</span><br><span class="line">                    [ <span class="number">8</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            state = transfer[state][self.make(s[i])] <span class="comment"># 访问状态转移表转移到下一个状态</span></span><br><span class="line">            <span class="keyword">if</span> state &lt; <span class="number">0</span>: <span class="comment"># 状态达到不可接受状态</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bool(finals[state])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.isNumber(<span class="string">'95a54e53'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第六十五题&quot;&gt;&lt;a href=&quot;#LeetCode第六十五题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第六十五题&quot;&gt;&lt;/a&gt;LeetCode第六十五题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.64</title>
    <link href="www.strivezs.com/2021/03/25/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/25/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E5%9B%9B%E9%A2%98/</id>
    <published>2021-03-25T15:46:39.599Z</published>
    <updated>2021-03-25T15:46:39.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第六十四题"><a href="#LeetCode第六十四题" class="headerlink" title="LeetCode第六十四题"></a>LeetCode第六十四题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>说明：每次只能向下或者向右移动一步。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：因为路径 <span class="number">1</span>→<span class="number">3</span>→<span class="number">1</span>→<span class="number">1</span>→<span class="number">1</span> 的总和最小。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">输出：<span class="number">12</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == grid.length</span><br><span class="line">n == grid[i].length</span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">200</span></span><br><span class="line"><span class="number">0</span> &lt;= grid[i][j] &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def minPathSum(self, grid):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type grid: List<span class="subst">[List[int]</span>]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                看到这个题目的瞬间我就想起用动态规划了</span></span><br><span class="line"><span class="string">                dp<span class="subst">[i]</span><span class="subst">[j]</span> 表示从(0,0)位置到当前位置的最短距离</span></span><br><span class="line"><span class="string">                初始dp距离要设置的足够大</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                分成三种情况：</span></span><br><span class="line"><span class="string">                    1. 不位于边界的情况，可以从上过来，也可以从左过来，因此都要判断</span></span><br><span class="line"><span class="string">                    2. 位于左边界的情况，只能从上过来</span></span><br><span class="line"><span class="string">                    3. 位于上边界的情况，只能从左过来</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">        dp = <span class="comment">[<span class="comment">[100000 for i in range(len(grid<span class="comment">[0]</span>))]</span> for i in range(len(grid))]</span> # 初始化dp</span><br><span class="line">        dp<span class="comment">[0]</span><span class="comment">[0]</span> = grid<span class="comment">[0]</span><span class="comment">[0]</span></span><br><span class="line">        #print(len(grid<span class="comment">[0]</span>))</span><br><span class="line">        for i in range(len(grid)):</span><br><span class="line">            for j in range(len(grid<span class="comment">[0]</span>)):</span><br><span class="line">                if i &gt; 0 and j &gt; 0:</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = min(dp<span class="comment">[i-1]</span><span class="comment">[j]</span>+grid<span class="comment">[i]</span><span class="comment">[j]</span>,dp<span class="comment">[i]</span><span class="comment">[j]</span>)  # 非边界位置，因此它可以是从上边来的，可以是从左边来的</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = min(dp<span class="comment">[i]</span><span class="comment">[j-1]</span> + grid<span class="comment">[i]</span><span class="comment">[j]</span>, dp<span class="comment">[i]</span><span class="comment">[j]</span>)</span><br><span class="line">                elif i &gt; 0:  # 位于左边界  从上一个点过来只能往下走</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = min(dp<span class="comment">[i-1]</span><span class="comment">[j]</span>+grid<span class="comment">[i]</span><span class="comment">[j]</span>,dp<span class="comment">[i]</span><span class="comment">[j]</span>)</span><br><span class="line">                elif j &gt; 0:  # 位于上边界 从上一个点过来只能往右走</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = min(dp<span class="comment">[i]</span><span class="comment">[j-1]</span> + grid<span class="comment">[i]</span><span class="comment">[j]</span>, dp<span class="comment">[i]</span><span class="comment">[j]</span>)</span><br><span class="line"></span><br><span class="line">        return dp<span class="comment">[-1]</span><span class="comment">[-1]</span></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.minPathSum(grid = <span class="comment">[<span class="comment">[8,2,6,3,8,4,8,6,1,1,1,8,0]</span>,<span class="comment">[1,6,0,6,7,1,2,4,7,8,9,3,8]</span>,<span class="comment">[9,9,7,8,4,7,3,3,2,3,7,1,9]</span>,<span class="comment">[8,4,3,8,6,4,4,7,2,3,0,4,8]</span>,<span class="comment">[7,4,9,3,4,0,2,3,9,7,2,4,0]</span>,<span class="comment">[7,7,9,0,9,9,4,2,7,0,8,3,9]</span>,<span class="comment">[0,9,9,6,9,9,2,8,2,8,8,4,2]</span>,<span class="comment">[9,3,4,3,5,1,3,4,1,2,3,7,4]</span>,<span class="comment">[2,8,4,8,9,6,7,9,4,6,8,8,4]</span>,<span class="comment">[2,6,4,8,8,4,2,5,9,9,6,4,4]</span>,<span class="comment">[0,6,9,7,2,4,7,6,2,9,2,1,8]</span>,<span class="comment">[8,7,8,6,3,0,3,9,8,3,5,2,8]</span>,<span class="comment">[5,2,7,9,8,9,8,9,6,0,5,6,9]</span>,<span class="comment">[7,5,3,8,5,2,7,5,8,2,7,3,2]</span>,<span class="comment">[7,7,7,0,5,4,4,2,6,4,1,4,3]</span>,<span class="comment">[0,6,9,8,5,8,5,1,9,2,3,8,7]</span>,<span class="comment">[3,1,4,7,3,1,4,2,3,1,7,7,6]</span>]</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第六十四题&quot;&gt;&lt;a href=&quot;#LeetCode第六十四题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第六十四题&quot;&gt;&lt;/a&gt;LeetCode第六十四题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.63</title>
    <link href="www.strivezs.com/2021/03/23/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/23/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-03-23T11:38:07.524Z</published>
    <updated>2021-03-23T11:38:07.524Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第六十三题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png" alt="figure.1"></p><p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：obstacleGrid = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line"><span class="number">3</span>x3 网格的正中间有一个障碍物。</span><br><span class="line">从左上角到右下角一共有 <span class="number">2</span> 条不同的路径：</span><br><span class="line"><span class="number">1.</span> 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line"><span class="number">2.</span> 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：obstacleGrid = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == obstacleGrid.length</span><br><span class="line">n == obstacleGrid[i].length</span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">100</span></span><br><span class="line">obstacleGrid[i][j] 为 <span class="number">0</span> 或 <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def uniquePathsWithObstacles(self, obstacleGrid):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type obstacleGrid: List<span class="subst">[List[int]</span>]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                看到这道题，如果学过动态规划的话，肯定会首先想到使用动态规划来解</span></span><br><span class="line"><span class="string">                根据题目内容来定义dp<span class="subst">[i]</span><span class="subst">[j]</span></span></span><br><span class="line"><span class="string">                这里的dp<span class="subst">[i]</span><span class="subst">[j]</span>表示从左上角到达(i,j)位置最多路径数</span></span><br><span class="line"><span class="string">                动态规划解法:</span></span><br><span class="line"><span class="string">                    定义 f<span class="subst">[i]</span><span class="subst">[j]</span> 为到达位置 (i,j) 的不同路径数量。</span></span><br><span class="line"><span class="string">                    那么 f<span class="subst">[n-1]</span><span class="subst">[m-1]</span> 就是我们最终的答案，而 f<span class="subst">[0]</span><span class="subst">[0]</span> = 1 是一个显而易见的起始条件。</span></span><br><span class="line"><span class="string">                    由于题目限定了我们只能往下或者往右移动，同时又存在障碍物</span></span><br><span class="line"><span class="string">                    因此我们的行动分析如下：</span></span><br><span class="line"><span class="string">                    1.当前obstacleGrid<span class="subst">[i]</span><span class="subst">[j]</span>不是障碍物的情况</span></span><br><span class="line"><span class="string">                        1.1.当前位置只能往下移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i-1]</span><span class="subst">[j]</span> (边界)</span></span><br><span class="line"><span class="string">                        1.2.当前位置只能往右移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i]</span><span class="subst">[j-1]</span> (边界)</span></span><br><span class="line"><span class="string">                        1.3.当前位置即能往下也能往右移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i]</span><span class="subst">[j-1]</span> + f<span class="subst">[i-1]</span><span class="subst">[j]</span></span></span><br><span class="line"><span class="string">                    2.当前obstacleGrid<span class="subst">[i]</span><span class="subst">[j]</span>是障碍物的情况</span></span><br><span class="line"><span class="string">                        2.1 将dp<span class="subst">[i]</span><span class="subst">[j]</span>设置为0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    对于不是障碍物情况的分析：当前位置不是障碍物，那么即时它是从障碍物过来的点也无所谓</span></span><br><span class="line"><span class="string">                    因为我们已经将障碍物对应的dp值设为了0，对于可能1的3三种情况分析：</span></span><br><span class="line"><span class="string">                    1.1 从上边过来的，但是上面那个位置是障碍物，因为我们将障碍物对应的dp设为1了，因此当前点即时不是障碍物</span></span><br><span class="line"><span class="string">                        但是由于它只能从障碍物过来，因此它的dp值等于障碍物的dp值为0</span></span><br><span class="line"><span class="string">                    1.2 同理只能从左边过来的，由于左边是障碍物，因此它的dp值也等于障碍物的dp值为0</span></span><br><span class="line"><span class="string">                    1.3 既能从左也能从上过来的，如果左边是障碍物那么当前dp=障碍物dp+从上过来的dp=从上过来的dp</span></span><br><span class="line"><span class="string">                        同理上边是障碍物那么当前dp=障碍物dp+从左过来的dp=从左过来的dp</span></span><br><span class="line"><span class="string">                        最后上边和左边均为障碍物，dp=0+0=0</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        dp = <span class="comment">[<span class="comment">[0 for i in range(len(obstacleGrid<span class="comment">[0]</span>))]</span> for i in range(len(obstacleGrid))]</span></span><br><span class="line">        dp<span class="comment">[0]</span><span class="comment">[0]</span> = 1</span><br><span class="line">        for i in range(len(obstacleGrid)):</span><br><span class="line">            for j in range(len(obstacleGrid<span class="comment">[0]</span>)):</span><br><span class="line">                # 当前位置不是障碍, 障碍为位置对应的dp<span class="comment">[i]</span><span class="comment">[j]</span>永远为0，因此在下面加上也无所谓</span><br><span class="line">                if obstacleGrid<span class="comment">[i]</span><span class="comment">[j]</span> != 1:</span><br><span class="line">                    if i &gt; 0 and j &gt; 0:</span><br><span class="line">                        dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i - 1]</span><span class="comment">[j]</span> + dp<span class="comment">[i]</span><span class="comment">[j - 1]</span>  # 非边界位置，因此它可以是从上边来的，可以是从左边来的</span><br><span class="line">                    elif i &gt; 0:  # 位于左边界  从上一个点过来只能往下走</span><br><span class="line">                        dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i - 1]</span><span class="comment">[j]</span></span><br><span class="line">                    elif j &gt; 0:  # 位于上边界 从上一个点过来只能往右走</span><br><span class="line">                        dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i]</span><span class="comment">[j - 1]</span></span><br><span class="line">                # 当前位置是障碍的情况</span><br><span class="line">                else:</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = 0</span><br><span class="line"></span><br><span class="line">        return dp<span class="comment">[-1]</span><span class="comment">[-1]</span></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.uniquePathsWithObstacles(obstacleGrid = <span class="comment">[<span class="comment">[0,1]</span>,<span class="comment">[0,0]</span>]</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第六十三题&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.62</title>
    <link href="www.strivezs.com/2021/03/22/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/22/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%BA%8C%E9%A2%98/</id>
    <published>2021-03-22T11:13:10.642Z</published>
    <updated>2021-03-22T11:13:10.642Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第六十二题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：m = <span class="number">3</span>, n = <span class="number">7</span></span><br><span class="line">输出：<span class="number">28</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：m = <span class="number">3</span>, n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：</span><br><span class="line">从左上角开始，总共有 <span class="number">3</span> 条路径可以到达右下角。</span><br><span class="line"><span class="number">1.</span> 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line"><span class="number">2.</span> 向下 -&gt; 向下 -&gt; 向右</span><br><span class="line"><span class="number">3.</span> 向下 -&gt; 向右 -&gt; 向下</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：m = <span class="number">7</span>, n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">28</span></span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：m = <span class="number">3</span>, n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">100</span></span><br><span class="line">题目数据保证答案小于等于 <span class="number">2</span> * <span class="number">109</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def uniquePaths(self, m, n):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                看到这道题，如果学过动态规划的话，肯定会首先想到使用动态规划来解</span></span><br><span class="line"><span class="string">                根据题目内容来定义dp<span class="subst">[i]</span><span class="subst">[j]</span></span></span><br><span class="line"><span class="string">                这里的dp<span class="subst">[i]</span><span class="subst">[j]</span>表示从左上角到达(i,j)位置最多路径数</span></span><br><span class="line"><span class="string">                动态规划解法:</span></span><br><span class="line"><span class="string">                    定义 f<span class="subst">[i]</span><span class="subst">[j]</span> 为到达位置 (i,j) 的不同路径数量。</span></span><br><span class="line"><span class="string">                    那么 f<span class="subst">[n-1]</span><span class="subst">[m-1]</span> 就是我们最终的答案，而 f<span class="subst">[0]</span><span class="subst">[0]</span> = 1 是一个显而易见的起始条件。</span></span><br><span class="line"><span class="string">                    由于题目限定了我们只能 往下 或者 往右 移动，因此我们按照当前可选方向进行分析：</span></span><br><span class="line"><span class="string">                        1.当前位置只能往下移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i-1]</span><span class="subst">[j]</span> (边界)</span></span><br><span class="line"><span class="string">                        2.当前位置只能往右移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i]</span><span class="subst">[j-1]</span> (边界)</span></span><br><span class="line"><span class="string">                        3.当前位置即能往下也能往右移动，即有 f<span class="subst">[i]</span><span class="subst">[j]</span> = f<span class="subst">[i]</span><span class="subst">[j-1]</span> + f<span class="subst">[i-1]</span><span class="subst">[j]</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        dp = <span class="comment">[<span class="comment">[0 for i in range(n)]</span> for i in range(m)]</span></span><br><span class="line">        dp<span class="comment">[0]</span><span class="comment">[0]</span> = 1</span><br><span class="line">        for i in range(m):</span><br><span class="line">            for j in range(n):</span><br><span class="line">                # 既能往下也能往右移动</span><br><span class="line">                if i &gt; 0 and j &gt; 0:</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i-1]</span><span class="comment">[j]</span> + dp<span class="comment">[i]</span><span class="comment">[j-1]</span> # 非边界位置，因此它可以是从上边来的，可以是从左边来的</span><br><span class="line">                elif i &gt; 0: # 位于左边界  从上一个点过来只能往下走</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i-1]</span><span class="comment">[j]</span></span><br><span class="line">                elif j &gt; 0: # 位于上边界 从上一个点过来只能往右走</span><br><span class="line">                    dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i]</span><span class="comment">[j-1]</span></span><br><span class="line">        return dp<span class="comment">[-1]</span><span class="comment">[-1]</span></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.uniquePaths(m = 3, n = 7))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第六十二题&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.61</title>
    <link href="www.strivezs.com/2021/03/21/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/21/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-03-21T11:13:08.322Z</published>
    <updated>2021-03-21T11:13:08.322Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第六十一题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL, k = <span class="number">2</span></span><br><span class="line">输出: <span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;NULL</span><br><span class="line">解释:</span><br><span class="line">向右旋转 <span class="number">1</span> 步: <span class="number">5</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;NULL</span><br><span class="line">向右旋转 <span class="number">2</span> 步: <span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;NULL</span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="number">0</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;NULL, k = <span class="number">4</span></span><br><span class="line">输出: <span class="number">2</span>-&gt;<span class="number">0</span>-&gt;<span class="number">1</span>-&gt;NULL</span><br><span class="line">解释:</span><br><span class="line">向右旋转 <span class="number">1</span> 步: <span class="number">2</span>-&gt;<span class="number">0</span>-&gt;<span class="number">1</span>-&gt;NULL</span><br><span class="line">向右旋转 <span class="number">2</span> 步: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">0</span>-&gt;NULL</span><br><span class="line">向右旋转 <span class="number">3</span> 步: <span class="number">0</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;NULL</span><br><span class="line">向右旋转 <span class="number">4</span> 步: <span class="number">2</span>-&gt;<span class="number">0</span>-&gt;<span class="number">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, val=<span class="number">0</span>, <span class="keyword">next</span>=None)</span></span><span class="symbol">:</span></span><br><span class="line">         <span class="keyword">self</span>.val = val</span><br><span class="line">         <span class="keyword">self</span>.<span class="keyword">next</span> = <span class="keyword">next</span></span><br><span class="line">import copy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">once_rotate</span><span class="params">(<span class="keyword">self</span>,head)</span></span><span class="symbol">:</span></span><br><span class="line">        res = copy.copy(head) <span class="comment"># 保存表头</span></span><br><span class="line">        temp1 = head.val</span><br><span class="line">        <span class="keyword">while</span> head.<span class="keyword">next</span> != <span class="symbol">None:</span></span><br><span class="line">            temp = head.<span class="keyword">next</span>.val</span><br><span class="line">            head.<span class="keyword">next</span>.val = temp1</span><br><span class="line">            temp1 = temp</span><br><span class="line">            head = head.<span class="keyword">next</span></span><br><span class="line">        <span class="comment"># 单独处理表尾</span></span><br><span class="line">        res.val = temp1</span><br><span class="line">        <span class="comment">#print(res.val)</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLen</span><span class="params">(<span class="keyword">self</span>,head)</span></span><span class="symbol">:</span></span><br><span class="line">        num = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> head.<span class="keyword">next</span> != <span class="symbol">None:</span></span><br><span class="line">            head = head.<span class="keyword">next</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(<span class="keyword">self</span>, head, k)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                实现一次链表移动，注意考虑尾部移动变成开头，注意考虑[]的情况</span></span><br><span class="line"><span class="string">                然后调用上述操作k次</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                上述操作超时，超时用例如下：</span></span><br><span class="line"><span class="string">                    [1,2,3]</span></span><br><span class="line"><span class="string">                    2000000000</span></span><br><span class="line"><span class="string">                改进算法如下：</span></span><br><span class="line"><span class="string">                1. 首先先遍历一遍列表得到列表的长度length</span></span><br><span class="line"><span class="string">                2. 然后使用列表长度来对k进行取余，因为如果对于一个长度为3的序列，旋转3次等于没旋转</span></span><br><span class="line"><span class="string">                3. 重复之前提到的链表 k%length 次</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="symbol">None:</span></span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        length = <span class="keyword">self</span>.getLen(head)</span><br><span class="line">        <span class="comment">#print(length)</span></span><br><span class="line">        finlK = k % length</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(finlK)<span class="symbol">:</span></span><br><span class="line">            head = <span class="keyword">self</span>.once_rotate(head)</span><br><span class="line">            <span class="comment">#print(head.val)</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    head = ListNode(<span class="number">1</span>)</span><br><span class="line">    t1 = ListNode(<span class="number">2</span>)</span><br><span class="line">    t2 = ListNode(<span class="number">3</span>)</span><br><span class="line">    t3 = ListNode(<span class="number">4</span>)</span><br><span class="line">    t4 = ListNode(<span class="number">5</span>)</span><br><span class="line">    head.<span class="keyword">next</span>=t1</span><br><span class="line">    t1.<span class="keyword">next</span>=t2</span><br><span class="line">    t2.<span class="keyword">next</span> = t3</span><br><span class="line">    t3.<span class="keyword">next</span> = t4</span><br><span class="line">    t4.<span class="keyword">next</span> = None</span><br><span class="line">    s = Solution()</span><br><span class="line">    res = s.rotateRight(head,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第六十一题&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.60</title>
    <link href="www.strivezs.com/2021/03/20/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/20/LeetCode%E7%AC%AC%E5%85%AD%E5%8D%81%E9%A2%98/</id>
    <published>2021-03-20T11:09:18.304Z</published>
    <updated>2021-03-20T11:09:18.304Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第六十题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"123"</span></span><br><span class="line"><span class="string">"132"</span></span><br><span class="line"><span class="string">"213"</span></span><br><span class="line"><span class="string">"231"</span></span><br><span class="line"><span class="string">"312"</span></span><br><span class="line"><span class="string">"321"</span></span><br></pre></td></tr></table></figure><p>给定 n 和 k，返回第 k 个排列。</p><p></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">3</span>, k = <span class="number">3</span></span><br><span class="line">输出：<span class="string">"213"</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">4</span>, k = <span class="number">9</span></span><br><span class="line">输出：<span class="string">"2314"</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">3</span>, k = <span class="number">1</span></span><br><span class="line">输出：<span class="string">"123"</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">9</span></span><br><span class="line"><span class="number">1</span> &lt;= k &lt;= n!</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><h3 id="回溯法超时版本"><a class="header-anchor" href="#回溯法超时版本">¶</a>回溯法超时版本</h3><p>理论剪去达到k之后所有循环应该不会超时的，但还是超时了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> goto <span class="keyword">import</span> with_goto</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 计数菌</span></span><br><span class="line">    jishuqi = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPermutation</span><span class="params">(self, n, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：这里Python有现成的库可以进行，但是为了能够掌握代码，这里我使用回溯法进行编写代码</span></span><br><span class="line"><span class="string">                然后返回第k个结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        回溯法的框架：</span></span><br><span class="line"><span class="string">            def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                if 满足停止条件：</span></span><br><span class="line"><span class="string">                    res.append(path)</span></span><br><span class="line"><span class="string">                for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                    做出选择</span></span><br><span class="line"><span class="string">                    递归执行backtrack</span></span><br><span class="line"><span class="string">                        满足则return True</span></span><br><span class="line"><span class="string">                    如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        result = []</span><br><span class="line">        temp = []</span><br><span class="line">        nums = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums,k)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> self.jishuqi == k:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums:  <span class="comment"># 如果为空则表示选择完毕</span></span><br><span class="line">                <span class="keyword">if</span> nums <span class="keyword">in</span> result:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.jishuqi += <span class="number">1</span></span><br><span class="line">                    result.append(temp[:])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                <span class="comment"># 做出选择</span></span><br><span class="line">                temp.append(nums[i])</span><br><span class="line">                <span class="comment"># 去除做出的选择</span></span><br><span class="line">                tt = nums[:i] + nums[i + <span class="number">1</span>:]</span><br><span class="line">                <span class="comment"># 接着执行选择</span></span><br><span class="line">                backtrack(tt,k)</span><br><span class="line">                <span class="comment"># 撤销选择</span></span><br><span class="line">                temp.pop()</span><br><span class="line"></span><br><span class="line">        backtrack(nums,k)</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(result[<span class="number">-1</span>])):</span><br><span class="line">            res += str(result[<span class="number">-1</span>][i])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.getPermutation(n=<span class="number">9</span>,k=<span class="number">54994</span>))</span><br></pre></td></tr></table></figure><h3 id="参考大佬的做法"><a class="header-anchor" href="#参考大佬的做法">¶</a>参考大佬的做法</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def getPermutation(self, n: <span class="keyword">int</span>, <span class="keyword">k</span>: <span class="keyword">int</span>) -&gt; str:</span><br><span class="line">        s, <span class="keyword">k</span>, <span class="keyword">res</span> = <span class="keyword">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>)), <span class="keyword">k</span>-<span class="number">1</span>, <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">res</span>, s, <span class="keyword">k</span> = <span class="keyword">res</span>+str(s[<span class="keyword">k</span> // factorial(i)]), s[:<span class="keyword">k</span> // factorial(i)]+s[<span class="keyword">k</span> // factorial(i)+<span class="number">1</span>:], <span class="keyword">k</span> % factorial(i)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">res</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第六十题&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Fork :)&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.59</title>
    <link href="www.strivezs.com/2021/03/19/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/19/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-03-19T04:56:20.914Z</published>
    <updated>2021-03-19T04:56:20.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十九题"><a href="#LeetCode第五十九题" class="headerlink" title="LeetCode第五十九题"></a>LeetCode第五十九题</h1><p>直接拿54题的代码改的，嘿嘿省事了。  </p><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：[[<span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateMatrix</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                类似54题提到的访问方式</span></span><br><span class="line"><span class="string">                首先要先将n×n的数组初始化全为0</span></span><br><span class="line"><span class="string">                然后正常采用由右→下→上→左→右的顺序访问即可</span></span><br><span class="line"><span class="string">                如果触碰到不为0的数或者超出边界，则重新调整方向</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        matrix = [] <span class="comment"># 初始化数组</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            matrix.append([<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line">        <span class="comment"># print(matrix)</span></span><br><span class="line">        direction = <span class="string">'right'</span> <span class="comment"># 方向初始为右，按照由右→下→上→左→右的顺序进行改变</span></span><br><span class="line">        num = <span class="number">1</span> <span class="comment"># 技术菌  从1开始到n^2结束</span></span><br><span class="line">        i,j = <span class="number">0</span>,<span class="number">0</span> <span class="comment"># 初始坐标</span></span><br><span class="line">        row = len(matrix) <span class="comment"># 行数</span></span><br><span class="line">        column = len(matrix[<span class="number">0</span>]) <span class="comment"># 列数</span></span><br><span class="line">        sum = row * column <span class="comment"># 矩阵元素总个数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> num &lt;= sum:</span><br><span class="line">            <span class="comment"># 先处理超出边界情况:</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= row: <span class="comment"># 行数超了</span></span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                direction = <span class="string">'left'</span></span><br><span class="line">            <span class="keyword">elif</span> i &lt; <span class="number">0</span>: <span class="comment"># 行数不够</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                direction = <span class="string">'right'</span></span><br><span class="line">            <span class="keyword">elif</span> j &lt; <span class="number">0</span>: <span class="comment"># 列数不够</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                direction = <span class="string">'up'</span></span><br><span class="line">            <span class="keyword">elif</span> j &gt;= column: <span class="comment"># 列出超了</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                direction = <span class="string">'down'</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在处理一下到达101的情况</span></span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> direction == <span class="string">'right'</span>:</span><br><span class="line">                    direction = <span class="string">'down'</span></span><br><span class="line">                    j -= <span class="number">1</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> direction == <span class="string">'down'</span>:</span><br><span class="line">                    direction = <span class="string">'left'</span></span><br><span class="line">                    i -= <span class="number">1</span></span><br><span class="line">                    j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> direction == <span class="string">'left'</span>:</span><br><span class="line">                    direction = <span class="string">'up'</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                    i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> direction == <span class="string">'up'</span>:</span><br><span class="line">                    direction = <span class="string">'right'</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 访问</span></span><br><span class="line">            matrix[i][j] = num</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 处理下标</span></span><br><span class="line">            <span class="keyword">if</span> direction == <span class="string">'right'</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">'down'</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">'left'</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">'up'</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.generateMatrix(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十九题&quot;&gt;&lt;a href=&quot;#LeetCode第五十九题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十九题&quot;&gt;&lt;/a&gt;LeetCode第五十九题&lt;/h1&gt;&lt;p&gt;直接拿54题的代码改的，嘿嘿省事了。  &lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.57</title>
    <link href="www.strivezs.com/2021/03/18/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%83%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/18/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%83%E9%A2%98/</id>
    <published>2021-03-18T10:48:42.511Z</published>
    <updated>2021-03-18T10:48:42.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十七题"><a href="#LeetCode第五十七题" class="headerlink" title="LeetCode第五十七题"></a>LeetCode第五十七题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个 无重叠的 ，按照区间起始端点排序的区间列表。</p><p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">int</span>ervals = [[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">6</span>,<span class="number">9</span>]], newInterval = [<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">9</span>]]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">int</span>ervals = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">12</span>,<span class="number">16</span>]], newInterval = [<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">10</span>],[<span class="number">12</span>,<span class="number">16</span>]]</span><br><span class="line">解释：这是因为新的区间 [<span class="number">4</span>,<span class="number">8</span>] 与 [<span class="number">3</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>],[<span class="number">8</span>,<span class="number">10</span>] 重叠。</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">int</span>ervals = [], newInterval = [<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">输出：[[<span class="number">5</span>,<span class="number">7</span>]]</span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">int</span>ervals = [[<span class="number">1</span>,<span class="number">5</span>]], newInterval = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">5</span>]]</span><br><span class="line">示例 <span class="number">5</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">int</span>ervals = [[<span class="number">1</span>,<span class="number">5</span>]], newInterval = [<span class="number">2</span>,<span class="number">7</span>]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">7</span>]]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &lt;= <span class="built_in">int</span>ervals.length &lt;= <span class="number">104</span></span><br><span class="line"><span class="built_in">int</span>ervals[i].length == <span class="number">2</span></span><br><span class="line"><span class="number">0</span> &lt;= <span class="built_in">int</span>ervals[i][<span class="number">0</span>] &lt;= <span class="built_in">int</span>ervals[i][<span class="number">1</span>] &lt;= <span class="number">105</span></span><br><span class="line"><span class="built_in">int</span>ervals 根据 <span class="built_in">int</span>ervals[i][<span class="number">0</span>] 按 升序 排列</span><br><span class="line">newInterval.length == <span class="number">2</span></span><br><span class="line"><span class="number">0</span> &lt;= newInterval[<span class="number">0</span>] &lt;= newInterval[<span class="number">1</span>] &lt;= <span class="number">105</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def insert(self, intervals, newInterval):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type intervals: List<span class="subst">[List[int]</span>]</span></span><br><span class="line"><span class="string">        :type newInterval: List<span class="subst">[int]</span></span></span><br><span class="line"><span class="string">        :rtype: List<span class="subst">[List[int]</span>]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                就是no.56的变形，只需要在开头把需要插入的区间添加到列表中</span></span><br><span class="line"><span class="string">                然后在进行56题的操作即可</span></span><br><span class="line"><span class="string">                依次判断:</span></span><br><span class="line"><span class="string">                 1. 有交集且全包含的情况 A包含B和B包含A</span></span><br><span class="line"><span class="string">                 2. 有交集且左包含的情况 <span class="subst">[1,4]</span> <span class="subst">[0,1]</span>  这个可以先对初始情况进行排序来解决</span></span><br><span class="line"><span class="string">                 3. 有交集且右包含的情况 <span class="subst">[0,2]</span> <span class="subst">[1,3]</span></span></span><br><span class="line"><span class="string">                 3.如果两个区间没有交集，则放入result</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        intervals.append(newInterval)</span><br><span class="line">        intervals = sorted(intervals)</span><br><span class="line">        result = <span class="comment">[]</span></span><br><span class="line">        temp = intervals<span class="comment">[0]</span></span><br><span class="line">        i = 1</span><br><span class="line">        while i &lt; len(intervals):</span><br><span class="line">            # 有交集且全包含的情况 A包含B</span><br><span class="line">            if temp<span class="comment">[0]</span> &gt;= intervals<span class="comment">[i]</span><span class="comment">[0]</span> and temp<span class="comment">[1]</span> &lt;= intervals<span class="comment">[i]</span><span class="comment">[1]</span>:</span><br><span class="line">                temp = intervals<span class="comment">[i]</span></span><br><span class="line">                i += 1</span><br><span class="line">            # 有交集且全包含的情况 B包含A</span><br><span class="line">            elif temp<span class="comment">[0]</span> &lt;= intervals<span class="comment">[i]</span><span class="comment">[0]</span> and temp<span class="comment">[1]</span> &gt;= intervals<span class="comment">[i]</span><span class="comment">[1]</span>:</span><br><span class="line">                i += 1</span><br><span class="line">            # 有交集且右包含</span><br><span class="line">            elif temp<span class="comment">[1]</span> &gt;= intervals<span class="comment">[i]</span><span class="comment">[0]</span>:</span><br><span class="line">                tt = <span class="comment">[]</span></span><br><span class="line">                tt.append(temp<span class="comment">[0]</span>)</span><br><span class="line">                tt.append(intervals<span class="comment">[i]</span><span class="comment">[1]</span>)</span><br><span class="line">                temp = tt</span><br><span class="line">                i += 1</span><br><span class="line">            else:  # 下一个</span><br><span class="line">                result.append(temp)</span><br><span class="line">                temp = intervals<span class="comment">[i]</span></span><br><span class="line">                i += 1</span><br><span class="line">        result.append(temp)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.insert(intervals = <span class="comment">[<span class="comment">[1,3]</span>,<span class="comment">[6,9]</span>]</span>, newInterval = <span class="comment">[2,5]</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十七题&quot;&gt;&lt;a href=&quot;#LeetCode第五十七题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十七题&quot;&gt;&lt;/a&gt;LeetCode第五十七题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.58</title>
    <link href="www.strivezs.com/2021/03/18/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/18/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-03-18T10:48:38.874Z</published>
    <updated>2021-03-18T10:48:38.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十八题"><a href="#LeetCode第五十八题" class="headerlink" title="LeetCode第五十八题"></a>LeetCode第五十八题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 s，由若干单词组成，单词之间用空格隔开。返回字符串中最后一个单词的长度。如果不存在最后一个单词，请返回 0 。</p><p>单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">"Hello World"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">" "</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= s.length &lt;= <span class="number">104</span></span><br><span class="line">s 仅有英文字母和空格 ' ' 组成</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def lengthOfLastWord(self, s):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> <span class="variable">s:</span> str</span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line">        核心思想:</span><br><span class="line">                <span class="keyword">python</span>方法直接用<span class="keyword">split</span>(<span class="string">' '</span>)对字符串进行划分，返回<span class="keyword">list</span>[-<span class="number">1</span>]的长度即可</span><br><span class="line">                注意考虑全是空格的情况</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        <span class="keyword">res</span> = s.<span class="keyword">split</span>(<span class="string">' '</span>)</span><br><span class="line">        #print(<span class="keyword">res</span>)</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="keyword">res</span>)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">res</span>[<span class="built_in">len</span>(<span class="keyword">res</span>)-i-<span class="number">1</span>] != <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">len</span>(<span class="keyword">res</span>[<span class="built_in">len</span>(<span class="keyword">res</span>)-i-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.lengthOfLastWord(s = <span class="string">"     "</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十八题&quot;&gt;&lt;a href=&quot;#LeetCode第五十八题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十八题&quot;&gt;&lt;/a&gt;LeetCode第五十八题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.56</title>
    <link href="www.strivezs.com/2021/03/16/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E5%85%AD%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/16/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E5%85%AD%E9%A2%98/</id>
    <published>2021-03-16T06:46:33.190Z</published>
    <updated>2021-03-16T06:46:33.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十六题"><a href="#LeetCode第五十六题" class="headerlink" title="LeetCode第五十六题"></a>LeetCode第五十六题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="built_in">int</span>ervals = [[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">18</span>]]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">8</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">18</span>]]</span><br><span class="line">解释：区间 [<span class="number">1</span>,<span class="number">3</span>] 和 [<span class="number">2</span>,<span class="number">6</span>] 重叠, 将它们合并为 [<span class="number">1</span>,<span class="number">6</span>].</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="built_in">int</span>ervals = [[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">5</span>]]</span><br><span class="line">解释：区间 [<span class="number">1</span>,<span class="number">4</span>] 和 [<span class="number">4</span>,<span class="number">5</span>] 可被视为重叠区间。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= <span class="built_in">int</span>ervals.length &lt;= <span class="number">104</span></span><br><span class="line"><span class="built_in">int</span>ervals[i].length == <span class="number">2</span></span><br><span class="line"><span class="number">0</span> &lt;= starti &lt;= endi &lt;= <span class="number">104</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def merge(self, intervals):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        :type intervals: List<span class="subst">[List[int]</span>]</span></span><br><span class="line"><span class="string">        :rtype: List<span class="subst">[List[int]</span>]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                依次判断:</span></span><br><span class="line"><span class="string">                 1. 有交集且全包含的情况 A包含B和B包含A</span></span><br><span class="line"><span class="string">                 2. 有交集且左包含的情况 <span class="subst">[1,4]</span> <span class="subst">[0,1]</span>  这个可以先对初始情况进行排序来解决</span></span><br><span class="line"><span class="string">                 3. 有交集且右包含的情况 <span class="subst">[0,2]</span> <span class="subst">[1,3]</span></span></span><br><span class="line"><span class="string">                 3.如果两个区间没有交集，则放入result</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        intervals = sorted(intervals)</span><br><span class="line">        result = <span class="comment">[]</span></span><br><span class="line">        temp = intervals<span class="comment">[0]</span></span><br><span class="line">        i = 1</span><br><span class="line">        while i &lt; len(intervals):</span><br><span class="line">            # 有交集且全包含的情况 A包含B</span><br><span class="line">            if temp<span class="comment">[0]</span> &gt;= intervals<span class="comment">[i]</span><span class="comment">[0]</span> and temp<span class="comment">[1]</span> &lt;= intervals<span class="comment">[i]</span><span class="comment">[1]</span>:</span><br><span class="line">                temp = intervals<span class="comment">[i]</span></span><br><span class="line">                i += 1</span><br><span class="line">            # 有交集且全包含的情况 B包含A</span><br><span class="line">            elif temp<span class="comment">[0]</span> &lt;= intervals<span class="comment">[i]</span><span class="comment">[0]</span> and temp<span class="comment">[1]</span> &gt;= intervals<span class="comment">[i]</span><span class="comment">[1]</span>:</span><br><span class="line">                i += 1</span><br><span class="line">            # 有交集且右包含</span><br><span class="line">            elif temp<span class="comment">[1]</span> &gt;= intervals<span class="comment">[i]</span><span class="comment">[0]</span>:</span><br><span class="line">                tt = <span class="comment">[]</span></span><br><span class="line">                tt.append(temp<span class="comment">[0]</span>)</span><br><span class="line">                tt.append(intervals<span class="comment">[i]</span><span class="comment">[1]</span>)</span><br><span class="line">                temp = tt</span><br><span class="line">                i += 1</span><br><span class="line">            else: # 下一个</span><br><span class="line">                result.append(temp)</span><br><span class="line">                temp = intervals<span class="comment">[i]</span></span><br><span class="line">                i += 1</span><br><span class="line">        result.append(temp)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.merge(intervals = <span class="comment">[<span class="comment">[1,4]</span>,<span class="comment">[0,1]</span>]</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十六题&quot;&gt;&lt;a href=&quot;#LeetCode第五十六题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十六题&quot;&gt;&lt;/a&gt;LeetCode第五十六题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.55</title>
    <link href="www.strivezs.com/2021/03/15/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%BA%94%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/15/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%BA%94%E9%A2%98/</id>
    <published>2021-03-15T09:27:22.643Z</published>
    <updated>2021-03-15T09:27:22.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十五题"><a href="#LeetCode第五十五题" class="headerlink" title="LeetCode第五十五题"></a>LeetCode第五十五题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Fork :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可以先跳 <span class="number">1</span> 步，从下标 <span class="number">0</span> 到达下标 <span class="number">1</span>, 然后再从下标 <span class="number">1</span> 跳 <span class="number">3</span> 步到达最后一个下标。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：无论怎样，总会到达下标为 <span class="number">3</span> 的位置。但该下标的最大跳跃长度是 <span class="number">0</span> ， 所以永远不可能到达最后一个下标。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">3</span> * <span class="number">104</span></span><br><span class="line"><span class="number">0</span> &lt;= nums[i] &lt;= <span class="number">105</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 动态规划——超时版本</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout_canJump</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                类似之前做过的那道题《跳跃游戏II》，同样可以用动态规划来进行代码的编写</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dp = [len(nums)+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums))]  <span class="comment"># 每个dp的值表示的是到当前位置的最小步数</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span> <span class="comment"># 表示到达第一个位置的最小步数为0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)): <span class="comment"># 不算初始位置，选择从i之前位置到i的最短距离</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,i):</span><br><span class="line">                <span class="keyword">if</span> nums[j] &gt;= i-j: <span class="comment"># 表示可以一步从j到i</span></span><br><span class="line">                    dp[i] = min(dp[i],dp[j]+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dp[<span class="number">-1</span>] != len(nums)+<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># AC版本</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                上个动态规划版本成功超时了，下面考虑用其他的办法</span></span><br><span class="line"><span class="string">                其他的办法, 分为以下几点:</span></span><br><span class="line"><span class="string">                    1) 从右往左考虑</span></span><br><span class="line"><span class="string">                    2) 找到为0的位置，判断0之前是否有元素能够跨过0，如果没有则返回False</span></span><br><span class="line"><span class="string">                    3) 除0之外的位置，由于不需要像跳跃游戏II中考虑最短步数，因此均可以到达</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span> <span class="keyword">and</span> nums[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        i = len(nums)<span class="number">-2</span> <span class="comment"># 从最后一个元素考虑</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,i):</span><br><span class="line">                    <span class="keyword">if</span> nums[j] &gt; i-j:</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.canJump(nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十五题&quot;&gt;&lt;a href=&quot;#LeetCode第五十五题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十五题&quot;&gt;&lt;/a&gt;LeetCode第五十五题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.54</title>
    <link href="www.strivezs.com/2021/03/14/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E5%9B%9B%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/14/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E5%9B%9B%E9%A2%98/</id>
    <published>2021-03-14T07:37:32.480Z</published>
    <updated>2021-03-14T07:37:32.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十四题"><a href="#LeetCode第五十四题" class="headerlink" title="LeetCode第五十四题"></a>LeetCode第五十四题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Folk :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" alt="figure.2"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == matrix.length</span><br><span class="line">n == matrix[i].length</span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">10</span></span><br><span class="line"><span class="number">-100</span> &lt;= matrix[i][j] &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十四题&quot;&gt;&lt;a href=&quot;#LeetCode第五十四题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十四题&quot;&gt;&lt;/a&gt;LeetCode第五十四题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.53</title>
    <link href="www.strivezs.com/2021/03/13/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%89%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/13/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%89%E9%A2%98/</id>
    <published>2021-03-13T15:25:07.216Z</published>
    <updated>2021-03-13T15:25:07.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十三题"><a href="#LeetCode第五十三题" class="headerlink" title="LeetCode第五十三题"></a>LeetCode第五十三题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Folk :)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：连续子数组 [<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>] 的和最大，为 <span class="number">6</span> 。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">-1</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">示例 <span class="number">5</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">-100000</span>]</span><br><span class="line">输出：<span class="number">-100000</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">3</span> * <span class="number">104</span></span><br><span class="line"><span class="number">-105</span> &lt;= nums[i] &lt;= <span class="number">105</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def maxSubArray(self, nums):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> num<span class="variable">s:</span> List[<span class="keyword">int</span>]</span><br><span class="line">        :rtype: <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">        核心思想: <span class="number">1</span>. 暴力法：遍历所有情况吧，采用适当的剪枝</span><br><span class="line">                <span class="number">2</span>. 动态规划：突然想到可以采用动态规划的方法</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        # 本题就采用动态规划的方法</span><br><span class="line">        <span class="keyword">dp</span> = [<span class="number">0</span> <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(nums))]</span><br><span class="line">        <span class="keyword">dp</span>[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        result = <span class="keyword">dp</span>[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">dp</span>[i] = <span class="built_in">max</span>(<span class="keyword">dp</span>[i-<span class="number">1</span>]+nums[i],nums[i])</span><br><span class="line">            result = <span class="built_in">max</span>(result,<span class="keyword">dp</span>[i])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="keyword">print</span>(s.maxSubArray(nums = [<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十三题&quot;&gt;&lt;a href=&quot;#LeetCode第五十三题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十三题&quot;&gt;&lt;/a&gt;LeetCode第五十三题&lt;/h1&gt;&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.52</title>
    <link href="www.strivezs.com/2021/03/12/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%BA%8C%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/12/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%BA%8C%E9%A2%98/</id>
    <published>2021-03-12T11:44:18.240Z</published>
    <updated>2021-03-12T11:44:18.240Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第五十二题</h1><p>自己代码的开源仓库:<a href="https://github.com/zs670980918/LeetCode_Coding_Record">click here</a>  欢迎Star和Folk :)</p><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回 n 皇后问题 不同的解决方案的数量。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：如上图所示，<span class="number">4</span> 皇后问题存在两个不同的解法。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">9</span></span><br><span class="line">皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>仅对上一个代码进行简单的修改，即可以得到本题对应的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(self,QiPan, placeI, placeJ, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :arg 判断新位置的皇后是否合法</span></span><br><span class="line"><span class="string">        :type QiPan: List[List[str]]</span></span><br><span class="line"><span class="string">        :type placeI: int</span></span><br><span class="line"><span class="string">        :type placeJ: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype : Boolean</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 剪枝判断法： 由于给定当前i和j，又因为是从左上往右下依次放置皇后的，因此不需要判断行数和列数同时大于当前位置的元素</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># 去掉还没有放置皇后的位置</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; placeI <span class="keyword">and</span> j &gt; placeJ:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 判断和n在同一行上的位置</span></span><br><span class="line">                <span class="keyword">if</span> i == placeI:</span><br><span class="line">                    <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">return</span> flag</span><br><span class="line">                <span class="comment"># 判断和n在同一列上的位置</span></span><br><span class="line">                <span class="keyword">if</span> j == placeJ:</span><br><span class="line">                    <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 判断斜线上的位置, 可以用过计算斜率来确定是否在一条斜线上</span></span><br><span class="line">                <span class="keyword">if</span> i != placeI <span class="keyword">and</span> j != placeJ:</span><br><span class="line">                    <span class="keyword">if</span> abs(i - placeI)/abs(j - placeJ) == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                            flag = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">totalNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[str]]</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                首先想到的是回溯法，通过回溯法来遍历所有的可能，如果满足条件则选择该情况，否则撤回选择</span></span><br><span class="line"><span class="string">                def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                    if 满足停止条件：</span></span><br><span class="line"><span class="string">                        res.append(path)</span></span><br><span class="line"><span class="string">                    for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                        做出选择</span></span><br><span class="line"><span class="string">                        递归执行backtrack</span></span><br><span class="line"><span class="string">                            满足则return True</span></span><br><span class="line"><span class="string">                        如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        QiPan = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            QiPan.append([<span class="string">'.'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line">        <span class="comment"># print(QiPan)</span></span><br><span class="line"></span><br><span class="line">        res = [] <span class="comment"># 存储结果棋盘</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(QiPan, i, n)</span>:</span></span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            :arg 回溯法</span></span><br><span class="line"><span class="string">            :type QiPan: List[List[str]]</span></span><br><span class="line"><span class="string">            :type i: int</span></span><br><span class="line"><span class="string">            :type n: int</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment"># 停止条件</span></span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">import</span> copy</span><br><span class="line">                temp = copy.deepcopy(QiPan)</span><br><span class="line">                once_res = []</span><br><span class="line">                <span class="comment"># 处理一下结果</span></span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">                    str1 = <span class="string">""</span></span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(temp[m])):</span><br><span class="line">                        str1 += temp[m][n]</span><br><span class="line">                    once_res.append(str1)</span><br><span class="line">                res.append(once_res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 遍历所有选择</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># 进行选择</span></span><br><span class="line">                <span class="keyword">if</span> self.judge(QiPan,i,j,n):</span><br><span class="line">                    QiPan[i][j] = <span class="string">'Q'</span></span><br><span class="line">                    backtrack(QiPan,i+<span class="number">1</span>,n)</span><br><span class="line">                    QiPan[i][j] = <span class="string">'.'</span>  <span class="comment"># 撤销选择</span></span><br><span class="line"></span><br><span class="line">        backtrack(QiPan,<span class="number">0</span>,n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.totalNQueens(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第五十二题&lt;/h1&gt;
&lt;p&gt;自己代码的开源仓库:&lt;a href=&quot;https://github.com/zs670980918/LeetCode_Coding_Record&quot;&gt;click here&lt;/a&gt;  欢迎Star和Folk :)&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.51</title>
    <link href="www.strivezs.com/2021/03/11/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%80%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/11/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%80%E9%A2%98/</id>
    <published>2021-03-11T14:20:37.175Z</published>
    <updated>2021-03-11T14:20:37.175Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第五十一题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt="figure.1"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：[[<span class="string">".Q.."</span>,<span class="string">"...Q"</span>,<span class="string">"Q..."</span>,<span class="string">"..Q."</span>],[<span class="string">"..Q."</span>,<span class="string">"Q..."</span>,<span class="string">"...Q"</span>,<span class="string">".Q.."</span>]]</span><br><span class="line">解释：如上图所示，<span class="number">4</span> 皇后问题存在两个不同的解法。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：[[<span class="string">"Q"</span>]]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= n &lt;= <span class="number">9</span></span><br><span class="line">皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(self,QiPan, placeI, placeJ, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :arg 判断新位置的皇后是否合法</span></span><br><span class="line"><span class="string">        :type QiPan: List[List[str]]</span></span><br><span class="line"><span class="string">        :type placeI: int</span></span><br><span class="line"><span class="string">        :type placeJ: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype : Boolean</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 剪枝判断法： 由于给定当前i和j，又因为是从左上往右下依次放置皇后的，因此不需要判断行数和列数同时大于当前位置的元素</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># 去掉还没有放置皇后的位置</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; placeI <span class="keyword">and</span> j &gt; placeJ:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 判断和n在同一行上的位置</span></span><br><span class="line">                <span class="keyword">if</span> i == placeI:</span><br><span class="line">                    <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">return</span> flag</span><br><span class="line">                <span class="comment"># 判断和n在同一列上的位置</span></span><br><span class="line">                <span class="keyword">if</span> j == placeJ:</span><br><span class="line">                    <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 判断斜线上的位置, 可以用过计算斜率来确定是否在一条斜线上</span></span><br><span class="line">                <span class="keyword">if</span> i != placeI <span class="keyword">and</span> j != placeJ:</span><br><span class="line">                    <span class="keyword">if</span> abs(i - placeI)/abs(j - placeJ) == <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> QiPan[i][j] == <span class="string">'Q'</span>:</span><br><span class="line">                            flag = <span class="literal">False</span></span><br><span class="line">                            <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[str]]</span></span><br><span class="line"><span class="string">        核心思想：</span></span><br><span class="line"><span class="string">                首先想到的是回溯法，通过回溯法来遍历所有的可能，如果满足条件则选择该情况，否则撤回选择</span></span><br><span class="line"><span class="string">                def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                    if 满足停止条件：</span></span><br><span class="line"><span class="string">                        res.append(path)</span></span><br><span class="line"><span class="string">                    for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                        做出选择</span></span><br><span class="line"><span class="string">                        递归执行backtrack</span></span><br><span class="line"><span class="string">                            满足则return True</span></span><br><span class="line"><span class="string">                        如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        QiPan = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            QiPan.append([<span class="string">'.'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line">        <span class="comment"># print(QiPan)</span></span><br><span class="line"></span><br><span class="line">        res = [] <span class="comment"># 存储结果棋盘</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(QiPan, i, n)</span>:</span></span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            :arg 回溯法</span></span><br><span class="line"><span class="string">            :type QiPan: List[List[str]]</span></span><br><span class="line"><span class="string">            :type i: int</span></span><br><span class="line"><span class="string">            :type n: int</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment"># 停止条件</span></span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">import</span> copy</span><br><span class="line">                temp = copy.deepcopy(QiPan)</span><br><span class="line">                once_res = []</span><br><span class="line">                <span class="comment"># 处理一下结果</span></span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">                    str1 = <span class="string">""</span></span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(temp[m])):</span><br><span class="line">                        str1 += temp[m][n]</span><br><span class="line">                    once_res.append(str1)</span><br><span class="line">                res.append(once_res)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 遍历所有选择</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># 进行选择</span></span><br><span class="line">                <span class="keyword">if</span> self.judge(QiPan,i,j,n):</span><br><span class="line">                    QiPan[i][j] = <span class="string">'Q'</span></span><br><span class="line">                    backtrack(QiPan,i+<span class="number">1</span>,n)</span><br><span class="line">                    QiPan[i][j] = <span class="string">'.'</span>  <span class="comment"># 撤销选择</span></span><br><span class="line"></span><br><span class="line">        backtrack(QiPan,<span class="number">0</span>,n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.solveNQueens(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第五十一题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.50</title>
    <link href="www.strivezs.com/2021/03/10/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/10/LeetCode%E7%AC%AC%E4%BA%94%E5%8D%81%E9%A2%98/</id>
    <published>2021-03-10T05:33:14.618Z</published>
    <updated>2021-03-10T05:33:14.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第五十题"><a href="#LeetCode第五十题" class="headerlink" title="LeetCode第五十题"></a>LeetCode第五十题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：x = <span class="number">2.00000</span>, n = <span class="number">10</span></span><br><span class="line">输出：<span class="number">1024.00000</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：x = <span class="number">2.10000</span>, n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">9.26100</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：x = <span class="number">2.00000</span>, n = <span class="number">-2</span></span><br><span class="line">输出：<span class="number">0.25000</span></span><br><span class="line">解释：<span class="number">2</span><span class="number">-2</span> = <span class="number">1</span>/<span class="number">22</span> = <span class="number">1</span>/<span class="number">4</span> = <span class="number">0.25</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">-100.0</span> &lt; x &lt; <span class="number">100.0</span></span><br><span class="line"><span class="number">-231</span> &lt;= n &lt;= <span class="number">231</span><span class="number">-1</span></span><br><span class="line"><span class="number">-104</span> &lt;= xn &lt;= <span class="number">104</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TimeOut</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: float</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                1. 第一种方法，有一个测试用例超时了</span></span><br><span class="line"><span class="string">                如果n小于0的话，则使用1/x，重复n次</span></span><br><span class="line"><span class="string">                如果n大于0的话，则使用1*x 重复n次</span></span><br><span class="line"><span class="string">                如果n等于0的话，返回1</span></span><br><span class="line"><span class="string">                注意结果要保留5位小数, 结果类型为float</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                2. 第二种方法，采用快速幂方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0000</span></span><br><span class="line"></span><br><span class="line">        result = float(<span class="number">1.0000</span>)</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(abs(n)):</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                result = result * x</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = result / x</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> float(format(result,<span class="string">'.5f'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: float</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想:</span></span><br><span class="line"><span class="string">                1. 第一种方法，有一个测试用例超时了</span></span><br><span class="line"><span class="string">                如果n小于0的话，则使用1/x，重复n次</span></span><br><span class="line"><span class="string">                如果n大于0的话，则使用1*x 重复n次</span></span><br><span class="line"><span class="string">                如果n等于0的话，返回1</span></span><br><span class="line"><span class="string">                注意结果要保留5位小数, 结果类型为float</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                2. 第二种方法，采用快速幂方法</span></span><br><span class="line"><span class="string">                快速幂算法能帮我们算出指数非常大的幂，传统的求幂算法之所以时间复杂度非常高（为O(指数n)），</span></span><br><span class="line"><span class="string">                就是因为当指数n非常大的时候，需要执行的循环操作次数也非常大。</span></span><br><span class="line"><span class="string">                所以我们快速幂算法的核心思想就是每一步都把指数分成两半，而相应的底数做平方运算。</span></span><br><span class="line"><span class="string">                这样不仅能把非常大的指数给不断变小，所需要执行的循环次数也变小，而最后表示的结果却一直不会变。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                3^10=3*3*3*3*3*3*3*3*3*3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                //尽量想办法把指数变小来，这里的指数为10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                3^10=(3*3)*(3*3)*(3*3)*(3*3)*(3*3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                3^10=(3*3)^5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                3^10=9^5</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 由于python递归和其他语言的递归调用方式不用，因此需要单独声明一个新的函数来进行递归调用</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">call_pow</span><span class="params">(x,n)</span>:</span></span><br><span class="line">            <span class="comment"># 采用递归方式调用</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">elif</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 如果指数可以被2取余为0，则x变平方 指数除2  比如: 3^4 变成(3^2)^2 = (3*3)^2</span></span><br><span class="line">                <span class="keyword">return</span> call_pow(x * x, n / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">elif</span> n &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> call_pow(x, n - <span class="number">1</span>)*x  <span class="comment"># 如果n不能被2整除，则减一</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> / call_pow(x, -n)  <span class="comment"># 单独处理n为负数的情况</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> float(format(call_pow(x,n),<span class="string">'.5f'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.myPow(x = <span class="number">8.88023</span>, n = <span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第五十题&quot;&gt;&lt;a href=&quot;#LeetCode第五十题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第五十题&quot;&gt;&lt;/a&gt;LeetCode第五十题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; cla
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.49</title>
    <link href="www.strivezs.com/2021/03/09/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B9%9D%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/09/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B9%9D%E9%A2%98/</id>
    <published>2021-03-09T15:46:32.385Z</published>
    <updated>2021-03-09T15:46:32.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode第四十九题"><a href="#LeetCode第四十九题" class="headerlink" title="LeetCode第四十九题"></a>LeetCode第四十九题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p>示例:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="string">"eat"</span>, <span class="string">"tea"</span>, <span class="string">"tan"</span>, <span class="string">"ate"</span>, <span class="string">"nat"</span>, <span class="string">"bat"</span>]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="string">"ate"</span>,<span class="string">"eat"</span>,<span class="string">"tea"</span>],</span><br><span class="line">  [<span class="string">"nat"</span>,<span class="string">"tan"</span>],</span><br><span class="line">  [<span class="string">"bat"</span>]</span><br><span class="line">]</span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">所有输入均为小写字母。</span><br><span class="line">不考虑答案输出的顺序。</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def groupAnagrams(self, strs):</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        :<span class="built_in">type</span> str<span class="variable">s:</span> List[str]</span><br><span class="line">        :rtype: List[List[str]]</span><br><span class="line"></span><br><span class="line">        核心思想:</span><br><span class="line">                第一种思路: 个人理解，首先对列表内容排序</span><br><span class="line">                然后遍历列表中所有的字符串，将字母相同但是异位分别放在不同的列表中</span><br><span class="line">                可以考虑使用字典统计</span><br><span class="line"></span><br><span class="line">                第二种思路：首先我想到的是对每个字母赋值，然后计算每个字符串的总和，但是发现这样可能不同的字符串组合也会有相同的值</span><br><span class="line">                因此考虑对每个字符串进行单独排序，然后判断他是否在里面，如果在则添加进去，如果不在则接着判断知道没有再创建一个新的</span><br><span class="line">        <span class="string">""</span><span class="comment">"</span></span><br><span class="line">        strs = sorted(strs)</span><br><span class="line">        result = []</span><br><span class="line">        judge_list = []</span><br><span class="line">        # tt = strs[<span class="number">0</span>]</span><br><span class="line">        # tt = sorted(tt)</span><br><span class="line">        # <span class="keyword">print</span>(<span class="string">''</span>.<span class="keyword">join</span>(tt))</span><br><span class="line">        # <span class="keyword">print</span>(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">            tt = strs[i]</span><br><span class="line">            tt = <span class="string">''</span>.<span class="keyword">join</span>(sorted(tt))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(result) == <span class="number">0</span>:</span><br><span class="line">                judge_list.<span class="keyword">append</span>(tt)</span><br><span class="line">                temp = []</span><br><span class="line">                temp.<span class="keyword">append</span>(strs[i])</span><br><span class="line">                result.<span class="keyword">append</span>(temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> tt not in judge_lis<span class="variable">t:</span></span><br><span class="line">                    judge_list.<span class="keyword">append</span>(tt)</span><br><span class="line">                    temp = []</span><br><span class="line">                    temp.<span class="keyword">append</span>(strs[i])</span><br><span class="line">                    result.<span class="keyword">append</span>(temp)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">index</span> = judge_list.<span class="built_in">index</span>(tt)</span><br><span class="line">                    result[<span class="built_in">index</span>].<span class="keyword">append</span>(strs[i])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    s.groupAnagrams([<span class="string">"eat"</span>, <span class="string">"tea"</span>, <span class="string">"tan"</span>, <span class="string">"ate"</span>, <span class="string">"nat"</span>, <span class="string">"bat"</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode第四十九题&quot;&gt;&lt;a href=&quot;#LeetCode第四十九题&quot; class=&quot;headerlink&quot; title=&quot;LeetCode第四十九题&quot;&gt;&lt;/a&gt;LeetCode第四十九题&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.48</title>
    <link href="www.strivezs.com/2021/03/08/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AB%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/08/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AB%E9%A2%98/</id>
    <published>2021-03-08T11:32:34.191Z</published>
    <updated>2021-03-08T11:32:34.191Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十八题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p><p></p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg" alt="figure.1"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">输出：[[<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>],[<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>],[<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg" alt="figure.2"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">11</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>],[<span class="number">13</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">15</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">16</span>]]</span><br><span class="line">输出：[[<span class="number">15</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">14</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>],[<span class="number">12</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">16</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">1</span>]]</span><br><span class="line">输出：[[<span class="number">1</span>]]</span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">输出：[[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution(object):</span><br><span class="line">    def <span class="keyword">rotate</span>(self, <span class="keyword">matrix</span>):</span><br><span class="line">        <span class="string">""</span>"</span><br><span class="line">        :<span class="keyword">type</span> <span class="keyword">matrix</span>: <span class="keyword">List</span>[<span class="keyword">List</span>[int]]</span><br><span class="line">        :rtype: None <span class="keyword">Do</span> not <span class="keyword">return</span> anything, modify <span class="keyword">matrix</span> <span class="keyword">in</span>-place instead.</span><br><span class="line"></span><br><span class="line">        核心思想:</span><br><span class="line">                分析示例可以看出，我们如果先进性矩阵的转置，则可以得到目标结果的中心对称矩阵，然后在对该矩阵进行镜像</span><br><span class="line">                即可以得到目标矩阵</span><br><span class="line">        <span class="string">""</span>"</span><br><span class="line">        <span class="keyword">n</span> = len(<span class="keyword">matrix</span>)</span><br><span class="line">        # 先进行转置  行变列、列变黄</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">n</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">n</span>):</span><br><span class="line">                # 仅进行对角交换即可</span><br><span class="line">                <span class="keyword">if</span> j &gt; i:</span><br><span class="line">                    t = <span class="keyword">matrix</span>[i][j]</span><br><span class="line">                    <span class="keyword">matrix</span>[i][j] = <span class="keyword">matrix</span>[j][i]</span><br><span class="line">                    <span class="keyword">matrix</span>[j][i] = t</span><br><span class="line"></span><br><span class="line">        # 再进行镜像 中心轴对称变换</span><br><span class="line">        center_axis = int(<span class="keyword">n</span>/2) # 中心轴对应的下标</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">n</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(<span class="keyword">n</span>):</span><br><span class="line">                <span class="keyword">if</span> j &lt; center_axis:</span><br><span class="line">                    t = <span class="keyword">matrix</span>[i][j]</span><br><span class="line">                    <span class="keyword">matrix</span>[i][j] = <span class="keyword">matrix</span>[i][<span class="keyword">n</span>-j-1]</span><br><span class="line">                    <span class="keyword">matrix</span>[i][<span class="keyword">n</span> - j - 1] = t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    s = Solution()</span><br><span class="line">    s.<span class="keyword">rotate</span>(<span class="keyword">matrix</span> = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十八题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode No.47</title>
    <link href="www.strivezs.com/2021/03/07/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%83%E9%A2%98/"/>
    <id>www.strivezs.com/2021/03/07/LeetCode%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%83%E9%A2%98/</id>
    <published>2021-03-07T04:50:52.429Z</published>
    <updated>2021-03-07T04:50:52.429Z</updated>
    
    <content type="html"><![CDATA[<h1>LeetCode第四十七题</h1><h2 id="题目描述"><a class="header-anchor" href="#题目描述">¶</a>题目描述</h2><p>给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。</p><p></p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：</span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= nums.length &lt;= <span class="number">8</span></span><br><span class="line"><span class="number">-10</span> &lt;= nums[i] &lt;= <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a class="header-anchor" href="#代码">¶</a>代码</h2><p>本题和上一道题目异曲同工，只是添加一个额外的重复检测代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permuteUnique</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        核心思想：这里Python有现成的库可以进行，但是为了能够掌握代码，这里我使用回溯法进行编写代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        回溯法的框架：</span></span><br><span class="line"><span class="string">            def backtrack(path, selected):</span></span><br><span class="line"><span class="string">                if 满足停止条件：</span></span><br><span class="line"><span class="string">                    res.append(path)</span></span><br><span class="line"><span class="string">                for 选择 in 选择列表：</span></span><br><span class="line"><span class="string">                    做出选择</span></span><br><span class="line"><span class="string">                    递归执行backtrack</span></span><br><span class="line"><span class="string">                        满足则return True</span></span><br><span class="line"><span class="string">                    如果不满足要求就撤销选择</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        result = []</span><br><span class="line">        temp = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="comment"># 如果为空则表示选择完毕</span></span><br><span class="line">                <span class="keyword">if</span> temp <span class="keyword">in</span> result:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result.append(temp[:])</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                <span class="comment"># 做出选择</span></span><br><span class="line">                temp.append(nums[i])</span><br><span class="line">                <span class="comment"># 去除做出的选择</span></span><br><span class="line">                tt = nums[:i]+nums[i+<span class="number">1</span>:]</span><br><span class="line">                <span class="comment"># 接着执行选择</span></span><br><span class="line">                backtrack(tt)</span><br><span class="line">                <span class="comment"># 撤销选择</span></span><br><span class="line">                temp.pop()</span><br><span class="line">        backtrack(nums)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.permuteUnique([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;LeetCode第四十七题&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#题目描述&quot;&gt;¶&lt;/a&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="OJ" scheme="www.strivezs.com/categories/OJ/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/categories/OJ/LeetCode/"/>
    
    
      <category term="Programing" scheme="www.strivezs.com/tags/Programing/"/>
    
      <category term="LeetCode" scheme="www.strivezs.com/tags/LeetCode/"/>
    
      <category term="OJ" scheme="www.strivezs.com/tags/OJ/"/>
    
  </entry>
  
</feed>
